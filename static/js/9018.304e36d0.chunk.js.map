{"version":3,"sources":["../node_modules/@isle-project/components/data-explorer/menu/contourchart.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/checkbox/main.js","../node_modules/@isle-project/components/input/checkbox/index.js","../node_modules/@isle-project/components/input/slider/main.js","../node_modules/@isle-project/components/input/slider/index.js"],"names":["ContourChartMenu","props","useState","variables","x","setX","y","setY","overlayPoints","setOverlayPoints","regressionMethod","setRegressionMethod","smoothSpan","setSmoothSpan","t","as","title","content","legend","defaultValue","options","onChange","menuPlacement","multi","value","isArray","min","max","step","disabled","contains","variant","block","onClick","data","onCreated","onSelected","logAction","session","plotId","randomstring","action","output","id","onShare","addNotification","message","level","position","DATA_EXPLORER_SHARE_CONTOURPLOT","DATA_EXPLORER_CONTOURPLOT","defaultProps","popover","trigger","placement","rootClose","overlay","size","className","CheckboxInput","context","newValue","setState","bind","global","lesson","event","target","checked","updateValue","state","this","globalVal","input","type","handleChange","aria-label","tooltip","inline","tooltipPlacement","style","marginLeft","role","tabIndex","color","handleSpanChange","onKeyPress","onSpanChange","noop","nextProps","prevState","newState","isEmptyObject","Input","propTypes","PropTypes","contextType","SessionContext","debug","logger","createTooltip","PINF","NINF","SliderInput","parseFloat","valid","validity","prevProps","precision","minLabel","maxLabel","roundn","rangeInput","handleInputChange","width","float","display","rangeInputStyle","numberInput","name","onBlur","finishChange","marginTop","numberInputStyle","autoComplete","padding","opacity","Badge","show","hideTooltip"],"mappings":"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","file":"static/js/9018.304e36d0.chunk.js","sourcesContent":["// MODULES //\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport contains from '@stdlib/assert/contains';\nimport isArray from '@stdlib/assert/is-array';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport ContourChart from '@isle-project/components/plots/contourchart';\nimport SelectInput from '@isle-project/components/input/select';\nimport SliderInput from '@isle-project/components/input/slider';\nimport randomstring from '@isle-project/utils/randomstring/alphanumeric';\nimport { DATA_EXPLORER_SHARE_CONTOURPLOT, DATA_EXPLORER_CONTOURPLOT } from '@isle-project/constants/actions.js';\nimport QuestionButton from '../question_button.js';\n\n\n// MAIN //\n\nconst ContourChartMenu = ( props ) => {\n\tconst [ x, setX ] = useState( props.variables[ 0 ] );\n\tconst [ y, setY ] = useState( props.variables[ 1 ] );\n\tconst [ overlayPoints, setOverlayPoints ] = useState( false );\n\tconst [ regressionMethod, setRegressionMethod ] = useState( [] );\n\tconst [ smoothSpan, setSmoothSpan ] = useState( 0.66 );\n\n\tconst generateContourChart = () => {\n\t\tconst { data, onCreated, onSelected, logAction, session, t } = props;\n\t\tconst plotId = randomstring( 6 );\n\t\tconst action = {\n\t\t\tx, y, overlayPoints, regressionMethod, smoothSpan, plotId\n\t\t};\n\t\tconst output = <ContourChart\n\t\t\tid={plotId}\n\t\t\taction={action}\n\t\t\tdata={data}\n\t\t\tonShare={() => {\n\t\t\t\tsession.addNotification({\n\t\t\t\t\ttitle: t('plot-shared'),\n\t\t\t\t\tmessage: t('plot-shared-message'),\n\t\t\t\t\tlevel: 'success',\n\t\t\t\t\tposition: 'tr'\n\t\t\t\t});\n\t\t\t\tlogAction( DATA_EXPLORER_SHARE_CONTOURPLOT, action );\n\t\t\t}}\n\t\t\tx={x}\n\t\t\ty={y}\n\t\t\toverlayPoints={overlayPoints}\n\t\t\tregressionMethod={regressionMethod}\n\t\t\tsmoothSpan={smoothSpan}\n\t\t\tonSelected={onSelected}\n\t\t/>;\n\t\tlogAction( DATA_EXPLORER_CONTOURPLOT, action );\n\t\tonCreated( output );\n\t};\n\tconst { variables, t } = props;\n\treturn (\n\t\t<Card>\n\t\t\t<Card.Header as=\"h4\" >\n\t\t\t\t{t('Contour Chart')}\n\t\t\t\t<QuestionButton title={t('Contour Chart')} content={t('Contour Chart-description')} />\n\t\t\t</Card.Header>\n\t\t\t<Card.Body>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\tlegend={t('x-axis-variable')}\n\t\t\t\t\t\t\tdefaultValue={x}\n\t\t\t\t\t\t\toptions={variables}\n\t\t\t\t\t\t\tonChange={setX}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\tlegend={t('y-axis-variable')}\n\t\t\t\t\t\t\tdefaultValue={y}\n\t\t\t\t\t\t\toptions={variables}\n\t\t\t\t\t\t\tmenuPlacement=\"top\"\n\t\t\t\t\t\t\tonChange={setY}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<CheckboxInput\n\t\t\t\t\t\t\tlegend={t('overlay-observations')}\n\t\t\t\t\t\t\tdefaultValue={overlayPoints}\n\t\t\t\t\t\t\tonChange={() => {\n\t\t\t\t\t\t\t\tsetOverlayPoints( !overlayPoints );\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\tlegend={t('overlay-regression-line')}\n\t\t\t\t\t\t\tmulti={true}\n\t\t\t\t\t\t\toptions={[ 'linear', 'smooth' ]}\n\t\t\t\t\t\t\tonChange={( value ) => {\n\t\t\t\t\t\t\t\tif ( !isArray( value ) ) {\n\t\t\t\t\t\t\t\t\tvalue = [ value ];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tsetRegressionMethod( value );\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<SliderInput\n\t\t\t\t\t\t\tlegend={t('smoothing-parameter')}\n\t\t\t\t\t\t\tmin={0.01}\n\t\t\t\t\t\t\tmax={1}\n\t\t\t\t\t\t\tstep={0.01}\n\t\t\t\t\t\t\tdefaultValue={smoothSpan}\n\t\t\t\t\t\t\tdisabled={!contains( regressionMethod, 'smooth' )}\n\t\t\t\t\t\t\tonChange={setSmoothSpan}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Button variant=\"primary\" block onClick={generateContourChart}>\n\t\t\t\t\t{t('generate')}\n\t\t\t\t</Button>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\n\n// PROPERTIES //\n\nContourChartMenu.defaultProps = {\n\tlogAction() {},\n\tonSelected() {}\n};\n\nContourChartMenu.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\tlogAction: PropTypes.func,\n\tsession: PropTypes.object.isRequired,\n\tvariables: PropTypes.array.isRequired,\n\tonCreated: PropTypes.func.isRequired,\n\tonSelected: PropTypes.func\n};\n\n\n// EXPORTS //\n\nexport default ContourChartMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={['hover', 'focus']} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport noop from '@stdlib/utils/noop';\nimport Input from '@isle-project/components/input/base';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport './checkbox.css';\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nclass CheckboxInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.state = {\n\t\t\tvalue: props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue,\n\t\t\tbind: props.bind,\n\t\t\tdefaultValue: props.defaultValue\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tlet newState = {};\n\t\tif ( nextProps.defaultValue !== prevState.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t\tnewState.defaultValue = nextProps.defaultValue;\n\t\t}\n\t\telse if ( nextProps.bind !== prevState.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t\tnewState.bind = nextProps.bind;\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif ( this.props.bind ) {\n\t\t\tlet globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateValue = ( newValue ) => {\n\t\tthis.setState({\n\t\t\tvalue: newValue\n\t\t}, () => {\n\t\t\tif ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\thandleChange = ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tthis.props.onChange( newValue );\n\t\tthis.updateValue( newValue );\n\t}\n\n\thandleSpanChange = ( event ) => {\n\t\tconst newValue = this.props.value !== null ? !this.props.value : !this.state.value;\n\t\tthis.props.onChange( newValue );\n\t\tthis.updateValue( newValue );\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tif ( this.props.value !== null ) {\n\t\t\tvalue = this.props.value;\n\t\t}\n\t\tconst input = <input\n\t\t\tclassName=\"checkbox-input\"\n\t\t\ttype=\"checkbox\"\n\t\t\tchecked={value}\n\t\t\tvalue=\"checkbox\"\n\t\t\tonChange={this.handleChange}\n\t\t\tdisabled={this.props.disabled}\n\t\t\taria-label={this.props.tooltip}\n\t\t></input>;\n\t\tif ( this.props.inline === true ) {\n\t\t\treturn (\n\t\t\t\t<Tooltip tooltip={this.props.tooltip} placement={this.props.tooltipPlacement} >\n\t\t\t\t\t<span style={{ marginLeft: '8px', ...this.props.style }}>\n\t\t\t\t\t\t{input}\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tcolor: this.props.disabled ? 'darkgray' : null\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonClick={this.handleSpanChange} onKeyPress={this.handleSpanChange}\n\t\t\t\t\t\t>{this.props.legend}</span>\n\t\t\t\t\t</span>\n\t\t\t\t</Tooltip>\n\t\t\t);\n\t\t}\n\t\tconst onSpanChange = this.props.disabled ? noop : this.handleSpanChange;\n\t\treturn (\n\t\t\t<Tooltip tooltip={this.props.tooltip} placement={this.props.tooltipPlacement} >\n\t\t\t\t<div className=\"input checkbox-input-div\" style={this.props.style}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: this.props.disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t\t>{this.props.legend}</span>\n\t\t\t\t</div>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\nCheckboxInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport Badge from 'react-bootstrap/Badge';\nimport Input from '@isle-project/components/input/base';\nimport Tooltip from '@isle-project/components/tooltip';\nimport roundn from '@stdlib/math/base/special/roundn';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport PINF from '@stdlib/constants/math/float64-pinf';\nimport NINF from '@stdlib/constants/math/float64-ninf';\nimport SessionContext from '@isle-project/session/context.js';\nimport './slider.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:slider-input' );\n\n\n// FUNCTIONS //\n\nfunction createTooltip( props ) {\n\tlet tooltip = `Enter a${ props.step === 1 ? 'n integer' : ' number'} `;\n\tif ( props.max !== PINF && props.min !== NINF ) {\n\t\ttooltip += `between ${props.min} and ${props.max}:`;\n\t} else if ( props.min !== NINF ) {\n\t\ttooltip += `larger or equal to ${props.min}:`;\n\t} else if ( props.max !== PINF ) {\n\t\ttooltip += `smaller or equal to ${props.max}:`;\n\t} else {\n\t\ttooltip += ':';\n\t}\n\treturn tooltip;\n}\n\n\n// MAIN //\n\n/**\n* A slider input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} legend - caption of the input\n* @property {number} defaultValue - The starting value of the slider\n* @property {number} min - The minimum value of the slider\n* @property {number} max - The maximum value of the slider\n* @property {(number|string)} step - step size of the slider\n* @property {boolean} inline - controls whether to place the slider inline with text or outside\n* @property {number} precision - rounding of the input. The value will be rounded to have no more significant digits than the precision. For example, if one wishes to only use integers, a precision of 10 would be used, while if one wishes to round to the hundreds place, one would use a precision of 0.001\n* @property {boolean} disabled - controls whether the slider input is active or not. If set to true, the slider will be present on the screen, albeit grayed-out\n* @property {string} minLabel - label to be displayed to the left of slider instead of minimum value\n* @property {string} maxLabel - label to be displayed to the right of slider instead of maximum value\n* @property {boolean} hideTooltip - controls whether to hide tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} numberInputStyle - CSS inline styles for number input component\n* @property {Object} rangeInputStyle - CSS inline style for range input component\n* @property {Function} onChange - callback invoked with the new value when the slider value changes\n*/\nclass SliderInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.state = {\n\t\t\ttooltip: createTooltip( props ),\n\t\t\tvalue: props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue,\n\t\t\tprevProps: props\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tlet newState = {};\n\t\tconst { prevProps } = prevState;\n\t\tif ( nextProps.defaultValue !== prevProps.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t} else if ( nextProps.bind !== prevProps.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t}\n\t\tif ( nextProps.min !== prevProps.min || nextProps.max !== prevProps.max ) {\n\t\t\tnewState.tooltip = createTooltip( nextProps );\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\tnewState.prevProps = nextProps;\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif ( this.props.bind ) {\n\t\t\tlet globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tfinishChange = ( event ) => {\n\t\tdebug( 'Finalizing change...' );\n\t\tconst { max, min, step } = this.props;\n\t\tlet value = event.target.value;\n\t\tif ( value !== '' ) {\n\t\t\tvalue = parseFloat( value );\n\t\t}\n\t\tif ( value > max ) {\n\t\t\tvalue = max;\n\t\t}\n\t\telse if ( value < min ) {\n\t\t\tvalue = min;\n\t\t}\n\t\telse if ( step === 1.0 && value !== '' ) {\n\t\t\tvalue = value - value % this.props.step;\n\t\t}\n\t\tdebug( `Setting state value to: ${value}...` );\n\t\tif ( value !== this.state.value ) {\n\t\t\tthis.setState({\n\t\t\t\tvalue\n\t\t\t}, () => {\n\t\t\t\tthis.props.onChange( value );\n\t\t\t\tif ( this.props.bind ) {\n\t\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\thandleInputChange = ( event ) => {\n\t\tconst valid = event.target.validity.valid;\n\t\tlet value = event.target.value;\n\t\tdebug( `Input value changed to ${value}` );\n\t\tthis.setState({\n\t\t\tvalue\n\t\t}, () => {\n\t\t\tif ( valid && value !== '' ) {\n\t\t\t\tvalue = parseFloat( value );\n\t\t\t\tthis.props.onChange( value );\n\t\t\t\tif ( this.props.bind ) {\n\t\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tconst { legend, disabled, inline, min, max, precision, step, minLabel, maxLabel } = this.props;\n\t\tif ( value !== '' ) {\n\t\t\troundn( value, ( -1.0 )*precision );\n\t\t}\n\t\tconst rangeInput = <input\n\t\t\ttype=\"range\"\n\t\t\tclassName=\"slider-range-input\"\n\t\t\tmin={min}\n\t\t\tmax={max}\n\t\t\tstep={step}\n\t\t\tvalue={value}\n\t\t\tdisabled={disabled}\n\t\t\tonChange={this.handleInputChange}\n\t\t\tstyle={{\n\t\t\t\twidth: '160px',\n\t\t\t\tfloat: inline ? 'none' : 'left',\n\t\t\t\tdisplay: inline ? 'inline' : 'block',\n\t\t\t\t...this.props.rangeInputStyle\n\t\t\t}}\n\t\t/>;\n\t\tconst numberInput = <input\n\t\t\ttype=\"number\"\n\t\t\tname=\"input\"\n\t\t\tclassName=\"slider-number-input\"\n\t\t\tdisabled={disabled}\n\t\t\tmin={min}\n\t\t\tmax={max}\n\t\t\tstep={step}\n\t\t\tvalue={value}\n\t\t\tonChange={this.handleInputChange}\n\t\t\tonBlur={this.finishChange}\n\t\t\tstyle={{\n\t\t\t\tfloat: inline ? 'none' : 'right',\n\t\t\t\tmarginTop: legend && !inline ? -22 : 0,\n\t\t\t\t...this.props.numberInputStyle\n\t\t\t}}\n\t\t\tautoComplete=\"off\"\n\t\t/>;\n\n\t\tif ( inline ) {\n\t\t\treturn (\n\t\t\t\t<span className=\"input\" style={{\n\t\t\t\t\tpadding: '5px',\n\t\t\t\t\topacity: disabled ? 0.2 : 1.0,\n\t\t\t\t\t...this.props.style\n\t\t\t\t}}>\n\t\t\t\t\t{ legend ?\n\t\t\t\t\t\t<label>{legend}:</label> :\n\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t\t<span className=\"slider-range-wrapper\" >\n\t\t\t\t\t\t<Badge variant=\"secondary\" >{minLabel || min}</Badge>\n\t\t\t\t\t\t{rangeInput}\n\t\t\t\t\t\t<Badge variant=\"secondary\" >{maxLabel || max}</Badge>\n\t\t\t\t\t</span>\n\t\t\t\t\t{numberInput}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Tooltip\n\t\t\t\tid=\"sliderTooltip\"\n\t\t\t\tplacement=\"top\"\n\t\t\t\tshow={!this.props.hideTooltip}\n\t\t\t\ttooltip={disabled ? 'The slider input is disabled right now.' : this.state.tooltip}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"slider-outer-div input\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\topacity: disabled ? 0.2 : 1.0,\n\t\t\t\t\t\t...this.props.style\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{ legend ?\n\t\t\t\t\t\t<label>{legend}:</label> :\n\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t\t<br />\n\t\t\t\t\t<span className=\"slider-range-wrapper\" >\n\t\t\t\t\t\t<Badge variant=\"secondary\" style={{ float: 'left' }} >{minLabel || min}</Badge>\n\t\t\t\t\t\t{rangeInput}\n\t\t\t\t\t\t<Badge variant=\"secondary\" style={{ float: 'left' }} >{maxLabel || max}</Badge>\n\t\t\t\t\t</span>\n\t\t\t\t\t{numberInput}\n\t\t\t\t\t<br />\n\t\t\t\t</div>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nSliderInput.defaultProps = {\n\tinline: false,\n\tlegend: null,\n\tmin: 0,\n\tminLabel: null,\n\tmax: 100,\n\tmaxLabel: null,\n\tstep: 1,\n\tdefaultValue: 10,\n\tonChange() {},\n\tprecision: 10,\n\tdisabled: false,\n\thideTooltip: false,\n\tstyle: {},\n\tnumberInputStyle: {},\n\trangeInputStyle: {}\n};\n\nSliderInput.propTypes = {\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmaxLabel: PropTypes.string,\n\tmin: PropTypes.number,\n\tminLabel: PropTypes.string,\n\tonChange: PropTypes.func,\n\tprecision: PropTypes.number,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\thideTooltip: PropTypes.bool,\n\tstyle: PropTypes.object,\n\tnumberInputStyle: PropTypes.object,\n\trangeInputStyle: PropTypes.object\n};\n\nSliderInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default SliderInput;\n","// MODULES //\n\nimport SliderInput from './main.js';\n\n\n// EXPORTS //\n\nexport default SliderInput;\n"],"sourceRoot":""}