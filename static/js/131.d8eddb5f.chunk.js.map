{"version":3,"sources":["../node_modules/@isle-project/components/data-explorer/menu/barchart.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/checkbox/index.js","../node_modules/@isle-project/components/input/checkbox/main.js"],"names":["STATS","MODES","Option","props","data","label","style","fontVariant","description","ORDER_OPTIONS","value","BarchartMenu","groupingVariables","variables","defaultValue","quantitative","t","useState","variable","setVariable","yvar","setYVar","direction","setDirection","summary","setSummary","group","setGroup","horizontal","setHorizontal","mode","setMode","relative","setRelative","stackBars","setStackBars","totalPercent","setTotalPercent","xOrder","setXOrder","hideRelativeFrequencies","Header","as","title","content","Body","legend","options","onChange","clearable","menuPlacement","controlId","components","isClearable","elem","styles","selectStyles","display","disabled","opacity","variant","block","onClick","plotId","randomstring","action","output","onShare","session","addNotification","message","level","position","logAction","DATA_EXPLORER_SHARE_BARCHART","id","DATA_EXPLORER_BARCHART","onCreated","defaultProps","onSelected","QuestionButton","popover","trigger","placement","rootClose","overlay","size","className","CheckboxInput","context","newValue","setState","bind","global","lesson","event","target","checked","updateValue","state","this","globalVal","input","type","handleChange","aria-label","tooltip","inline","tooltipPlacement","marginLeft","role","tabIndex","color","handleSpanChange","onKeyPress","onSpanChange","noop","nextProps","prevState","newState","isEmptyObject","Input","propTypes","PropTypes","string","bool","func","oneOfType","node","oneOf","object","contextType","SessionContext"],"mappings":"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","file":"static/js/131.d8eddb5f.chunk.js","sourcesContent":["// MODULES //\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Select, { components } from 'react-select';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport SelectInput from '@isle-project/components/input/select';\nimport selectStyles from '@isle-project/components/input/select/styles';\nimport randomstring from '@isle-project/utils/randomstring/alphanumeric';\nimport BarChart from '@isle-project/components/plots/barchart';\nimport { DATA_EXPLORER_SHARE_BARCHART, DATA_EXPLORER_BARCHART } from '@isle-project/constants/actions.js';\nimport QuestionButton from './../question_button.js';\n\n\n// VARIABLES //\n\nconst STATS = [\n\t'Mean',\n\t'Median',\n\t'Min',\n\t'Max',\n\t'Sum'\n];\nconst MODES = [\n\t'Counts of distinct values',\n\t'Function evaluated for a variable'\n];\nconst Option = props => (\n\t<components.Option {...props} >\n\t\t{props.data.label}\n\t\t<br />\n\t\t<span style={{ fontVariant: 'small-caps' }} >{props.data.description}</span>\n\t</components.Option>\n);\nconst ORDER_OPTIONS = [\n\t{ label: 'Total', value: 'total', description: 'by total count of each category' },\n\t{ label: 'Alphabetically', value: 'category', description: 'by category name' },\n\t{ label: 'Min', value: 'min', description: 'by minimum count inside each category' },\n\t{ label: 'Max', value: 'max', description: 'by maximum count inside each category' },\n\t{ label: 'Mean', value: 'mean', description: 'by mean count inside each category' },\n\t{ label: 'Median', value: 'median', description: 'by median count inside each category' }\n];\n\n\n// MAIN //\n\nconst BarchartMenu = ( props ) => {\n\tconst { groupingVariables, variables, defaultValue, quantitative, t } = props;\n\tconst [ variable, setVariable ] = useState( defaultValue || variables[ 0 ] );\n\tconst [ yvar, setYVar ] = useState( quantitative[ 0 ] );\n\tconst [ direction, setDirection ] = useState( 'ascending' );\n\tconst [ summary, setSummary ] = useState( STATS[ 0 ] );\n\tconst [ group, setGroup ] = useState( null );\n\tconst [ horizontal, setHorizontal ] = useState( false );\n\tconst [ mode, setMode ] = useState( MODES[ 0 ] );\n\tconst [ relative, setRelative ] = useState( false );\n\tconst [ stackBars, setStackBars ] = useState( false );\n\tconst [ totalPercent, setTotalPercent ] = useState( false );\n\tconst [ xOrder, setXOrder ] = useState( null );\n\n\tconst generateBarchart = () => {\n\t\tconst plotId = randomstring( 6 );\n\t\tconst action = {\n\t\t\tvariable, group, relative, totalPercent, xOrder, direction, stackBars, plotId\n\t\t};\n\t\tif ( mode === MODES[ 1 ] ) {\n\t\t\taction.summary = summary;\n\t\t\taction.yvar = yvar;\n\t\t}\n\t\tconst onShare = () => {\n\t\t\tprops.session.addNotification({\n\t\t\t\ttitle: props.t('plot-shared'),\n\t\t\t\tmessage: props.t('plot-shared-message'),\n\t\t\t\tlevel: 'success',\n\t\t\t\tposition: 'tr'\n\t\t\t});\n\t\t\tprops.logAction( DATA_EXPLORER_SHARE_BARCHART, action );\n\t\t};\n\t\tlet output;\n\t\tif ( mode === MODES[ 1 ] ) {\n\t\t\toutput = <BarChart\n\t\t\t\t{...props}\n\t\t\t\tvariable={variable} group={group}\n\t\t\t\thorizontal={horizontal}\n\t\t\t\trelative={relative} totalPercent={totalPercent} xOrder={xOrder}\n\t\t\t\tdirection={direction} summary={summary} yvar={yvar} stackBars={stackBars}\n\t\t\t\tid={plotId}\n\t\t\t\taction={action}\n\t\t\t\tonShare={onShare}\n\t\t\t/>;\n\t\t} else {\n\t\t\toutput = <BarChart\n\t\t\t\t{...props}\n\t\t\t\tvariable={variable} group={group}\n\t\t\t\thorizontal={horizontal}\n\t\t\t\trelative={relative} totalPercent={totalPercent} xOrder={xOrder}\n\t\t\t\tdirection={direction} stackBars={stackBars}\n\t\t\t\tid={plotId}\n\t\t\t\taction={action}\n\t\t\t\tonShare={onShare}\n\t\t\t/>;\n\t\t}\n\t\tprops.logAction( DATA_EXPLORER_BARCHART, action );\n\t\tprops.onCreated( output );\n\t};\n\tconst hideRelativeFrequencies = (\n\t\t!group || // not used without grouping\n\t\ttotalPercent || // overall percent\n\t\tmode === MODES[ 1 ] // when evaluating a function\n\t);\n\treturn (\n\t\t<Card>\n\t\t\t<Card.Header as=\"h4\">\n\t\t\t\t{t('Bar Chart')}\n\t\t\t\t<QuestionButton title={t('Bar Chart')} content={t('Bar Chart-description')} />\n\t\t\t</Card.Header>\n\t\t\t<Card.Body>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('bars-represent')}\n\t\t\t\t\tdefaultValue={mode}\n\t\t\t\t\toptions={MODES}\n\t\t\t\t\tonChange={setMode}\n\t\t\t\t/>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('variable')}\n\t\t\t\t\tdefaultValue={variable}\n\t\t\t\t\toptions={variables}\n\t\t\t\t\tonChange={setVariable}\n\t\t\t\t/>\n\t\t\t\t{ mode === MODES[ 1 ] ?\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\t\tlegend={t('y-axis')}\n\t\t\t\t\t\t\t\tdefaultValue={yvar}\n\t\t\t\t\t\t\t\toptions={props.quantitative}\n\t\t\t\t\t\t\t\tonChange={setYVar}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\t\tlegend={t('summary-function')}\n\t\t\t\t\t\t\t\tdefaultValue={summary}\n\t\t\t\t\t\t\t\toptions={STATS}\n\t\t\t\t\t\t\t\tonChange={setSummary}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row> : null }\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('group-by')}\n\t\t\t\t\tclearable={true}\n\t\t\t\t\tdefaultValue={group}\n\t\t\t\t\toptions={groupingVariables}\n\t\t\t\t\tmenuPlacement=\"top\"\n\t\t\t\t\tonChange={setGroup}\n\t\t\t\t/>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<FormGroup controlId=\"barchart-order-select\">\n\t\t\t\t\t\t\t<FormLabel>{group ? 'Order outer groups' : 'Order x-axis'}:</FormLabel>\n\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\tdefaultValue={xOrder}\n\t\t\t\t\t\t\t\toptions={ORDER_OPTIONS}\n\t\t\t\t\t\t\t\tcomponents={{ Option }}\n\t\t\t\t\t\t\t\tisClearable={true}\n\t\t\t\t\t\t\t\tmenuPlacement=\"top\"\n\t\t\t\t\t\t\t\tonChange={( elem ) => {\n\t\t\t\t\t\t\t\t\tsetXOrder( elem ? elem.value : null );\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tstyles={selectStyles}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\tlegend={t('order-direction')}\n\t\t\t\t\t\t\tdefaultValue={direction}\n\t\t\t\t\t\t\toptions={[\n\t\t\t\t\t\t\t\t'ascending',\n\t\t\t\t\t\t\t\t'descending'\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\tmenuPlacement=\"top\"\n\t\t\t\t\t\t\tonChange={setDirection}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tdisplay: xOrder ? 'inherit' : 'none'\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t{ mode === MODES[ 0 ] ? <CheckboxInput\n\t\t\t\t\t\t\tlegend={t('total-percentages')}\n\t\t\t\t\t\t\tdefaultValue={totalPercent}\n\t\t\t\t\t\t\tonChange={setTotalPercent}\n\t\t\t\t\t\t\tdisabled={relative}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\topacity: relative ? 0.2 : 1\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/> : null }\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<CheckboxInput\n\t\t\t\t\t\t\tlegend={t('flip-coordinates')}\n\t\t\t\t\t\t\tdefaultValue={horizontal}\n\t\t\t\t\t\t\tonChange={setHorizontal}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<CheckboxInput\n\t\t\t\t\t\t\tlegend={t('stack-bars')}\n\t\t\t\t\t\t\tdefaultValue={stackBars}\n\t\t\t\t\t\t\tonChange={setStackBars}\n\t\t\t\t\t\t\tdisabled={!group}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\topacity: group ? 1.0 : 0.2\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<CheckboxInput\n\t\t\t\t\t\t\tlegend=\"Relative frequencies inside each group\"\n\t\t\t\t\t\t\tdefaultValue={relative}\n\t\t\t\t\t\t\tdisabled={hideRelativeFrequencies}\n\t\t\t\t\t\t\tonChange={setRelative}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\topacity: hideRelativeFrequencies ? 0.2 : 1\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Button variant=\"primary\" block onClick={generateBarchart}>\n\t\t\t\t\t{t('generate')}\n\t\t\t\t</Button>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\n\n// PROPERTIES //\n\nBarchartMenu.defaultProps = {\n\tdefaultValue: null,\n\tgroupingVariables: null,\n\tlogAction() {},\n\tonCreated() {},\n\tonSelected() {}\n};\n\nBarchartMenu.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\tdefaultValue: PropTypes.string,\n\tgroupingVariables: PropTypes.array,\n\tlogAction: PropTypes.func,\n\tonCreated: PropTypes.func,\n\tonSelected: PropTypes.func,\n\tsession: PropTypes.object.isRequired,\n\tvariables: PropTypes.array.isRequired\n};\n\n\n// EXPORTS //\n\nexport default BarchartMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={['hover', 'focus']} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport noop from '@stdlib/utils/noop';\nimport Input from '@isle-project/components/input/base';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport './checkbox.css';\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nclass CheckboxInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.state = {\n\t\t\tvalue: props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue,\n\t\t\tbind: props.bind,\n\t\t\tdefaultValue: props.defaultValue\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tlet newState = {};\n\t\tif ( nextProps.defaultValue !== prevState.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t\tnewState.defaultValue = nextProps.defaultValue;\n\t\t}\n\t\telse if ( nextProps.bind !== prevState.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t\tnewState.bind = nextProps.bind;\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif ( this.props.bind ) {\n\t\t\tlet globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateValue = ( newValue ) => {\n\t\tthis.setState({\n\t\t\tvalue: newValue\n\t\t}, () => {\n\t\t\tif ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\thandleChange = ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tthis.props.onChange( newValue );\n\t\tthis.updateValue( newValue );\n\t}\n\n\thandleSpanChange = ( event ) => {\n\t\tconst newValue = this.props.value !== null ? !this.props.value : !this.state.value;\n\t\tthis.props.onChange( newValue );\n\t\tthis.updateValue( newValue );\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tif ( this.props.value !== null ) {\n\t\t\tvalue = this.props.value;\n\t\t}\n\t\tconst input = <input\n\t\t\tclassName=\"checkbox-input\"\n\t\t\ttype=\"checkbox\"\n\t\t\tchecked={value}\n\t\t\tvalue=\"checkbox\"\n\t\t\tonChange={this.handleChange}\n\t\t\tdisabled={this.props.disabled}\n\t\t\taria-label={this.props.tooltip}\n\t\t></input>;\n\t\tif ( this.props.inline === true ) {\n\t\t\treturn (\n\t\t\t\t<Tooltip tooltip={this.props.tooltip} placement={this.props.tooltipPlacement} >\n\t\t\t\t\t<span style={{ marginLeft: '8px', ...this.props.style }}>\n\t\t\t\t\t\t{input}\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tcolor: this.props.disabled ? 'darkgray' : null\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonClick={this.handleSpanChange} onKeyPress={this.handleSpanChange}\n\t\t\t\t\t\t>{this.props.legend}</span>\n\t\t\t\t\t</span>\n\t\t\t\t</Tooltip>\n\t\t\t);\n\t\t}\n\t\tconst onSpanChange = this.props.disabled ? noop : this.handleSpanChange;\n\t\treturn (\n\t\t\t<Tooltip tooltip={this.props.tooltip} placement={this.props.tooltipPlacement} >\n\t\t\t\t<div className=\"input checkbox-input-div\" style={this.props.style}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: this.props.disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t\t>{this.props.legend}</span>\n\t\t\t\t</div>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\nCheckboxInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n"],"sourceRoot":""}