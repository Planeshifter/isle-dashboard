{"version":3,"sources":["../node_modules/@isle-project/components/chat-button/main.js"],"names":["debug","logger","addResources","ChatButton","props","setState","showAnimation","event","opened","state","onClick","session","context","for","joinChat","name","anonymousSubmissions","leaveChat","nMessages","nMembers","this","unsubscribe","subscribe","type","value","SELF_HAS_JOINED_CHAT","RECEIVED_CHAT_HISTORY","CHAT_STATISTICS","newState","setTimeout","hideAnimation","getChat","SELF_HAS_LEFT_CHAT","REMOVED_CHAT","forceUpdate","label","variant","buttonLabel","t","buttonVariant","tooltip","button","className","size","handleClick","style","aria-label","pointerEvents","marginLeft","fontSize","animation","id","showTooltip","placement","tooltipPlacement","user","Component","defaultProps","contextType","SessionContext","withTranslation"],"mappings":"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","file":"static/js/ChatButton.adc03ea6.chunk.js","sourcesContent":["// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport { withTranslation } from 'react-i18next';\nimport Badge from 'react-bootstrap/Badge';\nimport Button from 'react-bootstrap/Button';\nimport Tooltip from '@isle-project/components/tooltip';\nimport Gate from '@isle-project/components/gate';\nimport SessionContext from '@isle-project/session/context.js';\nimport { RECEIVED_CHAT_HISTORY, CHAT_STATISTICS, REMOVED_CHAT,\n\tSELF_HAS_JOINED_CHAT, SELF_HAS_LEFT_CHAT } from '@isle-project/constants/events.js';\nimport { addResources } from '@isle-project/locales';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:chat-button' );\naddResources( 'ChatButton' );\n\n\n// MAIN //\n\n/**\n* A button for joining and leaving chat rooms.\n*\n* @property {string} for - chat room identifier\n* @property {boolean} anonymousSubmissions - controls whether a button to submit messages anonymously should be displayed\n* @property {(string|node)} buttonLabel - custom button label overriding the default one(s)\n* @property {string} size - button size\n* @property {string} buttonVariant - button variant\n* @property {boolean} showTooltip - controls whether to show tooltip\n* @property {(string|node)} tooltip - tooltip content\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {string} className - class name\n* @property {Object} style - CSS inline styles\n* @property {Function} onClick - event handler invoked when join/leave button is clicked\n*/\nclass ChatButton extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tthis.state = {\n\t\t\topened: false,\n\t\t\tnMessages: 0,\n\t\t\tnMembers: 0\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst session = this.context;\n\t\tthis.unsubscribe = session.subscribe( ( type, value ) => {\n\t\t\tif (\n\t\t\t\t( type === SELF_HAS_JOINED_CHAT || type === RECEIVED_CHAT_HISTORY ) &&\n\t\t\t\t( value && value.name === this.props.for )\n\t\t\t) {\n\t\t\t\tthis.setState({\n\t\t\t\t\topened: true\n\t\t\t\t});\n\t\t\t}\n\t\t\telse if ( type === CHAT_STATISTICS && value.name === this.props.for ) {\n\t\t\t\tconst newState = {\n\t\t\t\t\tnMessages: value.nMessages,\n\t\t\t\t\tnMembers: value.nMembers\n\t\t\t\t};\n\t\t\t\tif ( value.nMessages > this.state.nMessages ) {\n\t\t\t\t\tnewState.showAnimation = true;\n\t\t\t\t}\n\t\t\t\tthis.setState( newState );\n\t\t\t\tsetTimeout( this.hideAnimation, 4000 );\n\t\t\t}\n\t\t\telse if ( value === this.props.for ) {\n\t\t\t\tconst chat = session.getChat( this.props.for );\n\t\t\t\tif ( !chat || type === SELF_HAS_LEFT_CHAT ) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\topened: false\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse if ( type === REMOVED_CHAT ) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\topened: false\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.unsubscribe();\n\t}\n\n\thideAnimation = () => {\n\t\tthis.setState({\n\t\t\tshowAnimation: false\n\t\t});\n\t}\n\n\thandleClick = ( event ) => {\n\t\tdebug( 'Handle click to join chat...' );\n\t\tconst opened = !this.state.opened;\n\t\tthis.props.onClick( event, opened );\n\t\tthis.setState({\n\t\t\topened\n\t\t}, () => {\n\t\t\tconst session = this.context;\n\t\t\tif ( opened ) {\n\t\t\t\tdebug( `Should join chat for component with id '${this.props.for}'...` );\n\t\t\t\tsession.joinChat({ name: this.props.for, anonymousSubmissions: this.props.anonymousSubmissions });\n\t\t\t} else {\n\t\t\t\tdebug( `Should leave chat for component with id '${this.props.for}'...` );\n\t\t\t\tsession.leaveChat( this.props.for );\n\t\t\t}\n\t\t});\n\t}\n\n\trender() {\n\t\tconst nMessages = this.state.nMessages;\n\t\tlet label;\n\t\tlet variant;\n\t\tif ( this.props.buttonLabel ) {\n\t\t\tlabel = this.props.buttonLabel;\n\t\t} else {\n\t\t\tlabel = this.state.opened ? this.props.t('leave-chat') : this.props.t('join-chat');\n\t\t}\n\t\tif ( this.props.buttonVariant ) {\n\t\t\tvariant = this.props.buttonVariant;\n\t\t} else {\n\t\t\tvariant = this.state.nMembers > 0 ? 'success' : 'secondary';\n\t\t}\n\t\tlet button = <Button\n\t\t\tclassName={this.props.className}\n\t\t\tvariant={variant}\n\t\t\tsize={this.props.size}\n\t\t\tonClick={this.handleClick}\n\t\t\tstyle={this.props.style}\n\t\t\taria-label={this.props.t('toggle-chat')}\n\t\t>\n\t\t\t<span style={{ pointerEvents: 'none' }} >\n\t\t\t\t{label}\n\t\t\t</span>\n\t\t\t{ nMessages ? <Badge\n\t\t\t\tvariant=\"dark\"\n\t\t\t\tstyle={{\n\t\t\t\t\tmarginLeft: '5px',\n\t\t\t\t\tfontSize: '10px',\n\t\t\t\t\tpointerEvents: 'none',\n\t\t\t\t\tanimation: this.state.showAnimation ? 'ping 0.7s 3' : 'none'\n\t\t\t\t}}\n\t\t\t>{nMessages}</Badge> : null }\n\t\t</Button>;\n\t\tlet tooltip;\n\t\tif ( this.props.tooltip ) {\n\t\t\ttooltip = this.props.tooltip;\n\t\t} else {\n\t\t\ttooltip = this.state.opened ?\n\t\t\t\tthis.props.t( 'leave-chat-id', { id: this.props.for }) :\n\t\t\t\tthis.props.t( 'join-chat-id', { id: this.props.for });\n\t\t}\n\t\tif ( this.props.showTooltip ) {\n\t\t\tbutton = <Tooltip\n\t\t\t\ttooltip={tooltip}\n\t\t\t\tplacement={this.props.tooltipPlacement}\n\t\t\t>\n\t\t\t\t{button}\n\t\t\t</Tooltip>;\n\t\t}\n\t\treturn (\n\t\t\t<Gate user >\n\t\t\t\t{button}\n\t\t\t</Gate>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nChatButton.propTypes = {\n\tfor: PropTypes.string.isRequired,\n\tanonymousSubmissions: PropTypes.bool,\n\tbuttonLabel: PropTypes.node,\n\tshowTooltip: PropTypes.bool,\n\ttooltip: PropTypes.string,\n\tsize: PropTypes.string,\n\tbuttonVariant: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tonClick: PropTypes.func,\n\tclassName: PropTypes.string,\n\tstyle: PropTypes.object\n};\n\nChatButton.defaultProps = {\n\tanonymousSubmissions: false,\n\tbuttonLabel: null,\n\tshowTooltip: true,\n\ttooltip: null,\n\tsize: 'sm',\n\tbuttonVariant: null,\n\ttooltipPlacement: 'top',\n\tonClick() {},\n\tclassName: '',\n\tstyle: {}\n};\n\nChatButton.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default withTranslation( 'ChatButton' )( ChatButton );\n"],"sourceRoot":""}