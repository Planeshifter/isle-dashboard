{"version":3,"sources":["../node_modules/@isle-project/components/image/index.js","../node_modules/@isle-project/components/internal/spinner/index.js","../node_modules/@isle-project/components/r/plot/main.js","../node_modules/@isle-project/components/r/utils/create-prepend-code/index.js"],"names":["Image","Loadable","Spinner","props","context","findDOMNode","getContext","start","Date","lines","cW","canvas","width","cH","height","activeSpinner","window","setInterval","num","rotation","parseInt","save","clearRect","translate","rotate","PI","i","beginPath","moveTo","lineTo","lineWidth","strokeStyle","stroke","restore","this","clearInterval","running","startSpinner","style","display","margin","Component","defaultProps","addResources","RPlot","error","img","body","onDone","setState","plotURL","plot","waiting","state","last","getPlot","code","session","fullCode","createPrependCode","libraries","prependCode","getRPlot","fileType","savePlot","draggableBar","draggable","className","onDragStart","ev","meta","omitBy","_","value","isNull","jsyaml","id","dataTransfer","setData","t","rest","minHeight","cursor","Fragment","src","title","contextType","SessionContext","withTranslation","libs","rshell","config","concat","ret","map","x","join","requireLibs","global","isArray"],"mappings":"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","file":"static/js/RPlot.707d98b0.chunk.js","sourcesContent":["// MODULES //\n\nimport Loadable from '@isle-project/components/internal/loadable';\n\n\n// MAIN //\n\nconst Image = Loadable( () => import( /* webpackChunkName: \"Image\" */ './main.js' ) );\n\n\n// EXPORTS //\n\nexport default Image;\n","// MODULES //\n\nimport React, { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport PI from '@stdlib/constants/math/float64-pi';\n\n\n// MAIN //\n\n/**\n* Spinner to visualize load times.\n*\n* @property {string} display - CSS display property\n* @property {number} height - height (in px)\n* @property {number} width - width (in px)\n* @property {number} lines - number of lines\n* @property {Object} style - CSS inline styles\n*/\nclass Spinner extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif ( this.activeSpinner && this.context.canvas ) {\n\t\t\tclearInterval( this.activeSpinner );\n\t\t\tthis.context.clearRect( 0, 0, this.context.canvas.width, this.context.canvas.height );\n\t\t}\n\t\tif ( this.props.running === true ) {\n\t\t\tthis.startSpinner();\n\t\t}\n\t}\n\n\tstartSpinner = () => {\n\t\tconst canvas = findDOMNode( this );\n\t\tconst context = canvas.getContext( '2d' );\n\t\tthis.context = context;\n\t\tconst start = new Date();\n\t\tconst lines = this.props.lines;\n\t\tconst cW = context.canvas.width;\n\t\tconst cH = context.canvas.height;\n\n\t\tconst draw = () => {\n\t\t\tconst num = ( ( new Date() - start ) / 1000 ) * lines;\n\t\t\tconst rotation = parseInt( num, 10 ) / lines;\n\t\t\tcontext.save();\n\t\t\tcontext.clearRect( 0, 0, cW, cH );\n\t\t\tcontext.translate( cW / 2.0, cH / 2.0 );\n\t\t\tcontext.rotate( PI * 2 * rotation );\n\t\t\tfor ( let i = 0; i < lines; i++ ) {\n\t\t\t\tcontext.beginPath();\n\t\t\t\tcontext.rotate( PI * 2.0 / lines );\n\t\t\t\tcontext.moveTo( cW / 10, 0 );\n\t\t\t\tcontext.lineTo( cW / 4, 0 );\n\t\t\t\tcontext.lineWidth = cW / 30;\n\t\t\t\tcontext.strokeStyle = 'rgba(0, 0, 0,' + i / lines + ')';\n\t\t\t\tcontext.stroke();\n\t\t\t}\n\t\t\tcontext.restore();\n\t\t};\n\t\tthis.activeSpinner = window.setInterval( draw, 50 );\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<canvas\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: this.props.width,\n\t\t\t\t\theight: this.props.height,\n\t\t\t\t\tdisplay: this.props.running ? this.props.display : 'none',\n\t\t\t\t\tmargin: 'auto',\n\t\t\t\t\t...this.props.style\n\t\t\t\t}}\n\t\t\t/>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nSpinner.defaultProps = {\n\tdisplay: 'block',\n\theight: 64,\n\tlines: 16,\n\tstyle: {},\n\twidth: 128\n};\n\nSpinner.propTypes = {\n\tdisplay: PropTypes.string,\n\theight: PropTypes.number,\n\tlines: PropTypes.number,\n\trunning: PropTypes.bool.isRequired,\n\tstyle: PropTypes.object,\n\twidth: PropTypes.number\n};\n\n\n// EXPORTS //\n\nexport default Spinner;\n","// MODULES //\n\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport jsyaml from 'js-yaml';\nimport omitBy from '@stdlib/utils/omit-by';\nimport isNull from '@stdlib/assert/is-null';\nimport createPrependCode from '@isle-project/components/r/utils/create-prepend-code';\nimport Spinner from '@isle-project/components/internal/spinner';\nimport Image from '@isle-project/components/image';\nimport SessionContext from '@isle-project/session/context.js';\nimport { addResources } from '@isle-project/locales';\nimport './plot.css';\n\n\n// VARIABLES //\n\naddResources( 'R' );\n\n\n// MAIN //\n\n/**\n* Component for rendering an R plot inside an ISLE lesson.\n*\n* @property {string} code - R code to generate the plot\n* @property {number} width - width of the plot (in px)\n* @property {number} height - height of the plot (in px)\n* @property {boolean} draggable - controls whether the plot should be draggable\n* @property {string} fileType - file type of the plot (`png` or `svg`)\n* @property {Array} libraries - R libraries that should be loaded automatically when the input `code` is executed\n* @property {(string|Array<string>)} prependCode - `string` or an `array` of R code snippets to be prepended to the code stored in `code` when evaluating\n* @property {Object} meta - plot meta-information\n* @property {string} className - class name\n* @property {Function} onDone - callback invoked with `err`, `img` and `body` arguments once a plot is created\n*/\nclass RPlot extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t\tthis.state = {\n\t\t\tplotURL: null,\n\t\t\tplot: null,\n\t\t\tlast: '',\n\t\t\twaiting: false\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.getPlot();\n\t}\n\n\tcomponentDidUpdate() {\n\t\tthis.getPlot();\n\t}\n\n\tsavePlot = ( error, img, body ) => {\n\t\tif ( error ) {\n\t\t\tthis.props.onDone( error );\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tplotURL: img,\n\t\t\t\tplot: body,\n\t\t\t\twaiting: false\n\t\t\t}, () => {\n\t\t\t\tthis.props.onDone( null, img, body );\n\t\t\t});\n\t\t}\n\t}\n\n\tgetPlot() {\n\t\tif ( this.props.code !== this.state.last ) {\n\t\t\tthis.setState({\n\t\t\t\twaiting: true,\n\t\t\t\tlast: this.props.code\n\t\t\t});\n\t\t\tconst session = this.context;\n\t\t\tconst prependCode = createPrependCode( this.props.libraries, this.props.prependCode, session );\n\t\t\tconst fullCode = prependCode + this.props.code;\n\t\t\tsession.getRPlot( fullCode, this.props.fileType, this.savePlot );\n\t\t}\n\t}\n\n\trender() {\n\t\tlet draggableBar = null;\n\t\tif ( this.props.draggable ) {\n\t\t\tdraggableBar = <div\n\t\t\t\tclassName=\"rplot-draggable-bar\"\n\t\t\t\tdraggable={true}\n\t\t\t\tonDragStart={( ev ) => {\n\t\t\t\t\tlet img;\n\t\t\t\t\tif ( !this.props.meta ) {\n\t\t\t\t\t\timg = `<img src=\"${this.state.plot}\" alt=\"R Plot\" style=\"display: block; margin: 0 auto;\" />`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet meta = this.props.meta;\n\t\t\t\t\t\tmeta = omitBy( meta, ( _, value ) => {\n\t\t\t\t\t\t\treturn isNull( value );\n\t\t\t\t\t\t});\n\t\t\t\t\t\tmeta = jsyaml.dump( meta );\n\t\t\t\t\t\timg = `<img src=\"${this.state.plot}\" style=\"display: block; margin: 0 auto;\" data-plot-id=\"${this.props.id}\" data-plot-meta=\"${meta}\"></img>`;\n\t\t\t\t\t}\n\t\t\t\t\tev.dataTransfer.setData( 'text/html', img );\n\t\t\t\t}}\n\t\t\t>{this.props.t('drag-plot')}</div>;\n\t\t}\n\t\tconst { className, ...rest } = this.props;\n\t\treturn (\n\t\t\t<div className={`rplot ${className}`} style={{ minHeight: 128, cursor: 'pointer' }}>\n\t\t\t\t<Spinner running={this.state.waiting} width={256} height={128} />\n\t\t\t\t{ this.state.waiting ?\n\t\t\t\t\t<span /> :\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t{draggableBar}\n\t\t\t\t\t\t<Image\n\t\t\t\t\t\t\tsrc={this.state.plotURL}\n\t\t\t\t\t\t\tbody={this.state.plot}\n\t\t\t\t\t\t\ttitle={this.props.t('r-plot')}\n\t\t\t\t\t\t\t{...rest}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Fragment>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nRPlot.propTypes = {\n\tcode: PropTypes.string,\n\twidth: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\theight: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\tdraggable: PropTypes.bool,\n\tfileType: PropTypes.string,\n\tlibraries: PropTypes.array,\n\tprependCode: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.array\n\t]),\n\tmeta: PropTypes.object,\n\tclassName: PropTypes.string,\n\tonDone: PropTypes.func\n};\n\nRPlot.defaultProps = {\n\tcode: '',\n\twidth: 600,\n\theight: 'auto',\n\tdraggable: false,\n\tfileType: 'svg',\n\tlibraries: [],\n\tprependCode: '',\n\tmeta: null,\n\tclassName: '',\n\tonDone() {}\n};\n\nRPlot.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default withTranslation( 'R' )( RPlot );\n","// MODULES //\n\nimport isArray from '@stdlib/assert/is-array';\n\n\n// FUNCTIONS //\n\nconst requireLibs = ( libs ) => {\n\treturn libs.map( x => 'library(' + x + ');' )\n\t\t.join( ' ' );\n};\n\n\n// MAIN //\n\n/**\n* Create code to be added in front of user-supplied R code.\n*\n* @param {Array} libs - array of libraries to requireLibs\n* @param {(Array|string)} prependCode - array of strings or single string of code to prepend\n* @param {Object} session - session object\n* @param {string} generated code\n*/\nfunction createPrependCode( libs, prependCode, session ) {\n\tconst { rshell } = session.config;\n\tif ( rshell && rshell.libraries ) {\n\t\tlibs = libs.concat( rshell.libraries );\n\t}\n\tlet ret = requireLibs( libs );\n\tif ( rshell && rshell.global ) {\n\t\tret += rshell.global + '\\n';\n\t}\n\tprependCode = isArray( prependCode ) ?\n\t\tprependCode.join( '\\n' ) :\n\t\tprependCode;\n\tprependCode += '\\n';\n\tret += prependCode;\n\treturn ret;\n}\n\n\n// EXPORTS //\n\nexport default createPrependCode;\n"],"sourceRoot":""}