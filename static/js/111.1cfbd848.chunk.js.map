{"version":3,"sources":["../node_modules/@isle-project/components/collapse/index.js","../node_modules/@isle-project/components/data-explorer/menu/decision_tree.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/number/create_tooltip.js","../node_modules/@isle-project/components/input/number/index.js","../node_modules/@isle-project/components/input/number/main.js","../node_modules/@isle-project/utils/subtract/index.js"],"names":["Collapse","Loadable","DecisionTreeMenu","props","categorical","quantitative","t","useState","y","setY","x","setX","type","setType","impurityMeasure","setImpurityMeasure","scoreThreshold","setScoreThreshold","maxTreeDepth","setMaxTreeDepth","minItemsCount","setMinItemsCount","style","fontSize","maxWidth","Header","as","title","content","Body","legend","options","defaultValue","onChange","newType","multi","unique","concat","closeMenuOnSelect","header","headerStyle","min","max","step","disabled","length","variant","block","onClick","output","data","onPredict","tree","counter","newData","copy","newCategorical","slice","yhat","predict","map","String","name","contains","push","yvalues","i","onGenerate","newQuantitative","subtract","logAction","DATA_EXPLORER_DECISION_TREE","onCreated","defaultProps","QuestionButton","popover","id","trigger","placement","rootClose","overlay","size","className","createTooltip","tooltip","PINF","NINF","CreateTooltip","NumberInput","debug","logger","uid","generateUID","context","event","valid","target","validity","value","setState","parseFloat","isnan","bind","global","lesson","vals","split","onBlur","state","session","prevProps","this","globalVal","isNumber","inline","input","padding","htmlFor","numbersOnly","width","paddingLeft","marginLeft","inputStyle","handleChange","finishChange","onKeyPress","onKeyDown","onKeyUp","autoComplete","description","marginBottom","marginTop","isString","tooltipPlacement","nextProps","prevState","newState","isEmptyObject","Input","propTypes","PropTypes","string","number","bool","oneOfType","node","func","object","oneOf","contextType","SessionContext","arr","isArr","isArrayLike","TypeError","len","out","Array","Error"],"mappings":"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","file":"static/js/111.1cfbd848.chunk.js","sourcesContent":["// MODULES //\n\nimport Loadable from '@isle-project/components/internal/loadable';\n\n\n// MAIN //\n\nconst Collapse = Loadable( () => import( /* webpackChunkName: \"Collapse\" */ './main.js' ) );\n\n\n// EXPORTS //\n\nexport default Collapse;\n","// MODULES //\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport unique from 'uniq';\nimport contains from '@stdlib/assert/contains';\nimport copy from '@stdlib/utils/copy';\nimport SelectInput from '@isle-project/components/input/select';\nimport NumberInput from '@isle-project/components/input/number';\nimport Collapse from '@isle-project/components/collapse';\nimport DecisionTree from '@isle-project/components/models/decision-tree';\nimport { DATA_EXPLORER_DECISION_TREE } from '@isle-project/constants/actions.js';\nimport subtract from '@isle-project/utils/subtract';\nimport QuestionButton from '../question_button.js';\n\n\n// MAIN //\n\nconst DecisionTreeMenu = ( props ) => {\n\tconst { categorical, quantitative, t } = props;\n\tconst [ y, setY ] = useState( 0 );\n\tconst [ x, setX ] = useState( 0 );\n\tconst [ type, setType ] = useState( 'Classification' );\n\tconst [ impurityMeasure, setImpurityMeasure ] = useState( 'gini' );\n\tconst [ scoreThreshold, setScoreThreshold ] = useState( 0.0075 );\n\tconst [ maxTreeDepth, setMaxTreeDepth ] = useState( 5 );\n\tconst [ minItemsCount, setMinItemsCount ] = useState( 50 );\n\n\tconst compute = () => {\n\t\tconst output = <DecisionTree\n\t\t\tx={x} y={y} type={type} impurityMeasure={impurityMeasure}\n\t\t\tdata={props.data} quantitative={props.quantitative}\n\t\t\tscoreThreshold={scoreThreshold} maxTreeDepth={maxTreeDepth}\n\t\t\tminItemsCount={minItemsCount}\n\t\t\tonPredict={( tree, counter ) => {\n\t\t\t\tconst newData = copy( props.data, 1 );\n\t\t\t\tif ( type === 'Classification' ) {\n\t\t\t\t\tconst newCategorical = props.categorical.slice();\n\t\t\t\t\tconst yhat = tree.predict( newData ).map( x => String( x ) );\n\t\t\t\t\tlet name = 'pred_tree' + counter;\n\t\t\t\t\tnewData[ name ] = yhat;\n\t\t\t\t\tif ( !contains( newCategorical, name ) ) {\n\t\t\t\t\t\tnewCategorical.push( name );\n\t\t\t\t\t}\n\t\t\t\t\tname = 'correct_tree' + counter;\n\t\t\t\t\tconst yvalues = props.data[ y ];\n\t\t\t\t\tnewData[ name ] = yhat.map( ( x, i ) => x === String( yvalues[ i ] ) ? 'Yes' : 'No' );\n\t\t\t\t\tif ( !contains( newCategorical, name ) ) {\n\t\t\t\t\t\tnewCategorical.push( name );\n\t\t\t\t\t}\n\t\t\t\t\tprops.onGenerate( props.quantitative, newCategorical, newData );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst newQuantitative = props.quantitative.slice();\n\t\t\t\t\tconst yhat = tree.predict( newData );\n\t\t\t\t\tlet name = 'pred_tree' + counter;\n\t\t\t\t\tnewData[ name ] = yhat;\n\t\t\t\t\tif ( !contains( newQuantitative, name ) ) {\n\t\t\t\t\t\tnewQuantitative.push( name );\n\t\t\t\t\t}\n\t\t\t\t\tname = 'resid_tree' + counter;\n\t\t\t\t\tnewData[ name ] = subtract( yhat, props.data[ y ] );\n\t\t\t\t\tif ( !contains( newQuantitative, name ) ) {\n\t\t\t\t\t\tnewQuantitative.push( name );\n\t\t\t\t\t}\n\t\t\t\t\tprops.onGenerate( newQuantitative, props.categorical, newData );\n\t\t\t\t}\n\t\t\t}}\n\t\t/>;\n\t\tprops.logAction( DATA_EXPLORER_DECISION_TREE, {\n\t\t\ty, x, type\n\t\t});\n\t\tprops.onCreated( output );\n\t};\n\treturn (\n\t\t<Card\n\t\t\tstyle={{ fontSize: '14px', maxWidth: 600 }}\n\t\t>\n\t\t\t<Card.Header as=\"h4\">\n\t\t\t\t{t('Decision Tree')}\n\t\t\t\t<QuestionButton title={t('Decision Tree')} content={t('Decision Tree-description')} />\n\t\t\t</Card.Header>\n\t\t\t<Card.Body>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('type')}\n\t\t\t\t\toptions={[ 'Classification', 'Regression' ]}\n\t\t\t\t\tdefaultValue={type}\n\t\t\t\t\tonChange={( newType ) => {\n\t\t\t\t\t\tif ( newType !== type ) {\n\t\t\t\t\t\t\tsetType( newType );\n\t\t\t\t\t\t\tsetY( type === 'Classification' ? categorical[ 0 ] : quantitative[ 0 ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('outcome-y')}\n\t\t\t\t\toptions={type === 'Classification' ? categorical : quantitative}\n\t\t\t\t\tdefaultValue={y}\n\t\t\t\t\tonChange={setY}\n\t\t\t\t/>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('predictors-x')} multi\n\t\t\t\t\toptions={unique( quantitative.concat( categorical ) )}\n\t\t\t\t\tdefaultValue={x || ''}\n\t\t\t\t\tonChange={setX}\n\t\t\t\t\tcloseMenuOnSelect={false}\n\t\t\t\t/>\n\t\t\t\t{ type === 'Classification' ? <SelectInput\n\t\t\t\t\tlegend={t('impurity-measure')}\n\t\t\t\t\tdefaultValue={impurityMeasure}\n\t\t\t\t\toptions={[ 'gini', 'entropy' ]}\n\t\t\t\t\tonChange={setImpurityMeasure}\n\t\t\t\t/> : null }\n\t\t\t\t<Collapse header={t('change-tree-features')} headerStyle={{ fontSize: '1rem' }} >\n\t\t\t\t\t<NumberInput legend=\"Score threshold for split\"\n\t\t\t\t\t\tmin={0} max={1} step={0.001}\n\t\t\t\t\t\tdefaultValue={scoreThreshold} onChange={setScoreThreshold}\n\t\t\t\t\t/>\n\t\t\t\t\t<NumberInput legend={t('maximum-tree-depth')}\n\t\t\t\t\t\tmin={1} max={50}\n\t\t\t\t\t\tdefaultValue={maxTreeDepth} onChange={setMaxTreeDepth}\n\t\t\t\t\t/>\n\t\t\t\t\t<NumberInput legend={t('min-obs-leafs')}\n\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\tdefaultValue={minItemsCount}\n\t\t\t\t\t\tonChange={setMinItemsCount}\n\t\t\t\t\t/>\n\t\t\t\t</Collapse>\n\t\t\t\t<Button disabled={!x || x.length === 0} variant=\"primary\" block onClick={compute} >\n\t\t\t\t\t{t('calculate')}\n\t\t\t\t</Button>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\n\n// PROPERTIES //\n\nDecisionTreeMenu.defaultProps = {\n\tlogAction() {}\n};\n\nDecisionTreeMenu.propTypes = {\n\tcategorical: PropTypes.array.isRequired,\n\tquantitative: PropTypes.array.isRequired,\n\tdata: PropTypes.object.isRequired,\n\tlogAction: PropTypes.func,\n\tonGenerate: PropTypes.func.isRequired,\n\tonCreated: PropTypes.func.isRequired\n};\n\n\n// EXPORTS //\n\nexport default DecisionTreeMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={['hover', 'focus']} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport PINF from '@stdlib/constants/math/float64-pinf';\nimport NINF from '@stdlib/constants/math/float64-ninf';\n\n\n// MAIN //\n\nfunction createTooltip( props ) {\n\tlet tooltip = `Enter a${ props.step === 1 ? 'n integer' : ' number'} `;\n\tif ( props.max !== PINF && props.min !== NINF ) {\n\t\ttooltip += `between ${props.min} and ${props.max}`;\n\t} else if ( props.min !== NINF ) {\n\t\ttooltip += `larger or equal to ${props.min}`;\n\t} else if ( props.max !== PINF ) {\n\t\ttooltip += `smaller or equal to ${props.max}`;\n\t}\n\treturn tooltip;\n}\n\n\n// EXPORTS //\n\nexport default createTooltip;\n","// MODULES //\n\nimport NumberInput from './main';\nimport CreateTooltip from './create_tooltip.js';\n\n\n// EXPORTS //\n\nexport const createTooltip = CreateTooltip;\nexport default NumberInput;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport Input from '@isle-project/components/input/base';\nimport contains from '@stdlib/assert/contains';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport PINF from '@stdlib/constants/math/float64-pinf';\nimport NINF from '@stdlib/constants/math/float64-ninf';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport createTooltip from './create_tooltip.js';\nimport './number.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:number-input' );\nconst uid = generateUID( 'number-input' );\n\n\n// MAIN //\n\n/**\n* A number input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the number to be assigned to\n* @property {number} value - number value (for controlled component)\n* @property {number} defaultValue - value indicating the default value of the input at startup\n* @property {boolean} disabled - boolean indicating whether the input is active or not\n* @property {number} min - number indicating the smallest possible value that may be inserted\n* @property {number} max - number indicating the maximum value that may be inserted\n* @property {(number|string)} step - number indicating the incremental changes when using the increment arrows\n* @property {boolean} inline - indicates whether the input is displayed inline\n* @property {string} legend - string indicating the text displayed next to the number input\n* @property {boolean} numbersOnly - controls whether only numbers are accepted\n* @property {string} tooltip - tooltip string (if not set, the tooltip is automatically generated)\n* @property {string} tooltipPlacement - direction of the tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} inputStyle - CSS inline styles for input element\n* @property {Function} onBlur - callback function to be invoked when using a blur method\n* @property {Function} onChange - callback function to be invoked when number input is changed\n* @property {Function} onKeyPress - callback function to be invoked when any key is entered\n* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down\n* @property {Function} onKeyUp - callback function to be invoked when key is released\n*/\nclass NumberInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.id = props.id || uid( props );\n\t\tthis.state = {\n\t\t\tvalue: props.value || (props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue),\n\t\t\ttooltip: props.tooltip || createTooltip( props ),\n\t\t\tprevProps: props\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tlet newState = {};\n\t\tconst { prevProps } = prevState;\n\t\tif ( nextProps.defaultValue !== prevProps.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t}\n\t\telse if ( nextProps.bind !== prevProps.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t}\n\t\tif ( nextProps.min !== prevProps.min || nextProps.max !== prevProps.max ) {\n\t\t\tnewState.tooltip = nextProps.tooltip || createTooltip( nextProps );\n\t\t}\n\t\telse if ( nextProps.tooltip && nextProps.tooltip !== prevState.tooltip ) {\n\t\t\tnewState.tooltip = nextProps.tooltip;\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\tdebug( 'Created new state from props...' );\n\t\t\tnewState.prevProps = nextProps;\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tdebug( 'Component did update...' );\n\t\tif ( this.props.bind ) {\n\t\t\tconst globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value && isNumber( this.state.value ) ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\thandleChange = ( event ) => {\n\t\tdebug( 'Handle change of input field...' );\n\t\tlet valid = event.target.validity.valid;\n\t\tlet value = event.target.value;\n\t\tthis.setState({\n\t\t\tvalue\n\t\t}, () => {\n\t\t\tif ( this.props.value ||\n\t\t\t\t(valid && value !== '' &&\n\t\t\t\tvalue !== '-' && value !== '.' && value !== '-.' )\n\t\t\t) {\n\t\t\t\tvalue = parseFloat( value );\n\t\t\t\tif ( isnan( value ) ) {\n\t\t\t\t\tvalue = '';\n\t\t\t\t}\n\t\t\t\tthis.props.onChange( value );\n\t\t\t\tif ( this.props.bind ) {\n\t\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tfinishChange = ( event ) => {\n\t\tconst { max, min, step } = this.props;\n\t\tdebug( 'Finished change...' );\n\t\tlet value = event.target.value;\n\t\tif ( contains( value, '/' ) ) {\n\t\t\tdebug( 'Encountered a fraction...' );\n\t\t\tlet vals = value.split( '/' );\n\t\t\tif ( vals[ 0 ] !== '' && vals[ 1 ] !== '' ) {\n\t\t\t\tvalue = parseFloat( vals[ 0 ]) / parseFloat( vals[ 1 ]);\n\t\t\t}\n\t\t}\n\t\tif ( isnan( value ) ) {\n\t\t\tvalue = '';\n\t\t}\n\t\telse if (\n\t\t\tvalue !== '' && value !== '-' &&\n\t\t\tvalue !== '.' && value !== '-.'\n\t\t) {\n\t\t\tvalue = parseFloat( value );\n\t\t}\n\t\tif ( value > max ) {\n\t\t\tvalue = max;\n\t\t}\n\t\telse if ( value < min ) {\n\t\t\tvalue = min;\n\t\t}\n\t\telse if (\n\t\t\tstep === 1.0 && value !== '' &&\n\t\t\tvalue !== '-' && value !== '.' && value !== '-.'\n\t\t) {\n\t\t\tvalue = value - value % this.props.step;\n\t\t}\n\t\tthis.props.onChange( value );\n\t\tthis.props.onBlur( value );\n\t\tif ( value !== this.state.value ) {\n\t\t\tthis.setState({\n\t\t\t\tvalue\n\t\t\t}, () => {\n\t\t\t\tif ( this.props.bind ) {\n\t\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tif ( this.props.value !== null ) {\n\t\t\tvalue = this.props.value;\n\t\t}\n\t\tif ( this.props.inline === true ) {\n\t\t\tconst input =\n\t\t\t\t<span className=\"input\" style={{ padding: '5px', ...this.props.style }}>\n\t\t\t\t\t{ this.props.legend ? <label htmlFor={this.id} > {this.props.legend} =  </label> : null }\n\t\t\t\t\t<input\n\t\t\t\t\t\tid={this.id}\n\t\t\t\t\t\ttype={this.props.numbersOnly ? 'number' : 'text'}\n\t\t\t\t\t\tname=\"input\"\n\t\t\t\t\t\tclassName=\"number-number-input\"\n\t\t\t\t\t\tdisabled={this.props.disabled}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tstep={this.props.step}\n\t\t\t\t\t\tmin={this.props.min}\n\t\t\t\t\t\tmax={this.props.max}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\twidth: '80px',\n\t\t\t\t\t\t\tpaddingLeft: '6px',\n\t\t\t\t\t\t\tmarginLeft: '3px',\n\t\t\t\t\t\t\t...this.props.inputStyle\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tonBlur={this.finishChange}\n\t\t\t\t\t\tonKeyPress={this.props.onKeyPress}\n\t\t\t\t\t\tonKeyDown={this.props.onKeyDown}\n\t\t\t\t\t\tonKeyUp={this.props.onKeyUp}\n\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t/>\n\t\t\t\t\t{ this.props.description ?\n\t\t\t\t\t\t<span>({this.props.description})</span> :\n\t\t\t\t\t\t<span />\n\t\t\t\t\t}\n\t\t\t\t</span>;\n\t\t\treturn this.props.disabled ?\n\t\t\t\tinput:\n\t\t\t\t<Tooltip id=\"number-input-tooltip-inline\" placement=\"top\" tooltip={this.state.tooltip} >\n\t\t\t\t\t{input}\n\t\t\t\t</Tooltip>;\n\t\t}\n\t\tlet input = <input\n\t\t\tid={this.id}\n\t\t\ttype={this.props.numbersOnly ? 'number' : 'text'}\n\t\t\tname=\"input\"\n\t\t\tclassName=\"number-number-input\"\n\t\t\tdisabled={this.props.disabled}\n\t\t\tvalue={value}\n\t\t\tstep={this.props.step}\n\t\t\tmin={this.props.min}\n\t\t\tmax={this.props.max}\n\t\t\tstyle={{\n\t\t\t\twidth: '80px',\n\t\t\t\tmarginLeft: '24px',\n\t\t\t\t...this.props.inputStyle\n\t\t\t}}\n\t\t\tonChange={this.handleChange}\n\t\t\tonBlur={this.finishChange}\n\t\t\tonKeyPress={this.props.onKeyPress}\n\t\t\tonKeyDown={this.props.onKeyDown}\n\t\t\tonKeyUp={this.props.onKeyUp}\n\t\t\tautoComplete=\"off\"\n\t\t/>;\n\t\treturn ( <div className=\"input\" style={{\n\t\t\tmarginBottom: '4px',\n\t\t\tmarginTop: '4px',\n\t\t\t...this.props.style\n\t\t}}>\n\t\t\t{ this.props.legend ?\n\t\t\t\t<span>\n\t\t\t\t\t<label htmlFor={this.id} >\n\t\t\t\t\t\t{isString( this.props.legend ) ?\n\t\t\t\t\t\t\tthis.props.legend+':' :\n\t\t\t\t\t\t\tthis.props.legend\n\t\t\t\t\t\t}\n\t\t\t\t\t</label>\n\t\t\t\t\t{ this.props.description ?\n\t\t\t\t\t\t<span> {this.props.description}</span> :\n\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t</span> : null\n\t\t\t}\n\t\t\t<Tooltip\n\t\t\t\tid=\"number-input-tooltip\" placement={this.props.tooltipPlacement}\n\t\t\t\ttooltip={this.state.tooltip}\n\t\t\t><span className=\"number-input-span\" >{input}</span></Tooltip>\n\t\t</div> );\n\t}\n}\n\n\n// PROPERTIES //\n\nNumberInput.defaultProps = {\n\tbind: '',\n\tdisabled: false,\n\tlegend: null,\n\tmin: NINF,\n\tmax: PINF,\n\tstep: 1,\n\tdefaultValue: 0,\n\tonBlur() {},\n\tonChange() {},\n\tonKeyDown() {},\n\tonKeyPress() {},\n\tonKeyUp() {},\n\tinline: false,\n\tnumbersOnly: true,\n\tstyle: {},\n\tinputStyle: {},\n\tvalue: null,\n\ttooltip: null,\n\ttooltipPlacement: 'left'\n};\n\nNumberInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmin: PropTypes.number,\n\tnumbersOnly: PropTypes.bool,\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\tstyle: PropTypes.object,\n\tinputStyle: PropTypes.object,\n\tvalue: PropTypes.number,\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'top', 'right', 'bottom', 'left' ])\n};\n\nNumberInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default NumberInput;\n","// MODULES //\n\nimport isArrayLike from '@stdlib/assert/is-array-like';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\n\n\n// MAIN //\n\n/**\n* Computes an element-wise subtraction.\n*\n* @param {NumberArray} arr - input array\n* @param {(NumberArray|number)} x - either an array of equal length or a scalar\n* @returns {NumberArray} output array\n*/\nfunction subtract( arr, x ) {\n\tconst isArr = isArrayLike( x );\n\tif ( !isArrayLike( arr ) ) {\n\t\tthrow new TypeError( 'invalid input argument. Must provide an array. Value: `' + arr + '`.' );\n\t}\n\tif ( !isArr && !isNumber( x ) ) {\n\t\tthrow new TypeError( 'invalid input argument. Second argument must either be an array or number primitive. Value: `' + x + '`.' );\n\t}\n\tconst len = arr.length;\n\tconst out = new Array( len );\n\n\t// Case 1: x is an array\n\tif ( isArr ) {\n\t\tif ( len !== x.length ) {\n\t\t\tthrow new Error( 'invalid input argument. Array to be added must have a length equal to that of the input array.' );\n\t\t}\n\t\tfor ( let i = 0; i < len; i++ ) {\n\t\t\tout[ i ] = arr[ i ] - x[ i ];\n\t\t}\n\t}\n\t// Case 2: scalar\n\telse {\n\t\tfor ( let i = 0; i < len; i++ ) {\n\t\t\tout[ i ] = arr[ i ] - x;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default subtract;\n"],"sourceRoot":""}