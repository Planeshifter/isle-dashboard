{"version":3,"sources":["components/login/index.js","containers/visible-login/index.js"],"names":["Login","props","event","a","preventDefault","form","password","state","email","setState","showInputOverlay","overlayTarget","emailInput","invalidInputMessage","passwordInput","handleLogin","res","message","data","history","push","token","id","fetchCredentials","user","getEnrollableCohorts","msg","response","setTimeout","target","value","name","this","loggedIn","restoreLogin","t","settings","className","Card","Header","Title","as","style","textAlign","siteTitle","Body","Form","FormGroup","controlId","Row","Col","sm","FormLabel","FormControl","type","autoComplete","placeholder","onChange","handleInputChange","ref","input","Button","variant","onClick","handleSubmit","Footer","background","to","allowUserRegistrations","Overlay","show","placement","containerPadding","Popover","title","Component","withTranslation","VisibleLogin","connect","dispatch","handleLoginInjector","restoreLoginInjector","fetchCredentialsInjector","getEnrollableCohortsInjector"],"mappings":"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","file":"static/js/159.a25c177b.chunk.js","sourcesContent":["/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport FormControl from 'react-bootstrap/FormControl';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport Form from 'react-bootstrap/Form';\nimport Overlay from 'react-bootstrap/Overlay';\nimport Popover from 'react-bootstrap/Popover';\nimport { Link } from 'react-router-dom';\nimport 'css/login.css';\n\n\n// MAIN //\n\nclass Login extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tthis.state = {\n\t\t\temail: '',\n\t\t\tpassword: ''\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { user } = this.props;\n\t\tif ( user && user.loggedIn ) {\n\t\t\tthis.props.restoreLogin( user );\n\t\t\tthis.props.getEnrollableCohorts( user );\n\t\t}\n\t}\n\n\thandleSubmit = async ( event ) => {\n\t\tevent.preventDefault();\n\t\tconst form = {\n\t\t\tpassword: this.state.password,\n\t\t\temail: this.state.email\n\t\t};\n\t\tif ( form.email === '' ) {\n\t\t\tthis.setState({\n\t\t\t\tshowInputOverlay: true,\n\t\t\t\toverlayTarget: this.emailInput,\n\t\t\t\tinvalidInputMessage: 'Enter your email address.'\n\t\t\t});\n\t\t}\n\t\telse if ( form.password === '' ) {\n\t\t\tthis.setState({\n\t\t\t\tshowInputOverlay: true,\n\t\t\t\toverlayTarget: this.passwordInput,\n\t\t\t\tinvalidInputMessage: 'Enter your password.'\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\tconst res = await this.props.handleLogin( form );\n\t\t\t\tconst { message } = res.data;\n\t\t\t\tif ( message === 'finish-login-via-tfa' ) {\n\t\t\t\t\tthis.props.history.push( '/login-tfa' );\n\t\t\t\t}\n\t\t\t\telse if ( message === 'ok' ) {\n\t\t\t\t\tconst { token, id } = res.data;\n\t\t\t\t\tconst user = await this.props.fetchCredentials({ token, id });\n\t\t\t\t\tif ( user ) {\n\t\t\t\t\t\tthis.props.getEnrollableCohorts( user );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch ( err ) {\n\t\t\t\tconst msg = err.response ? err.response.data : err.message;\n\t\t\t\tthis.setState({\n\t\t\t\t\tshowInputOverlay: true,\n\t\t\t\t\toverlayTarget: msg === 'Password is not correct.' ? this.passwordInput : this.emailInput,\n\t\t\t\t\tinvalidInputMessage: msg\n\t\t\t\t}, () => {\n\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tshowInputOverlay: false\n\t\t\t\t\t\t});\n\t\t\t\t\t}, 4000 );\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\thandleInputChange = ( event ) => {\n\t\tconst target = event.target;\n\t\tconst value = target.value;\n\t\tconst name = target.name;\n\n\t\tthis.setState({\n\t\t\t[ name ]: value\n\t\t});\n\t}\n\n\trender() {\n\t\tconst { t, settings } = this.props;\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<div className=\"login\"><Card className=\"login-panel\">\n\t\t\t\t\t<Card.Header>\n\t\t\t\t\t\t<Card.Title as=\"h1\" style={{ textAlign: 'center' }} >\n\t\t\t\t\t\t\tISLE <small>{settings.siteTitle}</small>\n\t\t\t\t\t\t</Card.Title>\n\t\t\t\t\t</Card.Header>\n\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t<FormGroup controlId=\"form-email\">\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col sm={3}>\n\t\t\t\t\t\t\t\t\t\t<FormLabel>{t('common:email')}</FormLabel>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col sm={9}>\n\t\t\t\t\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\t\t\t\t\tautoComplete=\"isle-email\"\n\t\t\t\t\t\t\t\t\t\t\tplaceholder={t('common:email')}\n\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleInputChange}\n\t\t\t\t\t\t\t\t\t\t\tref={( input ) => { this.emailInput = input; }}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t<FormGroup controlId=\"form-password\">\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col sm={3}>\n\t\t\t\t\t\t\t\t\t\t<FormLabel>{t('common:password')}</FormLabel>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col sm={9}>\n\t\t\t\t\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\t\t\t\tautoComplete=\"isle-password\"\n\t\t\t\t\t\t\t\t\t\t\tplaceholder={t('common:password')}\n\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleInputChange}\n\t\t\t\t\t\t\t\t\t\t\tref={( input ) => { this.passwordInput = input; }}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tclassName=\"centered\"\n\t\t\t\t\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\t\t\t\t\tonClick={this.handleSubmit}\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\t>{t('common:login')}</Button>\n\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t</Card.Body>\n\t\t\t\t\t<Card.Footer style={{ background: 'rgba(255,255,255,0.6)', textAlign: 'right' }}>\n\t\t\t\t\t\t<Link to=\"/forgot-password\">{t('common:forgot-password')}</Link>\n\t\t\t\t\t\t{settings.allowUserRegistrations ?\n\t\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t\t<span> | </span>\n\t\t\t\t\t\t\t\t<Link to=\"/signup\">{t('common:register')}</Link>\n\t\t\t\t\t\t\t</Fragment> :\n\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t}\n\t\t\t\t\t</Card.Footer>\n\t\t\t\t</Card></div>\n\t\t\t\t<Overlay\n\t\t\t\t\tshow={this.state.showInputOverlay}\n\t\t\t\t\ttarget={this.state.overlayTarget}\n\t\t\t\t\tplacement=\"right\"\n\t\t\t\t\tcontainerPadding={20}\n\t\t\t\t>\n\t\t\t\t\t<Popover id=\"popover-contained\" title=\"Not valid\">\n\t\t\t\t\t\t{this.state.invalidInputMessage}\n\t\t\t\t\t</Popover>\n\t\t\t\t</Overlay>\n\t\t\t</Fragment>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nLogin.propTypes = {\n\tfetchCredentials: PropTypes.func.isRequired,\n\thandleLogin: PropTypes.func.isRequired\n};\n\n\n// EXPORTS //\n\nexport default withTranslation( [ 'login', 'common' ] )( Login );\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Login from 'components/login';\nimport { fetchCredentialsInjector } from 'actions/authentication';\nimport { getEnrollableCohortsInjector } from 'actions/cohort';\nimport { handleLoginInjector, restoreLoginInjector } from 'actions/user';\n\n\n// FUNCTIONS //\n\nfunction mapStateToProps( state ) {\n\treturn {\n\t\tuser: state.user,\n\t\tsettings: state.settings\n\t};\n}\n\nfunction mapDispatchToProps( dispatch ) {\n\treturn {\n\t\thandleLogin: handleLoginInjector( dispatch ),\n\t\trestoreLogin: restoreLoginInjector( dispatch ),\n\t\tfetchCredentials: fetchCredentialsInjector( dispatch ),\n\t\tgetEnrollableCohorts: getEnrollableCohortsInjector( dispatch )\n\t};\n}\n\n\n// MAIN //\n\nconst VisibleLogin = connect( mapStateToProps, mapDispatchToProps )( Login );\n\n\n// EXPORTS //\n\nexport default VisibleLogin;\n"],"sourceRoot":""}