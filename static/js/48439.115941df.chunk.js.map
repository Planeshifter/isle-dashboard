{"version":3,"sources":["../node_modules/@isle-project/components/dashboard/index.js","../node_modules/@isle-project/components/data-explorer/menu/violinplot.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/checkbox/main.js","../node_modules/@isle-project/components/input/checkbox/index.js"],"names":["Dashboard","Loadable","ViolinPlotMenu","data","variables","defaultValue","groupingVariables","t","session","logAction","onCreated","useState","showBox","setShowBox","autoStart","title","content","onGenerate","variable","group","plotId","randomstring","action","output","id","onShare","addNotification","message","level","position","DATA_EXPLORER_SHARE_VIOLINPLOT","DATA_EXPLORER_VIOLINPLOT","legend","options","clearable","onChange","defaultProps","props","popover","trigger","placement","rootClose","overlay","size","variant","className","CheckboxInput","context","newValue","setState","value","bind","global","lesson","event","target","checked","updateValue","state","this","globalVal","input","type","handleChange","disabled","aria-label","tooltip","inline","tooltipPlacement","style","marginLeft","role","tabIndex","color","onClick","handleSpanChange","onKeyPress","onSpanChange","noop","nextProps","prevState","newState","isEmptyObject","Input","propTypes","PropTypes","contextType","SessionContext"],"mappings":"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","file":"static/js/48439.115941df.chunk.js","sourcesContent":["// MODULES //\n\nimport Loadable from '@isle-project/components/internal/loadable';\n\n\n// MAIN //\n\nconst Dashboard = Loadable( () => import( /* webpackChunkName: \"Dashboard\" */ './main.js' ) );\n\n\n// EXPORTS //\n\nexport default Dashboard;\n","// MODULES //\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport SelectInput from '@isle-project/components/input/select';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport Dashboard from '@isle-project/components/dashboard';\nimport randomstring from '@isle-project/utils/randomstring/alphanumeric';\nimport ViolinPlot from '@isle-project/components/plots/violinplot';\nimport { DATA_EXPLORER_SHARE_VIOLINPLOT, DATA_EXPLORER_VIOLINPLOT } from '@isle-project/constants/actions.js';\nimport QuestionButton from './../question_button.js';\n\n\n// VARIABLES //\n\nconst DESCRIPTION = '';\n\n\n// MAIN //\n\nconst ViolinPlotMenu = ({ data, variables, defaultValue, groupingVariables, t, session, logAction, onCreated }) => {\n\tconst [ showBox, setShowBox ] = useState( false );\n\treturn (\n\t\t<Dashboard\n\t\t\tautoStart={false}\n\t\t\ttitle={<span>\n\t\t\t\t{t('Violin Plot')}\n\t\t\t\t<QuestionButton title={t('Violin Plot')} content={DESCRIPTION} />\n\t\t\t</span>}\n\t\t\tonGenerate={generateViolinplot}\n\t\t>\n\t\t\t<SelectInput\n\t\t\t\tlegend={t('variable')}\n\t\t\t\tdefaultValue={defaultValue || variables[ 0 ]}\n\t\t\t\toptions={variables}\n\t\t\t/>\n\t\t\t<SelectInput\n\t\t\t\tlegend={t('group-by')}\n\t\t\t\toptions={groupingVariables}\n\t\t\t\tclearable={true}\n\t\t\t/>\n\t\t\t<CheckboxInput\n\t\t\t\tlegend={t('show-boxplot')}\n\t\t\t\tdefaultValue={showBox}\n\t\t\t\tonChange={() => {\n\t\t\t\t\tsetShowBox( !showBox );\n\t\t\t\t}}\n\t\t\t/>\n\t\t</Dashboard>\n\t);\n\n\tfunction generateViolinplot( variable, group ) {\n\t\tconst plotId = randomstring( 6 );\n\t\tconst action = {\n\t\t\tvariable,\n\t\t\tgroup,\n\t\t\tplotId\n\t\t};\n\t\tconst onShare = () => {\n\t\t\tsession.addNotification({\n\t\t\t\ttitle: t('plot-shared'),\n\t\t\t\tmessage: t('plot-shared-message'),\n\t\t\t\tlevel: 'success',\n\t\t\t\tposition: 'tr'\n\t\t\t});\n\t\t\tlogAction( DATA_EXPLORER_SHARE_VIOLINPLOT, action );\n\t\t};\n\t\tconst output = <ViolinPlot\n\t\t\tid={plotId} variable={variable} group={group}\n\t\t\tdata={data} onShare={onShare} action={action}\n\t\t\tshowBox={showBox}\n\t\t/>;\n\t\tlogAction( DATA_EXPLORER_VIOLINPLOT, action );\n\t\tonCreated( output );\n\t}\n};\n\n\n// PROPERTIES //\n\nViolinPlotMenu.defaultProps = {\n\tdefaultValue: null,\n\tgroupingVariables: null,\n\tlogAction() {},\n\tonCreated() {}\n};\n\nViolinPlotMenu.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\tdefaultValue: PropTypes.string,\n\tgroupingVariables: PropTypes.array,\n\tlogAction: PropTypes.func,\n\tonCreated: PropTypes.func,\n\tsession: PropTypes.object.isRequired,\n\tvariables: PropTypes.array.isRequired\n};\n\n\n// EXPORTS //\n\nexport default ViolinPlotMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={['hover', 'focus']} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport noop from '@stdlib/utils/noop';\nimport Input from '@isle-project/components/input/base';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport './checkbox.css';\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nclass CheckboxInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.state = {\n\t\t\tvalue: props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue,\n\t\t\tbind: props.bind,\n\t\t\tdefaultValue: props.defaultValue\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tlet newState = {};\n\t\tif ( nextProps.defaultValue !== prevState.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t\tnewState.defaultValue = nextProps.defaultValue;\n\t\t}\n\t\telse if ( nextProps.bind !== prevState.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t\tnewState.bind = nextProps.bind;\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif ( this.props.bind ) {\n\t\t\tlet globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateValue = ( newValue ) => {\n\t\tthis.setState({\n\t\t\tvalue: newValue\n\t\t}, () => {\n\t\t\tif ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\thandleChange = ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tthis.props.onChange( newValue );\n\t\tthis.updateValue( newValue );\n\t}\n\n\thandleSpanChange = ( event ) => {\n\t\tconst newValue = this.props.value !== null ? !this.props.value : !this.state.value;\n\t\tthis.props.onChange( newValue );\n\t\tthis.updateValue( newValue );\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tif ( this.props.value !== null ) {\n\t\t\tvalue = this.props.value;\n\t\t}\n\t\tconst input = <input\n\t\t\tclassName=\"checkbox-input\"\n\t\t\ttype=\"checkbox\"\n\t\t\tchecked={value}\n\t\t\tvalue=\"checkbox\"\n\t\t\tonChange={this.handleChange}\n\t\t\tdisabled={this.props.disabled}\n\t\t\taria-label={this.props.tooltip}\n\t\t></input>;\n\t\tif ( this.props.inline === true ) {\n\t\t\treturn (\n\t\t\t\t<Tooltip tooltip={this.props.tooltip} placement={this.props.tooltipPlacement} >\n\t\t\t\t\t<span style={{ marginLeft: '8px', ...this.props.style }}>\n\t\t\t\t\t\t{input}\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tcolor: this.props.disabled ? 'darkgray' : null\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonClick={this.handleSpanChange} onKeyPress={this.handleSpanChange}\n\t\t\t\t\t\t>{this.props.legend}</span>\n\t\t\t\t\t</span>\n\t\t\t\t</Tooltip>\n\t\t\t);\n\t\t}\n\t\tconst onSpanChange = this.props.disabled ? noop : this.handleSpanChange;\n\t\treturn (\n\t\t\t<Tooltip tooltip={this.props.tooltip} placement={this.props.tooltipPlacement} >\n\t\t\t\t<div className=\"input checkbox-input-div\" style={this.props.style}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: this.props.disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t\t>{this.props.legend}</span>\n\t\t\t\t</div>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\nCheckboxInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n"],"sourceRoot":""}