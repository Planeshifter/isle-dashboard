{"version":3,"sources":["../node_modules/@isle-project/components/data-explorer/menu/lineplot.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/checkbox/index.js","../node_modules/@isle-project/components/input/checkbox/main.js"],"names":["createOption","label","value","LinePlotMenu","props","categorical","data","defaultValue","variables","groupingVariables","t","session","logAction","onCreated","useState","x","setX","y","setY","group","setGroup","showPoints","setShowPoints","Header","as","title","content","Body","controlId","legend","options","map","onChange","elem","placeholder","isClearable","styles","selectStyles","clearable","menuPlacement","variant","block","onClick","plotId","randomstring","action","output","onShare","addNotification","message","level","position","DATA_EXPLORER_SHARE_LINEPLOT","id","DATA_EXPLORER_LINEPLOT","defaultProps","QuestionButton","popover","trigger","placement","rootClose","overlay","size","className","CheckboxInput","context","newValue","setState","bind","global","lesson","event","target","checked","updateValue","state","this","globalVal","input","type","handleChange","disabled","aria-label","tooltip","inline","tooltipPlacement","style","marginLeft","role","tabIndex","color","handleSpanChange","onKeyPress","onSpanChange","noop","nextProps","prevState","newState","isEmptyObject","Input","propTypes","PropTypes","string","bool","func","oneOfType","node","oneOf","object","contextType","SessionContext"],"mappings":"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","file":"static/js/133.4096fa92.chunk.js","sourcesContent":["// MODULES //\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport SelectInput from '@isle-project/components/input/select';\nimport selectStyles from '@isle-project/components/input/select/styles';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport randomstring from '@isle-project/utils/randomstring/alphanumeric';\nimport LinePlot from '@isle-project/components/plots/lineplot';\nimport { DATA_EXPLORER_SHARE_LINEPLOT, DATA_EXPLORER_LINEPLOT } from '@isle-project/constants/actions.js';\nimport QuestionButton from '../question_button.js';\n\n\n// FUNCTIONS //\n\nfunction createOption( label ) {\n\treturn {\n\t\tlabel,\n\t\tvalue: label\n\t};\n}\n\n\n// MAIN //\n\nconst LinePlotMenu = ( props ) => {\n\tconst { categorical, data, defaultValue, variables, groupingVariables, t, session, logAction, onCreated } = props;\n\tconst [ x, setX ] = useState( null );\n\tconst [ y, setY ] = useState( defaultValue || variables[ 0 ] );\n\tconst [ group, setGroup ] = useState( null );\n\tconst [ showPoints, setShowPoints ] = useState( false );\n\tconst generateLinePlot = () => {\n\t\tconst plotId = randomstring( 6 );\n\t\tconst action = {\n\t\t\tx,\n\t\t\ty,\n\t\t\tgroup,\n\t\t\tplotId\n\t\t};\n\t\tconst onShare = () => {\n\t\t\tsession.addNotification({\n\t\t\t\ttitle: t('plot-shared'),\n\t\t\t\tmessage: t('plot-shared-message'),\n\t\t\t\tlevel: 'success',\n\t\t\t\tposition: 'tr'\n\t\t\t});\n\t\t\tlogAction( DATA_EXPLORER_SHARE_LINEPLOT, action );\n\t\t};\n\t\tconst output = <LinePlot\n\t\t\tdata={data} x={x} y={y}\n\t\t\tgroup={group} showPoints={showPoints}\n\t\t\tonShare={onShare} action={action} id={plotId}\n\t\t/>;\n\t\tlogAction( DATA_EXPLORER_LINEPLOT, action );\n\t\tonCreated( output );\n\t};\n\treturn (\n\t\t<Card>\n\t\t\t<Card.Header as=\"h4\">\n\t\t\t\t{t('Line Plot')}\n\t\t\t\t<QuestionButton title={t('Line Plot')} content={t('Line Plot-description')} />\n\t\t\t</Card.Header>\n\t\t\t<Card.Body>\n\t\t\t\t<FormGroup controlId=\"lineplot-form-select\">\n\t\t\t\t\t<FormLabel>{t('x-axis')}</FormLabel>\n\t\t\t\t\t<Select\n\t\t\t\t\t\tlegend={t('x-axis')}\n\t\t\t\t\t\tdefaultValue={null}\n\t\t\t\t\t\toptions={[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Quantitative',\n\t\t\t\t\t\t\t\toptions: variables.map( createOption )\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Categorical',\n\t\t\t\t\t\t\t\toptions: categorical.map( createOption )\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]}\n\t\t\t\t\t\tonChange={( elem ) => {\n\t\t\t\t\t\t\tsetX( elem ? elem.value : null );\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tplaceholder=\"Select... (optional)\"\n\t\t\t\t\t\tisClearable\n\t\t\t\t\t\tstyles={selectStyles}\n\t\t\t\t\t/>\n\t\t\t\t</FormGroup>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('y-axis')}\n\t\t\t\t\tdefaultValue={y}\n\t\t\t\t\toptions={variables}\n\t\t\t\t\tonChange={setY}\n\t\t\t\t/>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('group-by')}\n\t\t\t\t\tdefaultValue={group}\n\t\t\t\t\toptions={groupingVariables}\n\t\t\t\t\tclearable={true}\n\t\t\t\t\tmenuPlacement=\"top\"\n\t\t\t\t\tonChange={setGroup}\n\t\t\t\t/>\n\t\t\t\t<CheckboxInput\n\t\t\t\t\tlegend={t('show-point-markers')}\n\t\t\t\t\tdefaultValue={showPoints}\n\t\t\t\t\tonChange={setShowPoints}\n\t\t\t\t/>\n\t\t\t\t<Button variant=\"primary\" block onClick={generateLinePlot}>\n\t\t\t\t\t{t('generate')}\n\t\t\t\t</Button>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\n\n// PROPERTIES //\n\nLinePlotMenu.defaultProps = {\n\tdefaultValue: null,\n\tgroupingVariables: null,\n\tlogAction() {},\n\tonCreated() {}\n};\n\nLinePlotMenu.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\tdefaultValue: PropTypes.string,\n\tgroupingVariables: PropTypes.array,\n\tlogAction: PropTypes.func,\n\tonCreated: PropTypes.func,\n\tsession: PropTypes.object.isRequired,\n\tcategorical: PropTypes.array.isRequired,\n\tvariables: PropTypes.array.isRequired\n};\n\n\n// EXPORTS //\n\nexport default LinePlotMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={['hover', 'focus']} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport noop from '@stdlib/utils/noop';\nimport Input from '@isle-project/components/input/base';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport './checkbox.css';\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nclass CheckboxInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.state = {\n\t\t\tvalue: props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue,\n\t\t\tbind: props.bind,\n\t\t\tdefaultValue: props.defaultValue\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tlet newState = {};\n\t\tif ( nextProps.defaultValue !== prevState.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t\tnewState.defaultValue = nextProps.defaultValue;\n\t\t}\n\t\telse if ( nextProps.bind !== prevState.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t\tnewState.bind = nextProps.bind;\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif ( this.props.bind ) {\n\t\t\tlet globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateValue = ( newValue ) => {\n\t\tthis.setState({\n\t\t\tvalue: newValue\n\t\t}, () => {\n\t\t\tif ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\thandleChange = ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tthis.props.onChange( newValue );\n\t\tthis.updateValue( newValue );\n\t}\n\n\thandleSpanChange = ( event ) => {\n\t\tconst newValue = this.props.value !== null ? !this.props.value : !this.state.value;\n\t\tthis.props.onChange( newValue );\n\t\tthis.updateValue( newValue );\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tif ( this.props.value !== null ) {\n\t\t\tvalue = this.props.value;\n\t\t}\n\t\tconst input = <input\n\t\t\tclassName=\"checkbox-input\"\n\t\t\ttype=\"checkbox\"\n\t\t\tchecked={value}\n\t\t\tvalue=\"checkbox\"\n\t\t\tonChange={this.handleChange}\n\t\t\tdisabled={this.props.disabled}\n\t\t\taria-label={this.props.tooltip}\n\t\t></input>;\n\t\tif ( this.props.inline === true ) {\n\t\t\treturn (\n\t\t\t\t<Tooltip tooltip={this.props.tooltip} placement={this.props.tooltipPlacement} >\n\t\t\t\t\t<span style={{ marginLeft: '8px', ...this.props.style }}>\n\t\t\t\t\t\t{input}\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tcolor: this.props.disabled ? 'darkgray' : null\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonClick={this.handleSpanChange} onKeyPress={this.handleSpanChange}\n\t\t\t\t\t\t>{this.props.legend}</span>\n\t\t\t\t\t</span>\n\t\t\t\t</Tooltip>\n\t\t\t);\n\t\t}\n\t\tconst onSpanChange = this.props.disabled ? noop : this.handleSpanChange;\n\t\treturn (\n\t\t\t<Tooltip tooltip={this.props.tooltip} placement={this.props.tooltipPlacement} >\n\t\t\t\t<div className=\"input checkbox-input-div\" style={this.props.style}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: this.props.disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t\t>{this.props.legend}</span>\n\t\t\t\t</div>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\nCheckboxInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n"],"sourceRoot":""}