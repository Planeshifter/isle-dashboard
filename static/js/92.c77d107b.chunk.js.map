{"version":3,"sources":["../node_modules/@isle-project/components/input/text/index.js","../node_modules/@isle-project/components/input/text/main.js","../node_modules/@isle-project/components/input/number/create_tooltip.js","../node_modules/@isle-project/components/input/checkbox/index.js","../node_modules/@isle-project/components/input/checkbox/main.js","../node_modules/@isle-project/components/input/number/index.js","../node_modules/@isle-project/components/input/number/main.js","../node_modules/@isle-project/components/dashboard/main.js","../node_modules/@isle-project/components/input/slider/index.js","../node_modules/@isle-project/components/input/slider/main.js"],"names":["TextInput","uid","generateUID","props","context","event","value","target","onChange","setState","bind","global","lesson","textInput","focus","session","state","defaultValue","prevProps","id","this","globalVal","inline","className","style","legend","htmlFor","type","name","placeholder","ref","input","width","handleChange","onKeyPress","onKeyDown","onKeyUp","description","onBlur","nextProps","prevState","newState","isEmptyObject","Input","defaultProps","propTypes","PropTypes","string","oneOfType","node","bool","func","number","object","contextType","SessionContext","createTooltip","tooltip","step","max","PINF","min","NINF","CheckboxInput","newValue","checked","updateValue","disabled","aria-label","placement","tooltipPlacement","marginLeft","role","tabIndex","color","onClick","handleSpanChange","onSpanChange","noop","oneOf","CreateTooltip","NumberInput","debug","logger","valid","validity","parseFloat","isnan","contains","vals","split","isNumber","padding","numbersOnly","paddingLeft","inputStyle","finishChange","autoComplete","marginBottom","marginTop","isString","addResources","Dashboard","args","Array","nArgs","i","autoUpdate","log","DASHBOARD_CLICK_GENERATE","onGenerate","_counter","fieldId","handleClick","children","level","React","Children","count","map","child","isValidElement","newProps","newChildren","SelectInput","SliderInput","idx","getCounter","handleFieldChange","registerChildren","cloneElement","initialState","walk","forEach","elem","isNull","hasOwnProperty","JSON","stringify","autoStart","_children","Card","maxWidth","title","Header","as","Body","Button","variant","block","label","t","Component","withTranslation","precision","minLabel","maxLabel","roundn","rangeInput","handleInputChange","float","display","rangeInputStyle","numberInput","numberInputStyle","opacity","show","hideTooltip"],"mappings":"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","file":"static/js/92.c77d107b.chunk.js","sourcesContent":["// MODULES //\n\nimport TextInput from './main.js';\n\n\n// EXPORTS //\n\nexport default TextInput;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport Input from '@isle-project/components/input/base';\nimport generateUID from '@isle-project/utils/uid';\nimport SessionContext from '@isle-project/session/context.js';\nimport './text.css';\n\n\n// VARIABLES //\n\nconst uid = generateUID( 'text-input' );\n\n\n// MAIN //\n\n/**\n* A text input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {Function} onChange - A function to be called when a text value is changed\n* @property {string} defaultValue - A value indicating the default value of the input at start\n* @property {string} value - text value (for controlled component)\n* @property {boolean} disabled - A boolean indicating whether the input is active or not\n* @property {number} width - A number indicating the width of the input in pixels\n* @property {boolean} inline - Indicates whether the input is displayed inline\n* @property {string} legend - A string indicating the text displayed next to the number input\n* @property {string} bind - name of global variable for the number to be assigned to\n* @property {string} placeholder - A string indicating the value to be displayed before an initial choice is made\n* @property {Object} style - CSS inline styles\n* @property {Function} onBlur - callback function invoked when the text area loses focus\n* @property {Function} onKeyPress - callback function to be invoked when any key is entered\n* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down\n* @property {Function} onKeyUp - callback function to be invoked when key is released\n*/\nclass TextInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.state = {\n\t\t\tvalue: props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue,\n\t\t\tprevProps: props\n\t\t};\n\n\t\tthis.id = props.id || uid( props );\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tconst newState = {};\n\t\tconst { prevProps } = prevState;\n\t\tif ( nextProps.defaultValue !== prevProps.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t} else if ( nextProps.bind !== prevProps.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\tnewState.prevProps = nextProps;\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif ( this.props.bind ) {\n\t\t\tlet globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\thandleChange = ( event ) => {\n\t\tconst value = event.target.value;\n\t\tthis.props.onChange( value );\n\t\tthis.setState({\n\t\t\tvalue\n\t\t}, () => {\n\t\t\tif ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n\n\tfocus = () => {\n\t\tthis.textInput.focus();\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tif ( this.props.value !== null ) {\n\t\t\tvalue = this.props.value;\n\t\t}\n\t\tif ( this.props.inline ) {\n\t\t\treturn (\n\t\t\t\t<span className=\"input\" style={this.props.style} >\n\t\t\t\t\t{ this.props.legend ? <label htmlFor={this.id} >\n\t\t\t\t\t\t{this.props.legend}:\n\t\t\t\t\t</label> : <span /> }\n\t\t\t\t\t<input\n\t\t\t\t\t\tid={this.id}\n\t\t\t\t\t\tclassName=\"text-inline-input\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"input\"\n\t\t\t\t\t\tplaceholder={this.props.placeholder}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tref={( input ) => {\n\t\t\t\t\t\t\tthis.textInput = input;\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\twidth: this.props.width\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tonKeyPress={this.props.onKeyPress}\n\t\t\t\t\t\tonKeyDown={this.props.onKeyDown}\n\t\t\t\t\t\tonKeyUp={this.props.onKeyUp}\n\t\t\t\t\t/>\n\t\t\t\t\t{ this.props.description ?\n\t\t\t\t\t\t<span> ({this.props.description}) </span> :\n\t\t\t\t\t\t<span />\n\t\t\t\t\t}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"input text-container-div\" style={this.props.style} >\n\t\t\t\t<span>\n\t\t\t\t\t{ this.props.legend ?\n\t\t\t\t\t\t<label htmlFor={this.id} >{this.props.legend}:</label> :\n\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t\t{ this.props.description ?\n\t\t\t\t\t\t<span> {this.props.description}</span> :\n\t\t\t\t\t\t<span />\n\t\t\t\t\t}\n\t\t\t\t</span>\n\t\t\t\t<input\n\t\t\t\t\tid={this.id}\n\t\t\t\t\tclassName=\"text-input\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"input\"\n\t\t\t\t\tplaceholder={this.props.placeholder}\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tref={( input ) => {\n\t\t\t\t\t\tthis.textInput = input;\n\t\t\t\t\t}}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: this.props.width\n\t\t\t\t\t}}\n\t\t\t\t\tonBlur={this.props.onBlur}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\tonKeyPress={this.props.onKeyPress}\n\t\t\t\t\tonKeyDown={this.props.onKeyDown}\n\t\t\t\t\tonKeyUp={this.props.onKeyUp}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nTextInput.defaultProps = {\n\tbind: null,\n\tdefaultValue: '',\n\tvalue: null,\n\tlegend: '',\n\twidth: 80,\n\tonBlur() {},\n\tonChange() {},\n\tonKeyDown() {},\n\tonKeyPress() {},\n\tonKeyUp() {},\n\tinline: false,\n\tplaceholder: 'Enter text',\n\tstyle: {}\n};\n\nTextInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.string,\n\tvalue: PropTypes.string,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tinline: PropTypes.bool,\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tplaceholder: PropTypes.string,\n\twidth: PropTypes.number,\n\tstyle: PropTypes.object\n};\n\nTextInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default TextInput;\n","// MODULES //\n\nimport PINF from '@stdlib/constants/math/float64-pinf';\nimport NINF from '@stdlib/constants/math/float64-ninf';\n\n\n// MAIN //\n\nfunction createTooltip( props ) {\n\tlet tooltip = `Enter a${ props.step === 1 ? 'n integer' : ' number'} `;\n\tif ( props.max !== PINF && props.min !== NINF ) {\n\t\ttooltip += `between ${props.min} and ${props.max}`;\n\t} else if ( props.min !== NINF ) {\n\t\ttooltip += `larger or equal to ${props.min}`;\n\t} else if ( props.max !== PINF ) {\n\t\ttooltip += `smaller or equal to ${props.max}`;\n\t}\n\treturn tooltip;\n}\n\n\n// EXPORTS //\n\nexport default createTooltip;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport noop from '@stdlib/utils/noop';\nimport Input from '@isle-project/components/input/base';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport './checkbox.css';\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nclass CheckboxInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.state = {\n\t\t\tvalue: props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue,\n\t\t\tbind: props.bind,\n\t\t\tdefaultValue: props.defaultValue\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tlet newState = {};\n\t\tif ( nextProps.defaultValue !== prevState.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t\tnewState.defaultValue = nextProps.defaultValue;\n\t\t}\n\t\telse if ( nextProps.bind !== prevState.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t\tnewState.bind = nextProps.bind;\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif ( this.props.bind ) {\n\t\t\tlet globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateValue = ( newValue ) => {\n\t\tthis.setState({\n\t\t\tvalue: newValue\n\t\t}, () => {\n\t\t\tif ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\thandleChange = ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tthis.props.onChange( newValue );\n\t\tthis.updateValue( newValue );\n\t}\n\n\thandleSpanChange = ( event ) => {\n\t\tconst newValue = this.props.value !== null ? !this.props.value : !this.state.value;\n\t\tthis.props.onChange( newValue );\n\t\tthis.updateValue( newValue );\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tif ( this.props.value !== null ) {\n\t\t\tvalue = this.props.value;\n\t\t}\n\t\tconst input = <input\n\t\t\tclassName=\"checkbox-input\"\n\t\t\ttype=\"checkbox\"\n\t\t\tchecked={value}\n\t\t\tvalue=\"checkbox\"\n\t\t\tonChange={this.handleChange}\n\t\t\tdisabled={this.props.disabled}\n\t\t\taria-label={this.props.tooltip}\n\t\t></input>;\n\t\tif ( this.props.inline === true ) {\n\t\t\treturn (\n\t\t\t\t<Tooltip tooltip={this.props.tooltip} placement={this.props.tooltipPlacement} >\n\t\t\t\t\t<span style={{ marginLeft: '8px', ...this.props.style }}>\n\t\t\t\t\t\t{input}\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tcolor: this.props.disabled ? 'darkgray' : null\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonClick={this.handleSpanChange} onKeyPress={this.handleSpanChange}\n\t\t\t\t\t\t>{this.props.legend}</span>\n\t\t\t\t\t</span>\n\t\t\t\t</Tooltip>\n\t\t\t);\n\t\t}\n\t\tconst onSpanChange = this.props.disabled ? noop : this.handleSpanChange;\n\t\treturn (\n\t\t\t<Tooltip tooltip={this.props.tooltip} placement={this.props.tooltipPlacement} >\n\t\t\t\t<div className=\"input checkbox-input-div\" style={this.props.style}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: this.props.disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t\t>{this.props.legend}</span>\n\t\t\t\t</div>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\nCheckboxInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport NumberInput from './main';\nimport CreateTooltip from './create_tooltip.js';\n\n\n// EXPORTS //\n\nexport const createTooltip = CreateTooltip;\nexport default NumberInput;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport Input from '@isle-project/components/input/base';\nimport contains from '@stdlib/assert/contains';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport PINF from '@stdlib/constants/math/float64-pinf';\nimport NINF from '@stdlib/constants/math/float64-ninf';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport createTooltip from './create_tooltip.js';\nimport './number.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:number-input' );\nconst uid = generateUID( 'number-input' );\n\n\n// MAIN //\n\n/**\n* A number input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the number to be assigned to\n* @property {number} value - number value (for controlled component)\n* @property {number} defaultValue - value indicating the default value of the input at startup\n* @property {boolean} disabled - boolean indicating whether the input is active or not\n* @property {number} min - number indicating the smallest possible value that may be inserted\n* @property {number} max - number indicating the maximum value that may be inserted\n* @property {(number|string)} step - number indicating the incremental changes when using the increment arrows\n* @property {boolean} inline - indicates whether the input is displayed inline\n* @property {string} legend - string indicating the text displayed next to the number input\n* @property {boolean} numbersOnly - controls whether only numbers are accepted\n* @property {string} tooltip - tooltip string (if not set, the tooltip is automatically generated)\n* @property {string} tooltipPlacement - direction of the tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} inputStyle - CSS inline styles for input element\n* @property {Function} onBlur - callback function to be invoked when using a blur method\n* @property {Function} onChange - callback function to be invoked when number input is changed\n* @property {Function} onKeyPress - callback function to be invoked when any key is entered\n* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down\n* @property {Function} onKeyUp - callback function to be invoked when key is released\n*/\nclass NumberInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.id = props.id || uid( props );\n\t\tthis.state = {\n\t\t\tvalue: props.value || (props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue),\n\t\t\ttooltip: props.tooltip || createTooltip( props ),\n\t\t\tprevProps: props\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tlet newState = {};\n\t\tconst { prevProps } = prevState;\n\t\tif ( nextProps.defaultValue !== prevProps.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t}\n\t\telse if ( nextProps.bind !== prevProps.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t}\n\t\tif ( nextProps.min !== prevProps.min || nextProps.max !== prevProps.max ) {\n\t\t\tnewState.tooltip = nextProps.tooltip || createTooltip( nextProps );\n\t\t}\n\t\telse if ( nextProps.tooltip && nextProps.tooltip !== prevState.tooltip ) {\n\t\t\tnewState.tooltip = nextProps.tooltip;\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\tdebug( 'Created new state from props...' );\n\t\t\tnewState.prevProps = nextProps;\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tdebug( 'Component did update...' );\n\t\tif ( this.props.bind ) {\n\t\t\tconst globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value && isNumber( this.state.value ) ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\thandleChange = ( event ) => {\n\t\tdebug( 'Handle change of input field...' );\n\t\tlet valid = event.target.validity.valid;\n\t\tlet value = event.target.value;\n\t\tthis.setState({\n\t\t\tvalue\n\t\t}, () => {\n\t\t\tif ( this.props.value ||\n\t\t\t\t(valid && value !== '' &&\n\t\t\t\tvalue !== '-' && value !== '.' && value !== '-.' )\n\t\t\t) {\n\t\t\t\tvalue = parseFloat( value );\n\t\t\t\tif ( isnan( value ) ) {\n\t\t\t\t\tvalue = '';\n\t\t\t\t}\n\t\t\t\tthis.props.onChange( value );\n\t\t\t\tif ( this.props.bind ) {\n\t\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tfinishChange = ( event ) => {\n\t\tconst { max, min, step } = this.props;\n\t\tdebug( 'Finished change...' );\n\t\tlet value = event.target.value;\n\t\tif ( contains( value, '/' ) ) {\n\t\t\tdebug( 'Encountered a fraction...' );\n\t\t\tlet vals = value.split( '/' );\n\t\t\tif ( vals[ 0 ] !== '' && vals[ 1 ] !== '' ) {\n\t\t\t\tvalue = parseFloat( vals[ 0 ]) / parseFloat( vals[ 1 ]);\n\t\t\t}\n\t\t}\n\t\tif ( isnan( value ) ) {\n\t\t\tvalue = '';\n\t\t}\n\t\telse if (\n\t\t\tvalue !== '' && value !== '-' &&\n\t\t\tvalue !== '.' && value !== '-.'\n\t\t) {\n\t\t\tvalue = parseFloat( value );\n\t\t}\n\t\tif ( value > max ) {\n\t\t\tvalue = max;\n\t\t}\n\t\telse if ( value < min ) {\n\t\t\tvalue = min;\n\t\t}\n\t\telse if (\n\t\t\tstep === 1.0 && value !== '' &&\n\t\t\tvalue !== '-' && value !== '.' && value !== '-.'\n\t\t) {\n\t\t\tvalue = value - value % this.props.step;\n\t\t}\n\t\tthis.props.onChange( value );\n\t\tthis.props.onBlur( value );\n\t\tif ( value !== this.state.value ) {\n\t\t\tthis.setState({\n\t\t\t\tvalue\n\t\t\t}, () => {\n\t\t\t\tif ( this.props.bind ) {\n\t\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tif ( this.props.value !== null ) {\n\t\t\tvalue = this.props.value;\n\t\t}\n\t\tif ( this.props.inline === true ) {\n\t\t\tconst input =\n\t\t\t\t<span className=\"input\" style={{ padding: '5px', ...this.props.style }}>\n\t\t\t\t\t{ this.props.legend ? <label htmlFor={this.id} > {this.props.legend} =  </label> : null }\n\t\t\t\t\t<input\n\t\t\t\t\t\tid={this.id}\n\t\t\t\t\t\ttype={this.props.numbersOnly ? 'number' : 'text'}\n\t\t\t\t\t\tname=\"input\"\n\t\t\t\t\t\tclassName=\"number-number-input\"\n\t\t\t\t\t\tdisabled={this.props.disabled}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tstep={this.props.step}\n\t\t\t\t\t\tmin={this.props.min}\n\t\t\t\t\t\tmax={this.props.max}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\twidth: '80px',\n\t\t\t\t\t\t\tpaddingLeft: '6px',\n\t\t\t\t\t\t\tmarginLeft: '3px',\n\t\t\t\t\t\t\t...this.props.inputStyle\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tonBlur={this.finishChange}\n\t\t\t\t\t\tonKeyPress={this.props.onKeyPress}\n\t\t\t\t\t\tonKeyDown={this.props.onKeyDown}\n\t\t\t\t\t\tonKeyUp={this.props.onKeyUp}\n\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t/>\n\t\t\t\t\t{ this.props.description ?\n\t\t\t\t\t\t<span>({this.props.description})</span> :\n\t\t\t\t\t\t<span />\n\t\t\t\t\t}\n\t\t\t\t</span>;\n\t\t\treturn this.props.disabled ?\n\t\t\t\tinput:\n\t\t\t\t<Tooltip id=\"number-input-tooltip-inline\" placement=\"top\" tooltip={this.state.tooltip} >\n\t\t\t\t\t{input}\n\t\t\t\t</Tooltip>;\n\t\t}\n\t\tlet input = <input\n\t\t\tid={this.id}\n\t\t\ttype={this.props.numbersOnly ? 'number' : 'text'}\n\t\t\tname=\"input\"\n\t\t\tclassName=\"number-number-input\"\n\t\t\tdisabled={this.props.disabled}\n\t\t\tvalue={value}\n\t\t\tstep={this.props.step}\n\t\t\tmin={this.props.min}\n\t\t\tmax={this.props.max}\n\t\t\tstyle={{\n\t\t\t\twidth: '80px',\n\t\t\t\tmarginLeft: '24px',\n\t\t\t\t...this.props.inputStyle\n\t\t\t}}\n\t\t\tonChange={this.handleChange}\n\t\t\tonBlur={this.finishChange}\n\t\t\tonKeyPress={this.props.onKeyPress}\n\t\t\tonKeyDown={this.props.onKeyDown}\n\t\t\tonKeyUp={this.props.onKeyUp}\n\t\t\tautoComplete=\"off\"\n\t\t/>;\n\t\treturn ( <div className=\"input\" style={{\n\t\t\tmarginBottom: '4px',\n\t\t\tmarginTop: '4px',\n\t\t\t...this.props.style\n\t\t}}>\n\t\t\t{ this.props.legend ?\n\t\t\t\t<span>\n\t\t\t\t\t<label htmlFor={this.id} >\n\t\t\t\t\t\t{isString( this.props.legend ) ?\n\t\t\t\t\t\t\tthis.props.legend+':' :\n\t\t\t\t\t\t\tthis.props.legend\n\t\t\t\t\t\t}\n\t\t\t\t\t</label>\n\t\t\t\t\t{ this.props.description ?\n\t\t\t\t\t\t<span> {this.props.description}</span> :\n\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t</span> : null\n\t\t\t}\n\t\t\t<Tooltip\n\t\t\t\tid=\"number-input-tooltip\" placement={this.props.tooltipPlacement}\n\t\t\t\ttooltip={this.state.tooltip}\n\t\t\t><span className=\"number-input-span\" >{input}</span></Tooltip>\n\t\t</div> );\n\t}\n}\n\n\n// PROPERTIES //\n\nNumberInput.defaultProps = {\n\tbind: '',\n\tdisabled: false,\n\tlegend: null,\n\tmin: NINF,\n\tmax: PINF,\n\tstep: 1,\n\tdefaultValue: 0,\n\tonBlur() {},\n\tonChange() {},\n\tonKeyDown() {},\n\tonKeyPress() {},\n\tonKeyUp() {},\n\tinline: false,\n\tnumbersOnly: true,\n\tstyle: {},\n\tinputStyle: {},\n\tvalue: null,\n\ttooltip: null,\n\ttooltipPlacement: 'left'\n};\n\nNumberInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmin: PropTypes.number,\n\tnumbersOnly: PropTypes.bool,\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\tstyle: PropTypes.object,\n\tinputStyle: PropTypes.object,\n\tvalue: PropTypes.number,\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'top', 'right', 'bottom', 'left' ])\n};\n\nNumberInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default NumberInput;\n","// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport { withTranslation } from 'react-i18next';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport isNull from '@stdlib/assert/is-null';\nimport hasOwnProperty from '@stdlib/assert/has-own-property';\nimport generateUID from '@isle-project/utils/uid';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport NumberInput from '@isle-project/components/input/number';\nimport SelectInput from '@isle-project/components/input/select';\nimport SliderInput from '@isle-project/components/input/slider';\nimport TextInput from '@isle-project/components/input/text';\nimport SessionContext from '@isle-project/session/context.js';\nimport { DASHBOARD_CLICK_GENERATE } from '@isle-project/constants/actions.js';\nimport { addResources } from '@isle-project/locales';\nimport './dashboard.css';\n\n\n// VARIABLES //\n\naddResources( 'Dashboard' );\nconst debug = logger( 'isle:dashboard' );\nconst uid = generateUID( 'dashboard' );\n\n\n// MAIN //\n\n/**\n* A dashboard for combining the handling of multiple child input fields.\n*\n* @property {(string|node)} title - card title\n* @property {string} description - dashboard description\n* @property {boolean} autoStart - if set to `true`, the `onGenerate` function is executed at startup with the default input values\n* @property {boolean} autoUpdate - controls whether the `onGenerate` function should be invoked automatically when one of the child input fields changes\n* @property {boolean} disabled - controls whether the dashboard shall be disabled\n* @property {string} label - button label\n* @property {number} maxWidth - maximum width of dashboard\n* @property {string} className - class name\n* @property {Object} style - CSS inline styles\n* @property {Function} onGenerate - function invoked when the button is clicked or one of the dashboard input values changes (if `autoUpdate` is set to `true`). The function is called with the values of the input fields, in the order in which they are placed in the dashboard\n*/\nclass Dashboard extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tconst initialState = {};\n\t\tthis.nArgs = 0;\n\n\t\tconst walk = ( children ) => {\n\t\t\tif ( !children ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tReact.Children.forEach( children, ( elem ) => {\n\t\t\t\tif ( isNull( elem ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif ( hasOwnProperty( elem.props, 'defaultValue' ) ) {\n\t\t\t\t\tinitialState[ this.nArgs ] = elem.props.defaultValue;\n\t\t\t\t\tthis.nArgs += 1;\n\t\t\t\t}\n\t\t\t\tif ( hasOwnProperty( elem.props, 'children' ) ) {\n\t\t\t\t\twalk( elem.props.children );\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\twalk( props.children );\n\t\tdebug( 'Initial state: %s', JSON.stringify( initialState ) );\n\t\tthis.id = props.id || uid( props );\n\t\tthis.state = initialState;\n\t}\n\n\tcomponentDidMount() {\n\t\tif ( this.props.autoStart ) {\n\t\t\tthis.handleClick();\n\t\t}\n\t}\n\n\thandleClick = () => {\n\t\tconst args = new Array( this.nArgs );\n\t\tfor ( let i = 0; i < this.nArgs; i++ ) {\n\t\t\targs[ i ] = this.state[ i ];\n\t\t}\n\t\tif ( !this.props.autoUpdate ) {\n\t\t\tconst session = this.context;\n\t\t\tsession.log({\n\t\t\t\tid: this.id,\n\t\t\t\ttype: DASHBOARD_CLICK_GENERATE,\n\t\t\t\tvalue: args\n\t\t\t});\n\t\t}\n\t\tthis.props.onGenerate( ...args );\n\t};\n\n\tgetCounter = () => {\n\t\tif ( this._counter === void 0 ) {\n\t\t\tthis._counter = 0;\n\t\t} else {\n\t\t\tthis._counter += 1;\n\t\t}\n\t\treturn this._counter;\n\t}\n\n\thandleFieldChange = ( fieldId, value ) => {\n\t\tdebug( `Setting ${fieldId} to ${value}` );\n\t\tconst newState = {};\n\t\tnewState[ fieldId ] = value;\n\t\tthis.setState( newState, () => {\n\t\t\tif ( this.props.autoUpdate ) {\n\t\t\t\tthis.handleClick();\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterChildren = ( children, level ) => {\n\t\tif ( !children ) {\n\t\t\treturn null;\n\t\t}\n\t\tdebug( `Registering ${React.Children.count(children)} children...` );\n\t\treturn React.Children.map( children,\n\t\t\t( child ) => {\n\t\t\t\tif ( React.isValidElement( child ) ) {\n\t\t\t\t\tconst newProps = {};\n\t\t\t\t\tlet newChildren = [];\n\t\t\t\t\tif (\n\t\t\t\t\t\tchild.type === CheckboxInput ||\n\t\t\t\t\t\tchild.type === NumberInput ||\n\t\t\t\t\t\tchild.type === SelectInput ||\n\t\t\t\t\t\tchild.type === SliderInput ||\n\t\t\t\t\t\tchild.type === TextInput ||\n\t\t\t\t\t\tchild.type.name === 'CheckboxInput' ||\n\t\t\t\t\t\tchild.type.name === 'NumberInput' ||\n\t\t\t\t\t\tchild.type.name === 'SelectInput' ||\n\t\t\t\t\t\tchild.type.name === 'SliderInput' ||\n\t\t\t\t\t\tchild.type.name === 'TextInput' ||\n\t\t\t\t\t\tchild.type.name === 'Input'\n\t\t\t\t\t) {\n\t\t\t\t\t\tdebug( 'Encountering an input element...' );\n\t\t\t\t\t\tconst idx = this.getCounter();\n\t\t\t\t\t\tnewProps.onChange = ( value ) => {\n\t\t\t\t\t\t\tthis.handleFieldChange( idx, value );\n\t\t\t\t\t\t\tchild.props.onChange( value );\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tif ( child.props && child.props.children ) {\n\t\t\t\t\t\tnewChildren = this.registerChildren( child.props.children );\n\t\t\t\t\t}\n\t\t\t\t\tdebug( 'Clone child element with new properties...' );\n\t\t\t\t\treturn React.cloneElement( child, newProps, ...newChildren );\n\t\t\t\t}\n\t\t\t\treturn child;\n\t\t\t}\n\t\t);\n\t}\n\n\trender() {\n\t\tthis._counter = void 0;\n\t\tthis._children = this.registerChildren( this.props.children );\n\t\treturn (\n\t\t\t<Card\n\t\t\t\tclassName={`dashboard ${this.props.className}`}\n\t\t\t\tstyle={{\n\t\t\t\t\tmaxWidth: this.props.maxWidth,\n\t\t\t\t\t...this.props.style\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{ this.props.title ?\n\t\t\t\t\t<Card.Header as=\"h4\">\n\t\t\t\t\t\t{this.props.title}\n\t\t\t\t\t</Card.Header>:\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t\t<Card.Body>\n\t\t\t\t\t<p>{this.props.description}</p>\n\t\t\t\t\t{this._children}\n\t\t\t\t\t{ !this.props.autoUpdate ?\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\t\t\tclassName=\"dashboard-button\"\n\t\t\t\t\t\t\tdisabled={this.props.disabled}\n\t\t\t\t\t\t\tonClick={this.handleClick}\n\t\t\t\t\t\t\tblock\n\t\t\t\t\t\t>{this.props.label || this.props.t('generate')}</Button> :\n\t\t\t\t\t\t<span />\n\t\t\t\t\t}\n\t\t\t\t</Card.Body>\n\t\t\t</Card>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nDashboard.defaultProps = {\n\tautoStart: true,\n\tautoUpdate: false,\n\tdescription: '',\n\tdisabled: false,\n\tlabel: null,\n\tmaxWidth: 600,\n\tclassName: '',\n\tstyle: {},\n\tonGenerate() {},\n\ttitle: ''\n};\n\nDashboard.propTypes = {\n\tautoStart: PropTypes.bool,\n\tautoUpdate: PropTypes.bool,\n\tdescription: PropTypes.string,\n\tdisabled: PropTypes.bool,\n\tlabel: PropTypes.string,\n\tmaxWidth: PropTypes.number,\n\tclassName: PropTypes.string,\n\tstyle: PropTypes.object,\n\tonGenerate: PropTypes.func,\n\ttitle: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t])\n};\n\nDashboard.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default withTranslation( 'Dashboard' )( Dashboard );\n","// MODULES //\n\nimport SliderInput from './main.js';\n\n\n// EXPORTS //\n\nexport default SliderInput;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport Badge from 'react-bootstrap/Badge';\nimport Input from '@isle-project/components/input/base';\nimport Tooltip from '@isle-project/components/tooltip';\nimport roundn from '@stdlib/math/base/special/roundn';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport PINF from '@stdlib/constants/math/float64-pinf';\nimport NINF from '@stdlib/constants/math/float64-ninf';\nimport SessionContext from '@isle-project/session/context.js';\nimport './slider.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:slider-input' );\n\n\n// FUNCTIONS //\n\nfunction createTooltip( props ) {\n\tlet tooltip = `Enter a${ props.step === 1 ? 'n integer' : ' number'} `;\n\tif ( props.max !== PINF && props.min !== NINF ) {\n\t\ttooltip += `between ${props.min} and ${props.max}:`;\n\t} else if ( props.min !== NINF ) {\n\t\ttooltip += `larger or equal to ${props.min}:`;\n\t} else if ( props.max !== PINF ) {\n\t\ttooltip += `smaller or equal to ${props.max}:`;\n\t} else {\n\t\ttooltip += ':';\n\t}\n\treturn tooltip;\n}\n\n\n// MAIN //\n\n/**\n* A slider input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} legend - caption of the input\n* @property {number} defaultValue - The starting value of the slider\n* @property {number} min - The minimum value of the slider\n* @property {number} max - The maximum value of the slider\n* @property {(number|string)} step - step size of the slider\n* @property {boolean} inline - controls whether to place the slider inline with text or outside\n* @property {number} precision - rounding of the input. The value will be rounded to have no more significant digits than the precision. For example, if one wishes to only use integers, a precision of 10 would be used, while if one wishes to round to the hundreds place, one would use a precision of 0.001\n* @property {boolean} disabled - controls whether the slider input is active or not. If set to true, the slider will be present on the screen, albeit grayed-out\n* @property {string} minLabel - label to be displayed to the left of slider instead of minimum value\n* @property {string} maxLabel - label to be displayed to the right of slider instead of maximum value\n* @property {boolean} hideTooltip - controls whether to hide tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} numberInputStyle - CSS inline styles for number input component\n* @property {Object} rangeInputStyle - CSS inline style for range input component\n* @property {Function} onChange - callback invoked with the new value when the slider value changes\n*/\nclass SliderInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.state = {\n\t\t\ttooltip: createTooltip( props ),\n\t\t\tvalue: props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue,\n\t\t\tprevProps: props\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tlet newState = {};\n\t\tconst { prevProps } = prevState;\n\t\tif ( nextProps.defaultValue !== prevProps.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t} else if ( nextProps.bind !== prevProps.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t}\n\t\tif ( nextProps.min !== prevProps.min || nextProps.max !== prevProps.max ) {\n\t\t\tnewState.tooltip = createTooltip( nextProps );\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\tnewState.prevProps = nextProps;\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif ( this.props.bind ) {\n\t\t\tlet globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tfinishChange = ( event ) => {\n\t\tdebug( 'Finalizing change...' );\n\t\tconst { max, min, step } = this.props;\n\t\tlet value = event.target.value;\n\t\tif ( value !== '' ) {\n\t\t\tvalue = parseFloat( value );\n\t\t}\n\t\tif ( value > max ) {\n\t\t\tvalue = max;\n\t\t}\n\t\telse if ( value < min ) {\n\t\t\tvalue = min;\n\t\t}\n\t\telse if ( step === 1.0 && value !== '' ) {\n\t\t\tvalue = value - value % this.props.step;\n\t\t}\n\t\tdebug( `Setting state value to: ${value}...` );\n\t\tif ( value !== this.state.value ) {\n\t\t\tthis.setState({\n\t\t\t\tvalue\n\t\t\t}, () => {\n\t\t\t\tthis.props.onChange( value );\n\t\t\t\tif ( this.props.bind ) {\n\t\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\thandleInputChange = ( event ) => {\n\t\tconst valid = event.target.validity.valid;\n\t\tlet value = event.target.value;\n\t\tdebug( `Input value changed to ${value}` );\n\t\tthis.setState({\n\t\t\tvalue\n\t\t}, () => {\n\t\t\tif ( valid && value !== '' ) {\n\t\t\t\tvalue = parseFloat( value );\n\t\t\t\tthis.props.onChange( value );\n\t\t\t\tif ( this.props.bind ) {\n\t\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tconst { legend, disabled, inline, min, max, precision, step, minLabel, maxLabel } = this.props;\n\t\tif ( value !== '' ) {\n\t\t\troundn( value, ( -1.0 )*precision );\n\t\t}\n\t\tconst rangeInput = <input\n\t\t\ttype=\"range\"\n\t\t\tclassName=\"slider-range-input\"\n\t\t\tmin={min}\n\t\t\tmax={max}\n\t\t\tstep={step}\n\t\t\tvalue={value}\n\t\t\tdisabled={disabled}\n\t\t\tonChange={this.handleInputChange}\n\t\t\tstyle={{\n\t\t\t\twidth: '160px',\n\t\t\t\tfloat: inline ? 'none' : 'left',\n\t\t\t\tdisplay: inline ? 'inline' : 'block',\n\t\t\t\t...this.props.rangeInputStyle\n\t\t\t}}\n\t\t/>;\n\t\tconst numberInput = <input\n\t\t\ttype=\"number\"\n\t\t\tname=\"input\"\n\t\t\tclassName=\"slider-number-input\"\n\t\t\tdisabled={disabled}\n\t\t\tmin={min}\n\t\t\tmax={max}\n\t\t\tstep={step}\n\t\t\tvalue={value}\n\t\t\tonChange={this.handleInputChange}\n\t\t\tonBlur={this.finishChange}\n\t\t\tstyle={{\n\t\t\t\tfloat: inline ? 'none' : 'right',\n\t\t\t\tmarginTop: legend && !inline ? -22 : 0,\n\t\t\t\t...this.props.numberInputStyle\n\t\t\t}}\n\t\t\tautoComplete=\"off\"\n\t\t/>;\n\n\t\tif ( inline ) {\n\t\t\treturn (\n\t\t\t\t<span className=\"input\" style={{\n\t\t\t\t\tpadding: '5px',\n\t\t\t\t\topacity: disabled ? 0.2 : 1.0,\n\t\t\t\t\t...this.props.style\n\t\t\t\t}}>\n\t\t\t\t\t{ legend ?\n\t\t\t\t\t\t<label>{legend}:</label> :\n\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t\t<span className=\"slider-range-wrapper\" >\n\t\t\t\t\t\t<Badge variant=\"secondary\" >{minLabel || min}</Badge>\n\t\t\t\t\t\t{rangeInput}\n\t\t\t\t\t\t<Badge variant=\"secondary\" >{maxLabel || max}</Badge>\n\t\t\t\t\t</span>\n\t\t\t\t\t{numberInput}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Tooltip\n\t\t\t\tid=\"sliderTooltip\"\n\t\t\t\tplacement=\"top\"\n\t\t\t\tshow={!this.props.hideTooltip}\n\t\t\t\ttooltip={disabled ? 'The slider input is disabled right now.' : this.state.tooltip}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"slider-outer-div input\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\topacity: disabled ? 0.2 : 1.0,\n\t\t\t\t\t\t...this.props.style\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{ legend ?\n\t\t\t\t\t\t<label>{legend}:</label> :\n\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t\t<br />\n\t\t\t\t\t<span className=\"slider-range-wrapper\" >\n\t\t\t\t\t\t<Badge variant=\"secondary\" style={{ float: 'left' }} >{minLabel || min}</Badge>\n\t\t\t\t\t\t{rangeInput}\n\t\t\t\t\t\t<Badge variant=\"secondary\" style={{ float: 'left' }} >{maxLabel || max}</Badge>\n\t\t\t\t\t</span>\n\t\t\t\t\t{numberInput}\n\t\t\t\t\t<br />\n\t\t\t\t</div>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nSliderInput.defaultProps = {\n\tinline: false,\n\tlegend: null,\n\tmin: 0,\n\tminLabel: null,\n\tmax: 100,\n\tmaxLabel: null,\n\tstep: 1,\n\tdefaultValue: 10,\n\tonChange() {},\n\tprecision: 10,\n\tdisabled: false,\n\thideTooltip: false,\n\tstyle: {},\n\tnumberInputStyle: {},\n\trangeInputStyle: {}\n};\n\nSliderInput.propTypes = {\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmaxLabel: PropTypes.string,\n\tmin: PropTypes.number,\n\tminLabel: PropTypes.string,\n\tonChange: PropTypes.func,\n\tprecision: PropTypes.number,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\thideTooltip: PropTypes.bool,\n\tstyle: PropTypes.object,\n\tnumberInputStyle: PropTypes.object,\n\trangeInputStyle: PropTypes.object\n};\n\nSliderInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default SliderInput;\n"],"sourceRoot":""}