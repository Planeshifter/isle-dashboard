{"version":3,"sources":["../node_modules/@isle-project/components/dashboard/main.js","../node_modules/@isle-project/components/input/slider/main.js","../node_modules/@isle-project/components/input/slider/index.js"],"names":["addResources","debug","logger","uid","generateUID","Dashboard","props","args","Array","nArgs","i","state","autoUpdate","context","log","id","type","DASHBOARD_CLICK_GENERATE","value","onGenerate","_counter","fieldId","newState","setState","handleClick","children","level","React","child","newProps","newChildren","CheckboxInput","NumberInput","SelectInput","SliderInput","TextInput","name","idx","getCounter","onChange","handleFieldChange","registerChildren","initialState","walk","elem","isNull","hasOwnProperty","defaultValue","JSON","stringify","this","autoStart","_children","Card","className","style","maxWidth","title","as","description","Button","variant","disabled","onClick","block","label","t","Component","defaultProps","contextType","SessionContext","withTranslation","createTooltip","tooltip","step","max","PINF","min","NINF","event","target","parseFloat","bind","global","lesson","valid","validity","session","prevProps","globalVal","legend","inline","precision","minLabel","maxLabel","roundn","rangeInput","handleInputChange","width","float","display","rangeInputStyle","numberInput","onBlur","finishChange","marginTop","numberInputStyle","autoComplete","padding","opacity","Badge","placement","show","hideTooltip","nextProps","prevState","isEmptyObject","Input","propTypes","PropTypes"],"mappings":"2bAwBAA,E,SAAAA,IAAc,aACd,IAAMC,EAAQC,IAAQ,kBAChBC,GAAMC,OAAa,aAmBnBC,E,0CACL,WAAaC,GAAS,IAAD,kBACpB,cAAOA,IADa,iCAmCP,WAEb,IAFoB,IAAD,EACbC,EAAO,IAAIC,MAAO,EAAKC,OACnBC,EAAI,EAAGA,EAAI,EAAKD,MAAOC,IAChCH,EAAMG,GAAM,EAAKC,MAAOD,GAEnB,EAAKJ,MAAMM,YACA,EAAKC,QACbC,IAAI,CACXC,GAAI,EAAKA,GACTC,KAAMC,KACNC,MAAOX,KAGT,IAAKD,OAAMa,WAAX,QAA0BZ,OAhDN,gCAmDR,WAMZ,YALuB,IAAlB,EAAKa,SACT,EAAKA,SAAW,EAEhB,EAAKA,UAAY,EAEX,EAAKA,aAzDQ,uCA4DD,SAAEC,EAASH,GAC9BjB,EAAM,WAAD,OAAaoB,EAAb,eAA2BH,IAChC,IAAMI,EAAW,GACjBA,EAAUD,GAAYH,EACtB,EAAKK,SAAUD,GAAU,WACnB,EAAKhB,MAAMM,YACf,EAAKY,qBAlEa,sCAuEF,SAAEC,EAAUC,GAC9B,OAAMD,GAGNxB,EAAM,eAAD,OAAiB0B,iBAAqBF,GAAtC,iBACEE,eAAoBF,GAC1B,SAAEG,GACD,GAAKD,iBAAsBC,GAAU,CACpC,IAAMC,EAAW,GACbC,EAAc,GAClB,GACCF,EAAMZ,OAASe,KACfH,EAAMZ,OAASgB,KACfJ,EAAMZ,OAASiB,KACfL,EAAMZ,OAASkB,KACfN,EAAMZ,OAASmB,KACK,kBAApBP,EAAMZ,KAAKoB,MACS,gBAApBR,EAAMZ,KAAKoB,MACS,gBAApBR,EAAMZ,KAAKoB,MACS,gBAApBR,EAAMZ,KAAKoB,MACS,cAApBR,EAAMZ,KAAKoB,MACS,UAApBR,EAAMZ,KAAKoB,KACV,CACDnC,EAAO,oCACP,IAAMoC,EAAM,EAAKC,aACjBT,EAASU,SAAW,SAAErB,GACrB,EAAKsB,kBAAmBH,EAAKnB,GAC7BU,EAAMtB,MAAMiC,SAAUrB,IAOxB,OAJKU,EAAMtB,OAASsB,EAAMtB,MAAMmB,WAC/BK,EAAc,EAAKW,iBAAkBb,EAAMtB,MAAMmB,WAElDxB,EAAO,8CACA0B,uBAAK,CAAeC,EAAOC,GAAtB,eAAmCC,KAEhD,OAAOF,MAlCD,QAtER,IAAMc,EAAe,GACrB,EAAKjC,MAAQ,EAJO,OAMP,SAAPkC,EAASlB,GACRA,GAGNE,mBAAwBF,GAAU,SAAEmB,GAC9BC,IAAQD,KAGRE,IAAgBF,EAAKtC,MAAO,kBAChCoC,EAAc,EAAKjC,OAAUmC,EAAKtC,MAAMyC,aACxC,EAAKtC,OAAS,GAEVqC,IAAgBF,EAAKtC,MAAO,aAChCqC,EAAMC,EAAKtC,MAAMmB,cAIpBkB,CAAMrC,EAAMmB,UACZxB,EAAO,oBAAqB+C,KAAKC,UAAWP,IAC5C,EAAK3B,GAAKT,EAAMS,IAAMZ,EAAKG,GAC3B,EAAKK,MAAQ+B,EA1BO,E,gDA6BrB,WACMQ,KAAK5C,MAAM6C,WACfD,KAAK1B,gB,oBAiFP,WAGC,OAFA0B,KAAK9B,cAAW,EAChB8B,KAAKE,UAAYF,KAAKT,iBAAkBS,KAAK5C,MAAMmB,UAElD,gBAAC4B,EAAA,EAAD,CACCC,UAAS,oBAAeJ,KAAK5C,MAAMgD,WACnCC,OAAK,QACJC,SAAUN,KAAK5C,MAAMkD,UAClBN,KAAK5C,MAAMiD,QAGbL,KAAK5C,MAAMmD,MACZ,gBAACJ,EAAA,SAAD,CAAaK,GAAG,MACdR,KAAK5C,MAAMmD,OAEb,KAED,gBAACJ,EAAA,OAAD,KACC,yBAAIH,KAAK5C,MAAMqD,aACdT,KAAKE,UACHF,KAAK5C,MAAMM,WAQb,6BAPA,gBAACgD,EAAA,EAAD,CACCC,QAAQ,UACRP,UAAU,mBACVQ,SAAUZ,KAAK5C,MAAMwD,SACrBC,QAASb,KAAK1B,YACdwC,OAAK,GACJd,KAAK5C,MAAM2D,OAASf,KAAK5C,MAAM4D,EAAE,mB,GA5IjBC,aAwJxB9D,EAAU+D,aAAe,CACxBjB,WAAW,EACXvC,YAAY,EACZ+C,YAAa,GACbG,UAAU,EACVG,MAAO,KACPT,SAAU,IACVF,UAAW,GACXC,MAAO,GACPpC,WATwB,aAUxBsC,MAAO,IAmBRpD,EAAUgE,YAAcC,IAKxB,OAAeC,OAAiB,YAAhC,CAA+ClE,I,gUCrNzCJ,EAAQC,IAAQ,qBAKtB,SAASsE,EAAelE,GACvB,IAAImE,EAAO,iBAA6B,IAAfnE,EAAMoE,KAAa,YAAc,UAA/C,KAUX,OATKpE,EAAMqE,MAAQC,KAAQtE,EAAMuE,MAAQC,IACxCL,GAAO,kBAAenE,EAAMuE,IAArB,gBAAgCvE,EAAMqE,IAAtC,KACIrE,EAAMuE,MAAQC,IACzBL,GAAO,6BAA0BnE,EAAMuE,IAAhC,KACIvE,EAAMqE,MAAQC,IACzBH,GAAO,8BAA2BnE,EAAMqE,IAAjC,KAEPF,GAAW,IAELA,E,IAyBFvC,E,0CACL,WAAa5B,EAAOO,GAAW,IAAD,kBAC7B,cAAOP,IADsB,kCA0Cf,SAAEyE,GAChB9E,EAAO,wBACP,MAA2B,EAAKK,MAAxBqE,EAAR,EAAQA,IAAKE,EAAb,EAAaA,IAAKH,EAAlB,EAAkBA,KACdxD,EAAQ6D,EAAMC,OAAO9D,MACV,KAAVA,IACJA,EAAQ+D,WAAY/D,IAEhBA,EAAQyD,EACZzD,EAAQyD,EAECzD,EAAQ2D,EACjB3D,EAAQ2D,EAEU,IAATH,GAA0B,KAAVxD,IACzBA,GAAgBA,EAAQ,EAAKZ,MAAMoE,MAEpCzE,EAAM,2BAAD,OAA6BiB,EAA7B,QACAA,IAAU,EAAKP,MAAMO,OACzB,EAAKK,SAAS,CACbL,UACE,WACF,EAAKZ,MAAMiC,SAAUrB,GAChB,EAAKZ,MAAM4E,MACfC,IAAOC,OAAO7D,UAAd,UACG,EAAKjB,MAAM4E,KAAQhE,WAlEI,uCAyEV,SAAE6D,GACrB,IAAMM,EAAQN,EAAMC,OAAOM,SAASD,MAChCnE,EAAQ6D,EAAMC,OAAO9D,MACzBjB,EAAM,0BAAD,OAA4BiB,IACjC,EAAKK,SAAS,CACbL,UACE,WACGmE,GAAmB,KAAVnE,GACbA,EAAQ+D,WAAY/D,GACpB,EAAKZ,MAAMiC,SAAUrB,GAChB,EAAKZ,MAAM4E,MACfC,IAAOC,OAAO7D,UAAd,UACG,EAAKjB,MAAM4E,KAAQhE,KAGZ,EAAKZ,MAAM4E,MACtBC,IAAOC,OAAO7D,UAAd,UACG,EAAKjB,MAAM4E,KAAQhE,UAvFxB,IAAMqE,EAAU1E,EAHa,OAI7B,EAAKF,MAAQ,CACZ8D,QAASD,EAAelE,GACxBY,MAAOZ,EAAM4E,MAAQK,EAAQ5E,MAC5B4E,EAAQ5E,MAAOL,EAAM4E,MACrB5E,EAAMyC,aACPyC,UAAWlF,GATiB,E,iDA+B9B,WACC,GAAK4C,KAAK5C,MAAM4E,KAAO,CACtB,IAAIO,EAAYN,IAAOC,OAAOzE,MAAOuC,KAAK5C,MAAM4E,MAC3CO,IAAcvC,KAAKvC,MAAMO,OAC7BgC,KAAK3B,SAAS,CACbL,MAAOuE,O,oBA4DX,WACC,IAAMvE,EAAUgC,KAAKvC,MAAfO,MACN,EAAoFgC,KAAK5C,MAAjFoF,EAAR,EAAQA,OAAQ5B,EAAhB,EAAgBA,SAAU6B,EAA1B,EAA0BA,OAAQd,EAAlC,EAAkCA,IAAKF,EAAvC,EAAuCA,IAAKiB,EAA5C,EAA4CA,UAAWlB,EAAvD,EAAuDA,KAAMmB,EAA7D,EAA6DA,SAAUC,EAAvE,EAAuEA,SACxD,KAAV5E,GACJ6E,IAAQ7E,GAAU,EAAM0E,GAEzB,IAAMI,EAAa,yBAClBhF,KAAK,QACLsC,UAAU,qBACVuB,IAAKA,EACLF,IAAKA,EACLD,KAAMA,EACNxD,MAAOA,EACP4C,SAAUA,EACVvB,SAAUW,KAAK+C,kBACf1C,OAAK,QACJ2C,MAAO,QACPC,MAAOR,EAAS,OAAS,OACzBS,QAAST,EAAS,SAAW,SAC1BzC,KAAK5C,MAAM+F,mBAGVC,EAAc,yBACnBtF,KAAK,SACLoB,KAAK,QACLkB,UAAU,sBACVQ,SAAUA,EACVe,IAAKA,EACLF,IAAKA,EACLD,KAAMA,EACNxD,MAAOA,EACPqB,SAAUW,KAAK+C,kBACfM,OAAQrD,KAAKsD,aACbjD,OAAK,QACJ4C,MAAOR,EAAS,OAAS,QACzBc,UAAWf,IAAWC,GAAU,GAAK,GAClCzC,KAAK5C,MAAMoG,kBAEfC,aAAa,QAGd,OAAKhB,EAEH,wBAAMrC,UAAU,QAAQC,OAAK,QAC5BqD,QAAS,MACTC,QAAS/C,EAAW,GAAM,GACvBZ,KAAK5C,MAAMiD,QAEZmC,EACD,6BAAQA,EAAR,KACA,KAED,wBAAMpC,UAAU,wBACf,gBAACwD,EAAA,EAAD,CAAOjD,QAAQ,aAAcgC,GAAYhB,GACxCmB,EACD,gBAACc,EAAA,EAAD,CAAOjD,QAAQ,aAAciC,GAAYnB,IAEzC2B,GAKH,gBAAC,IAAD,CACCvF,GAAG,gBACHgG,UAAU,MACVC,MAAO9D,KAAK5C,MAAM2G,YAClBxC,QAASX,EAAW,0CAA4CZ,KAAKvC,MAAM8D,SAE3E,uBACCnB,UAAU,yBACVC,OAAK,QACJsD,QAAS/C,EAAW,GAAM,GACvBZ,KAAK5C,MAAMiD,QAGbmC,EACD,6BAAQA,EAAR,KACA,KAED,2BACA,wBAAMpC,UAAU,wBACf,gBAACwD,EAAA,EAAD,CAAOjD,QAAQ,YAAYN,MAAO,CAAE4C,MAAO,SAAYN,GAAYhB,GAClEmB,EACD,gBAACc,EAAA,EAAD,CAAOjD,QAAQ,YAAYN,MAAO,CAAE4C,MAAO,SAAYL,GAAYnB,IAEnE2B,EACD,gC,uCAzKJ,SAAiCY,EAAWC,GAC3C,IAAI7F,EAAW,GACPkE,EAAc2B,EAAd3B,UASR,OARK0B,EAAUnE,eAAiByC,EAAUzC,aACzCzB,EAASJ,MAAQgG,EAAUnE,aAChBmE,EAAUhC,OAASM,EAAUN,OACxC5D,EAASJ,MAAQiE,IAAOC,OAAOzE,MAAOuG,EAAUhC,OAE5CgC,EAAUrC,MAAQW,EAAUX,KAAOqC,EAAUvC,MAAQa,EAAUb,MACnErD,EAASmD,QAAUD,EAAe0C,IAE7BE,IAAe9F,GAId,MAHNA,EAASkE,UAAY0B,EACd5F,O,GA3BgB+F,KAiM1BnF,EAAYkC,aAAe,CAC1BuB,QAAQ,EACRD,OAAQ,KACRb,IAAK,EACLgB,SAAU,KACVlB,IAAK,IACLmB,SAAU,KACVpB,KAAM,EACN3B,aAAc,GACdR,SAT0B,aAU1BqD,UAAW,GACX9B,UAAU,EACVmD,aAAa,EACb1D,MAAO,GACPmD,iBAAkB,GAClBL,gBAAiB,IAGlBnE,EAAYoF,UAAY,CACvBvE,aAAcwE,WACdzD,SAAUyD,SACV5B,OAAQ4B,SACR7B,OAAQ6B,cAAoB,CAC3BA,WACAA,WAED5C,IAAK4C,WACLzB,SAAUyB,WACV1C,IAAK0C,WACL1B,SAAU0B,WACVhF,SAAUgF,SACV3B,UAAW2B,WACX7C,KAAM6C,cAAoB,CACzBA,WACAA,aAEDN,YAAaM,SACbhE,MAAOgE,WACPb,iBAAkBa,WAClBlB,gBAAiBkB,YAGlBrF,EAAYmC,YAAcC,IAK1B,ICpSA,EDoSA","file":"static/js/Dashboard.dc58c011.chunk.js","sourcesContent":["// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport { withTranslation } from 'react-i18next';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport isNull from '@stdlib/assert/is-null';\nimport hasOwnProperty from '@stdlib/assert/has-own-property';\nimport generateUID from '@isle-project/utils/uid';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport NumberInput from '@isle-project/components/input/number';\nimport SelectInput from '@isle-project/components/input/select';\nimport SliderInput from '@isle-project/components/input/slider';\nimport TextInput from '@isle-project/components/input/text';\nimport SessionContext from '@isle-project/session/context.js';\nimport { DASHBOARD_CLICK_GENERATE } from '@isle-project/constants/actions.js';\nimport { addResources } from '@isle-project/locales';\nimport './dashboard.css';\n\n\n// VARIABLES //\n\naddResources( 'Dashboard' );\nconst debug = logger( 'isle:dashboard' );\nconst uid = generateUID( 'dashboard' );\n\n\n// MAIN //\n\n/**\n* A dashboard for combining the handling of multiple child input fields.\n*\n* @property {(string|node)} title - card title\n* @property {string} description - dashboard description\n* @property {boolean} autoStart - if set to `true`, the `onGenerate` function is executed at startup with the default input values\n* @property {boolean} autoUpdate - controls whether the `onGenerate` function should be invoked automatically when one of the child input fields changes\n* @property {boolean} disabled - controls whether the dashboard shall be disabled\n* @property {string} label - button label\n* @property {number} maxWidth - maximum width of dashboard\n* @property {string} className - class name\n* @property {Object} style - CSS inline styles\n* @property {Function} onGenerate - function invoked when the button is clicked or one of the dashboard input values changes (if `autoUpdate` is set to `true`). The function is called with the values of the input fields, in the order in which they are placed in the dashboard\n*/\nclass Dashboard extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tconst initialState = {};\n\t\tthis.nArgs = 0;\n\n\t\tconst walk = ( children ) => {\n\t\t\tif ( !children ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tReact.Children.forEach( children, ( elem ) => {\n\t\t\t\tif ( isNull( elem ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif ( hasOwnProperty( elem.props, 'defaultValue' ) ) {\n\t\t\t\t\tinitialState[ this.nArgs ] = elem.props.defaultValue;\n\t\t\t\t\tthis.nArgs += 1;\n\t\t\t\t}\n\t\t\t\tif ( hasOwnProperty( elem.props, 'children' ) ) {\n\t\t\t\t\twalk( elem.props.children );\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\twalk( props.children );\n\t\tdebug( 'Initial state: %s', JSON.stringify( initialState ) );\n\t\tthis.id = props.id || uid( props );\n\t\tthis.state = initialState;\n\t}\n\n\tcomponentDidMount() {\n\t\tif ( this.props.autoStart ) {\n\t\t\tthis.handleClick();\n\t\t}\n\t}\n\n\thandleClick = () => {\n\t\tconst args = new Array( this.nArgs );\n\t\tfor ( let i = 0; i < this.nArgs; i++ ) {\n\t\t\targs[ i ] = this.state[ i ];\n\t\t}\n\t\tif ( !this.props.autoUpdate ) {\n\t\t\tconst session = this.context;\n\t\t\tsession.log({\n\t\t\t\tid: this.id,\n\t\t\t\ttype: DASHBOARD_CLICK_GENERATE,\n\t\t\t\tvalue: args\n\t\t\t});\n\t\t}\n\t\tthis.props.onGenerate( ...args );\n\t};\n\n\tgetCounter = () => {\n\t\tif ( this._counter === void 0 ) {\n\t\t\tthis._counter = 0;\n\t\t} else {\n\t\t\tthis._counter += 1;\n\t\t}\n\t\treturn this._counter;\n\t}\n\n\thandleFieldChange = ( fieldId, value ) => {\n\t\tdebug( `Setting ${fieldId} to ${value}` );\n\t\tconst newState = {};\n\t\tnewState[ fieldId ] = value;\n\t\tthis.setState( newState, () => {\n\t\t\tif ( this.props.autoUpdate ) {\n\t\t\t\tthis.handleClick();\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterChildren = ( children, level ) => {\n\t\tif ( !children ) {\n\t\t\treturn null;\n\t\t}\n\t\tdebug( `Registering ${React.Children.count(children)} children...` );\n\t\treturn React.Children.map( children,\n\t\t\t( child ) => {\n\t\t\t\tif ( React.isValidElement( child ) ) {\n\t\t\t\t\tconst newProps = {};\n\t\t\t\t\tlet newChildren = [];\n\t\t\t\t\tif (\n\t\t\t\t\t\tchild.type === CheckboxInput ||\n\t\t\t\t\t\tchild.type === NumberInput ||\n\t\t\t\t\t\tchild.type === SelectInput ||\n\t\t\t\t\t\tchild.type === SliderInput ||\n\t\t\t\t\t\tchild.type === TextInput ||\n\t\t\t\t\t\tchild.type.name === 'CheckboxInput' ||\n\t\t\t\t\t\tchild.type.name === 'NumberInput' ||\n\t\t\t\t\t\tchild.type.name === 'SelectInput' ||\n\t\t\t\t\t\tchild.type.name === 'SliderInput' ||\n\t\t\t\t\t\tchild.type.name === 'TextInput' ||\n\t\t\t\t\t\tchild.type.name === 'Input'\n\t\t\t\t\t) {\n\t\t\t\t\t\tdebug( 'Encountering an input element...' );\n\t\t\t\t\t\tconst idx = this.getCounter();\n\t\t\t\t\t\tnewProps.onChange = ( value ) => {\n\t\t\t\t\t\t\tthis.handleFieldChange( idx, value );\n\t\t\t\t\t\t\tchild.props.onChange( value );\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tif ( child.props && child.props.children ) {\n\t\t\t\t\t\tnewChildren = this.registerChildren( child.props.children );\n\t\t\t\t\t}\n\t\t\t\t\tdebug( 'Clone child element with new properties...' );\n\t\t\t\t\treturn React.cloneElement( child, newProps, ...newChildren );\n\t\t\t\t}\n\t\t\t\treturn child;\n\t\t\t}\n\t\t);\n\t}\n\n\trender() {\n\t\tthis._counter = void 0;\n\t\tthis._children = this.registerChildren( this.props.children );\n\t\treturn (\n\t\t\t<Card\n\t\t\t\tclassName={`dashboard ${this.props.className}`}\n\t\t\t\tstyle={{\n\t\t\t\t\tmaxWidth: this.props.maxWidth,\n\t\t\t\t\t...this.props.style\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{ this.props.title ?\n\t\t\t\t\t<Card.Header as=\"h4\">\n\t\t\t\t\t\t{this.props.title}\n\t\t\t\t\t</Card.Header>:\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t\t<Card.Body>\n\t\t\t\t\t<p>{this.props.description}</p>\n\t\t\t\t\t{this._children}\n\t\t\t\t\t{ !this.props.autoUpdate ?\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\t\t\tclassName=\"dashboard-button\"\n\t\t\t\t\t\t\tdisabled={this.props.disabled}\n\t\t\t\t\t\t\tonClick={this.handleClick}\n\t\t\t\t\t\t\tblock\n\t\t\t\t\t\t>{this.props.label || this.props.t('generate')}</Button> :\n\t\t\t\t\t\t<span />\n\t\t\t\t\t}\n\t\t\t\t</Card.Body>\n\t\t\t</Card>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nDashboard.defaultProps = {\n\tautoStart: true,\n\tautoUpdate: false,\n\tdescription: '',\n\tdisabled: false,\n\tlabel: null,\n\tmaxWidth: 600,\n\tclassName: '',\n\tstyle: {},\n\tonGenerate() {},\n\ttitle: ''\n};\n\nDashboard.propTypes = {\n\tautoStart: PropTypes.bool,\n\tautoUpdate: PropTypes.bool,\n\tdescription: PropTypes.string,\n\tdisabled: PropTypes.bool,\n\tlabel: PropTypes.string,\n\tmaxWidth: PropTypes.number,\n\tclassName: PropTypes.string,\n\tstyle: PropTypes.object,\n\tonGenerate: PropTypes.func,\n\ttitle: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t])\n};\n\nDashboard.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default withTranslation( 'Dashboard' )( Dashboard );\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport Badge from 'react-bootstrap/Badge';\nimport Input from '@isle-project/components/input/base';\nimport Tooltip from '@isle-project/components/tooltip';\nimport roundn from '@stdlib/math/base/special/roundn';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport PINF from '@stdlib/constants/math/float64-pinf';\nimport NINF from '@stdlib/constants/math/float64-ninf';\nimport SessionContext from '@isle-project/session/context.js';\nimport './slider.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:slider-input' );\n\n\n// FUNCTIONS //\n\nfunction createTooltip( props ) {\n\tlet tooltip = `Enter a${ props.step === 1 ? 'n integer' : ' number'} `;\n\tif ( props.max !== PINF && props.min !== NINF ) {\n\t\ttooltip += `between ${props.min} and ${props.max}:`;\n\t} else if ( props.min !== NINF ) {\n\t\ttooltip += `larger or equal to ${props.min}:`;\n\t} else if ( props.max !== PINF ) {\n\t\ttooltip += `smaller or equal to ${props.max}:`;\n\t} else {\n\t\ttooltip += ':';\n\t}\n\treturn tooltip;\n}\n\n\n// MAIN //\n\n/**\n* A slider input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} legend - caption of the input\n* @property {number} defaultValue - The starting value of the slider\n* @property {number} min - The minimum value of the slider\n* @property {number} max - The maximum value of the slider\n* @property {(number|string)} step - step size of the slider\n* @property {boolean} inline - controls whether to place the slider inline with text or outside\n* @property {number} precision - rounding of the input. The value will be rounded to have no more significant digits than the precision. For example, if one wishes to only use integers, a precision of 10 would be used, while if one wishes to round to the hundreds place, one would use a precision of 0.001\n* @property {boolean} disabled - controls whether the slider input is active or not. If set to true, the slider will be present on the screen, albeit grayed-out\n* @property {string} minLabel - label to be displayed to the left of slider instead of minimum value\n* @property {string} maxLabel - label to be displayed to the right of slider instead of maximum value\n* @property {boolean} hideTooltip - controls whether to hide tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} numberInputStyle - CSS inline styles for number input component\n* @property {Object} rangeInputStyle - CSS inline style for range input component\n* @property {Function} onChange - callback invoked with the new value when the slider value changes\n*/\nclass SliderInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.state = {\n\t\t\ttooltip: createTooltip( props ),\n\t\t\tvalue: props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue,\n\t\t\tprevProps: props\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tlet newState = {};\n\t\tconst { prevProps } = prevState;\n\t\tif ( nextProps.defaultValue !== prevProps.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t} else if ( nextProps.bind !== prevProps.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t}\n\t\tif ( nextProps.min !== prevProps.min || nextProps.max !== prevProps.max ) {\n\t\t\tnewState.tooltip = createTooltip( nextProps );\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\tnewState.prevProps = nextProps;\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif ( this.props.bind ) {\n\t\t\tlet globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tfinishChange = ( event ) => {\n\t\tdebug( 'Finalizing change...' );\n\t\tconst { max, min, step } = this.props;\n\t\tlet value = event.target.value;\n\t\tif ( value !== '' ) {\n\t\t\tvalue = parseFloat( value );\n\t\t}\n\t\tif ( value > max ) {\n\t\t\tvalue = max;\n\t\t}\n\t\telse if ( value < min ) {\n\t\t\tvalue = min;\n\t\t}\n\t\telse if ( step === 1.0 && value !== '' ) {\n\t\t\tvalue = value - value % this.props.step;\n\t\t}\n\t\tdebug( `Setting state value to: ${value}...` );\n\t\tif ( value !== this.state.value ) {\n\t\t\tthis.setState({\n\t\t\t\tvalue\n\t\t\t}, () => {\n\t\t\t\tthis.props.onChange( value );\n\t\t\t\tif ( this.props.bind ) {\n\t\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\thandleInputChange = ( event ) => {\n\t\tconst valid = event.target.validity.valid;\n\t\tlet value = event.target.value;\n\t\tdebug( `Input value changed to ${value}` );\n\t\tthis.setState({\n\t\t\tvalue\n\t\t}, () => {\n\t\t\tif ( valid && value !== '' ) {\n\t\t\t\tvalue = parseFloat( value );\n\t\t\t\tthis.props.onChange( value );\n\t\t\t\tif ( this.props.bind ) {\n\t\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tconst { legend, disabled, inline, min, max, precision, step, minLabel, maxLabel } = this.props;\n\t\tif ( value !== '' ) {\n\t\t\troundn( value, ( -1.0 )*precision );\n\t\t}\n\t\tconst rangeInput = <input\n\t\t\ttype=\"range\"\n\t\t\tclassName=\"slider-range-input\"\n\t\t\tmin={min}\n\t\t\tmax={max}\n\t\t\tstep={step}\n\t\t\tvalue={value}\n\t\t\tdisabled={disabled}\n\t\t\tonChange={this.handleInputChange}\n\t\t\tstyle={{\n\t\t\t\twidth: '160px',\n\t\t\t\tfloat: inline ? 'none' : 'left',\n\t\t\t\tdisplay: inline ? 'inline' : 'block',\n\t\t\t\t...this.props.rangeInputStyle\n\t\t\t}}\n\t\t/>;\n\t\tconst numberInput = <input\n\t\t\ttype=\"number\"\n\t\t\tname=\"input\"\n\t\t\tclassName=\"slider-number-input\"\n\t\t\tdisabled={disabled}\n\t\t\tmin={min}\n\t\t\tmax={max}\n\t\t\tstep={step}\n\t\t\tvalue={value}\n\t\t\tonChange={this.handleInputChange}\n\t\t\tonBlur={this.finishChange}\n\t\t\tstyle={{\n\t\t\t\tfloat: inline ? 'none' : 'right',\n\t\t\t\tmarginTop: legend && !inline ? -22 : 0,\n\t\t\t\t...this.props.numberInputStyle\n\t\t\t}}\n\t\t\tautoComplete=\"off\"\n\t\t/>;\n\n\t\tif ( inline ) {\n\t\t\treturn (\n\t\t\t\t<span className=\"input\" style={{\n\t\t\t\t\tpadding: '5px',\n\t\t\t\t\topacity: disabled ? 0.2 : 1.0,\n\t\t\t\t\t...this.props.style\n\t\t\t\t}}>\n\t\t\t\t\t{ legend ?\n\t\t\t\t\t\t<label>{legend}:</label> :\n\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t\t<span className=\"slider-range-wrapper\" >\n\t\t\t\t\t\t<Badge variant=\"secondary\" >{minLabel || min}</Badge>\n\t\t\t\t\t\t{rangeInput}\n\t\t\t\t\t\t<Badge variant=\"secondary\" >{maxLabel || max}</Badge>\n\t\t\t\t\t</span>\n\t\t\t\t\t{numberInput}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Tooltip\n\t\t\t\tid=\"sliderTooltip\"\n\t\t\t\tplacement=\"top\"\n\t\t\t\tshow={!this.props.hideTooltip}\n\t\t\t\ttooltip={disabled ? 'The slider input is disabled right now.' : this.state.tooltip}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"slider-outer-div input\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\topacity: disabled ? 0.2 : 1.0,\n\t\t\t\t\t\t...this.props.style\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{ legend ?\n\t\t\t\t\t\t<label>{legend}:</label> :\n\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t\t<br />\n\t\t\t\t\t<span className=\"slider-range-wrapper\" >\n\t\t\t\t\t\t<Badge variant=\"secondary\" style={{ float: 'left' }} >{minLabel || min}</Badge>\n\t\t\t\t\t\t{rangeInput}\n\t\t\t\t\t\t<Badge variant=\"secondary\" style={{ float: 'left' }} >{maxLabel || max}</Badge>\n\t\t\t\t\t</span>\n\t\t\t\t\t{numberInput}\n\t\t\t\t\t<br />\n\t\t\t\t</div>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nSliderInput.defaultProps = {\n\tinline: false,\n\tlegend: null,\n\tmin: 0,\n\tminLabel: null,\n\tmax: 100,\n\tmaxLabel: null,\n\tstep: 1,\n\tdefaultValue: 10,\n\tonChange() {},\n\tprecision: 10,\n\tdisabled: false,\n\thideTooltip: false,\n\tstyle: {},\n\tnumberInputStyle: {},\n\trangeInputStyle: {}\n};\n\nSliderInput.propTypes = {\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmaxLabel: PropTypes.string,\n\tmin: PropTypes.number,\n\tminLabel: PropTypes.string,\n\tonChange: PropTypes.func,\n\tprecision: PropTypes.number,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\thideTooltip: PropTypes.bool,\n\tstyle: PropTypes.object,\n\tnumberInputStyle: PropTypes.object,\n\trangeInputStyle: PropTypes.object\n};\n\nSliderInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default SliderInput;\n","// MODULES //\n\nimport SliderInput from './main.js';\n\n\n// EXPORTS //\n\nexport default SliderInput;\n"],"sourceRoot":""}