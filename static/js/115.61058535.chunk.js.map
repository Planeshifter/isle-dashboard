{"version":3,"sources":["../node_modules/@isle-project/components/collapse/index.js","../node_modules/@isle-project/components/data-explorer/menu/random_forest.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/number/create_tooltip.js","../node_modules/@isle-project/components/input/number/index.js","../node_modules/@isle-project/components/input/number/main.js"],"names":["Collapse","Loadable","chooseTries","x","type","floor","sqrt","length","RandomForestMenu","props","state","y","nTrees","nTry","impurityMeasure","scoreThreshold","maxTreeDepth","minItemsCount","output","quantitative","data","onPredict","forest","counter","newData","copy","newCategorical","categorical","slice","yhat","predict","map","String","name","contains","push","yvalues","i","onGenerate","logAction","DATA_EXPLORER_RANDOM_FOREST","onCreated","this","t","style","fontSize","maxWidth","Header","as","title","content","Body","legend","options","defaultValue","onChange","setState","multi","unique","concat","inputStyle","float","tooltipPlacement","min","max","isArray","header","headerStyle","step","disabled","variant","block","onClick","compute","Component","defaultProps","QuestionButton","popover","id","trigger","placement","rootClose","overlay","size","className","createTooltip","tooltip","PINF","NINF","CreateTooltip","NumberInput","debug","logger","uid","generateUID","context","event","valid","target","validity","value","parseFloat","isnan","bind","global","lesson","vals","split","onBlur","session","prevProps","globalVal","isNumber","inline","input","padding","htmlFor","numbersOnly","width","paddingLeft","marginLeft","handleChange","finishChange","onKeyPress","onKeyDown","onKeyUp","autoComplete","description","marginBottom","marginTop","isString","nextProps","prevState","newState","isEmptyObject","Input","propTypes","PropTypes","string","number","bool","oneOfType","node","func","object","oneOf","contextType","SessionContext"],"mappings":"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","file":"static/js/115.61058535.chunk.js","sourcesContent":["// MODULES //\n\nimport Loadable from '@isle-project/components/internal/loadable';\n\n\n// MAIN //\n\nconst Collapse = Loadable( () => import( /* webpackChunkName: \"Collapse\" */ './main.js' ) );\n\n\n// EXPORTS //\n\nexport default Collapse;\n","// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport unique from 'uniq';\nimport contains from '@stdlib/assert/contains';\nimport isArray from '@stdlib/assert/is-array';\nimport copy from '@stdlib/utils/copy';\nimport floor from '@stdlib/math/base/special/floor';\nimport sqrt from '@stdlib/math/base/special/sqrt';\nimport SelectInput from '@isle-project/components/input/select';\nimport NumberInput from '@isle-project/components/input/number';\nimport Collapse from '@isle-project/components/collapse';\nimport RandomForest from '@isle-project/components/models/random-forest';\nimport { DATA_EXPLORER_RANDOM_FOREST } from '@isle-project/constants/actions.js';\nimport QuestionButton from './../question_button.js';\n\n\n// VARIABLES //\n\nconst DESCRIPTION = 'Instead of growing a single decision tree, a random forest as an ensemble method constructs many decision trees at once and returns the average of the predictions (regression case) or the majority vote (classification case) of the individual trees';\n\n\n// FUNCTIONS //\n\nfunction chooseTries( x, type ) {\n\tif ( !x ) {\n\t\treturn 1;\n\t}\n\tif ( type === 'Classificiation' ) {\n\t\treturn floor( sqrt( x.length ) );\n\t}\n\tif ( x.length < 3 ) {\n\t\treturn 1;\n\t}\n\treturn floor( x.length / 3 );\n}\n\n\n// MAIN //\n\nclass RandomForestMenu extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tthis.state = {\n\t\t\ty: props.categorical[ 0 ],\n\t\t\tx: props.quantitative[ 0 ],\n\t\t\ttype: 'Classification',\n\t\t\tnTrees: 50,\n\t\t\tnTry: 1,\n\t\t\timpurityMeasure: 'gini',\n\t\t\tscoreThreshold: 0.01,\n\t\t\tmaxTreeDepth: 20,\n\t\t\tminItemsCount: 50\n\t\t};\n\t}\n\n\tcompute = () => {\n\t\tlet { y, x, type, nTrees, nTry, impurityMeasure, scoreThreshold, maxTreeDepth, minItemsCount } = this.state;\n\t\tconst output = <RandomForest\n\t\t\tx={x} y={y} type={type} nTrees={nTrees} nTry={nTry}\n\t\t\timpurityMeasure={impurityMeasure}\n\t\t\tscoreThreshold={scoreThreshold}\n\t\t\tmaxTreeDepth={maxTreeDepth}\n\t\t\tminItemsCount={minItemsCount}\n\t\t\tquantitative={this.props.quantitative}\n\t\t\tdata={this.props.data}\n\t\t\tonPredict={( forest, counter ) => {\n\t\t\t\tconst newData = copy( this.props.data, 1 );\n\t\t\t\tif ( type === 'Classification' ) {\n\t\t\t\t\tconst newCategorical = this.props.categorical.slice();\n\t\t\t\t\tconst yhat = forest.predict( newData ).map( x => String( x ) );\n\t\t\t\t\tlet name = 'pred_forest' + counter;\n\t\t\t\t\tnewData[ name ] = yhat;\n\t\t\t\t\tif ( !contains( newCategorical, name ) ) {\n\t\t\t\t\t\tnewCategorical.push( name );\n\t\t\t\t\t}\n\t\t\t\t\tname = 'correct_forest' + counter;\n\t\t\t\t\tconst yvalues = this.props.data[ y ];\n\t\t\t\t\tnewData[ name ] = yhat.map( ( x, i ) => x === String( yvalues[ i ] ) ? 'Yes' : 'No' );\n\t\t\t\t\tif ( !contains( newCategorical, name ) ) {\n\t\t\t\t\t\tnewCategorical.push( name );\n\t\t\t\t\t}\n\t\t\t\t\tthis.props.onGenerate( this.props.quantitative, newCategorical, newData );\n\t\t\t\t}\n\t\t\t}}\n\t\t/>;\n\t\tthis.props.logAction( DATA_EXPLORER_RANDOM_FOREST, {\n\t\t\ty, x, type, nTrees, nTry\n\t\t});\n\t\tthis.props.onCreated( output );\n\t}\n\n\trender() {\n\t\tconst { categorical, quantitative, t } = this.props;\n\t\tconst { x, y, type, nTrees, nTry } = this.state;\n\t\treturn (\n\t\t\t<Card\n\t\t\t\tstyle={{ fontSize: '14px', maxWidth: 600 }}\n\t\t\t>\n\t\t\t\t<Card.Header as=\"h4\">\n\t\t\t\t\t{t('Random Forest')}\n\t\t\t\t\t<QuestionButton title={t('Random Forest')} content={DESCRIPTION} />\n\t\t\t\t</Card.Header>\n\t\t\t\t<Card.Body>\n\t\t\t\t\t<SelectInput\n\t\t\t\t\t\tlegend=\"Type\"\n\t\t\t\t\t\toptions={[ 'Classification' ]}\n\t\t\t\t\t\tdefaultValue={type}\n\t\t\t\t\t\tonChange={( type ) => {\n\t\t\t\t\t\t\tif ( type !== this.state.type ) {\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\t\ty: type === 'Classification' ? categorical[ 0 ] : quantitative[ 0 ],\n\t\t\t\t\t\t\t\t\tnTry: chooseTries( this.state.x, type )\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<SelectInput\n\t\t\t\t\t\tlegend={t('outcome-y')}\n\t\t\t\t\t\toptions={type === 'Classification' ? categorical : quantitative}\n\t\t\t\t\t\tdefaultValue={y}\n\t\t\t\t\t\tonChange={( y ) => this.setState({ y })}\n\t\t\t\t\t/>\n\t\t\t\t\t<SelectInput\n\t\t\t\t\t\tlegend={t('predictors-x')} multi\n\t\t\t\t\t\toptions={unique( quantitative.concat( categorical ) )}\n\t\t\t\t\t\tdefaultValue={x || ''}\n\t\t\t\t\t\tonChange={( x ) => {\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tx,\n\t\t\t\t\t\t\t\tnTry: chooseTries( x, type )\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<NumberInput\n\t\t\t\t\t\tlegend={t('number-of-trees')}\n\t\t\t\t\t\tdefaultValue={nTrees}\n\t\t\t\t\t\tinputStyle={{ float: 'right' }}\n\t\t\t\t\t\tonChange={( nTrees) => this.setState({ nTrees })}\n\t\t\t\t\t\ttooltipPlacement=\"top\"\n\t\t\t\t\t\tmin={1}\n\t\t\t\t\t/>\n\t\t\t\t\t<NumberInput\n\t\t\t\t\t\tlegend=\"# of predictors to check at each split\"\n\t\t\t\t\t\tdefaultValue={nTry}\n\t\t\t\t\t\tinputStyle={{ float: 'right' }}\n\t\t\t\t\t\tonChange={( nTry ) => this.setState({ nTry })}\n\t\t\t\t\t\ttooltipPlacement=\"top\"\n\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\tmax={isArray( x ) ? x.length : 1}\n\t\t\t\t\t/>\n\t\t\t\t\t<Collapse header={t('change-tree-features')} headerStyle={{ fontSize: '1rem' }} >\n\t\t\t\t\t\t<NumberInput legend=\"Score threshold for split\"\n\t\t\t\t\t\t\tmin={0} max={1} step={0.001}\n\t\t\t\t\t\t\tdefaultValue={this.state.scoreThreshold} onChange={( scoreThreshold ) => this.setState({ scoreThreshold })}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<NumberInput legend={t('maximum-tre-depth')}\n\t\t\t\t\t\t\tmin={1} max={50}\n\t\t\t\t\t\t\tdefaultValue={this.state.maxTreeDepth} onChange={( maxTreeDepth ) => this.setState({ maxTreeDepth })}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<NumberInput legend={t('min-obs-leafs')}\n\t\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\t\tdefaultValue={this.state.minItemsCount}\n\t\t\t\t\t\t\tonChange={( minItemsCount ) => this.setState({ minItemsCount })}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Collapse>\n\t\t\t\t\t{ type === 'Classification' ? <SelectInput\n\t\t\t\t\t\tlegend={t('impurity-measure')}\n\t\t\t\t\t\tdefaultValue={this.state.impurityMeasure}\n\t\t\t\t\t\toptions={[ 'gini', 'entropy' ]}\n\t\t\t\t\t\tonChange={( impurityMeasure ) => this.setState({ impurityMeasure })}\n\t\t\t\t\t/> : null }\n\t\t\t\t\t<Button disabled={!x || x.length === 0} variant=\"primary\" block onClick={this.compute}>\n\t\t\t\t\t\t{t('calculate')}\n\t\t\t\t\t</Button>\n\t\t\t\t</Card.Body>\n\t\t\t</Card>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nRandomForestMenu.defaultProps = {\n\tlogAction() {}\n};\n\nRandomForestMenu.propTypes = {\n\tcategorical: PropTypes.array.isRequired,\n\tquantitative: PropTypes.array.isRequired,\n\tdata: PropTypes.object.isRequired,\n\tlogAction: PropTypes.func,\n\tonGenerate: PropTypes.func.isRequired,\n\tonCreated: PropTypes.func.isRequired\n};\n\n\n// EXPORTS //\n\nexport default RandomForestMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={['hover', 'focus']} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport PINF from '@stdlib/constants/math/float64-pinf';\nimport NINF from '@stdlib/constants/math/float64-ninf';\n\n\n// MAIN //\n\nfunction createTooltip( props ) {\n\tlet tooltip = `Enter a${ props.step === 1 ? 'n integer' : ' number'} `;\n\tif ( props.max !== PINF && props.min !== NINF ) {\n\t\ttooltip += `between ${props.min} and ${props.max}`;\n\t} else if ( props.min !== NINF ) {\n\t\ttooltip += `larger or equal to ${props.min}`;\n\t} else if ( props.max !== PINF ) {\n\t\ttooltip += `smaller or equal to ${props.max}`;\n\t}\n\treturn tooltip;\n}\n\n\n// EXPORTS //\n\nexport default createTooltip;\n","// MODULES //\n\nimport NumberInput from './main';\nimport CreateTooltip from './create_tooltip.js';\n\n\n// EXPORTS //\n\nexport const createTooltip = CreateTooltip;\nexport default NumberInput;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport Input from '@isle-project/components/input/base';\nimport contains from '@stdlib/assert/contains';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport PINF from '@stdlib/constants/math/float64-pinf';\nimport NINF from '@stdlib/constants/math/float64-ninf';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport createTooltip from './create_tooltip.js';\nimport './number.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:number-input' );\nconst uid = generateUID( 'number-input' );\n\n\n// MAIN //\n\n/**\n* A number input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the number to be assigned to\n* @property {number} value - number value (for controlled component)\n* @property {number} defaultValue - value indicating the default value of the input at startup\n* @property {boolean} disabled - boolean indicating whether the input is active or not\n* @property {number} min - number indicating the smallest possible value that may be inserted\n* @property {number} max - number indicating the maximum value that may be inserted\n* @property {(number|string)} step - number indicating the incremental changes when using the increment arrows\n* @property {boolean} inline - indicates whether the input is displayed inline\n* @property {string} legend - string indicating the text displayed next to the number input\n* @property {boolean} numbersOnly - controls whether only numbers are accepted\n* @property {string} tooltip - tooltip string (if not set, the tooltip is automatically generated)\n* @property {string} tooltipPlacement - direction of the tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} inputStyle - CSS inline styles for input element\n* @property {Function} onBlur - callback function to be invoked when using a blur method\n* @property {Function} onChange - callback function to be invoked when number input is changed\n* @property {Function} onKeyPress - callback function to be invoked when any key is entered\n* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down\n* @property {Function} onKeyUp - callback function to be invoked when key is released\n*/\nclass NumberInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.id = props.id || uid( props );\n\t\tthis.state = {\n\t\t\tvalue: props.value || (props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue),\n\t\t\ttooltip: props.tooltip || createTooltip( props ),\n\t\t\tprevProps: props\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tlet newState = {};\n\t\tconst { prevProps } = prevState;\n\t\tif ( nextProps.defaultValue !== prevProps.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t}\n\t\telse if ( nextProps.bind !== prevProps.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t}\n\t\tif ( nextProps.min !== prevProps.min || nextProps.max !== prevProps.max ) {\n\t\t\tnewState.tooltip = nextProps.tooltip || createTooltip( nextProps );\n\t\t}\n\t\telse if ( nextProps.tooltip && nextProps.tooltip !== prevState.tooltip ) {\n\t\t\tnewState.tooltip = nextProps.tooltip;\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\tdebug( 'Created new state from props...' );\n\t\t\tnewState.prevProps = nextProps;\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tdebug( 'Component did update...' );\n\t\tif ( this.props.bind ) {\n\t\t\tconst globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value && isNumber( this.state.value ) ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\thandleChange = ( event ) => {\n\t\tdebug( 'Handle change of input field...' );\n\t\tlet valid = event.target.validity.valid;\n\t\tlet value = event.target.value;\n\t\tthis.setState({\n\t\t\tvalue\n\t\t}, () => {\n\t\t\tif ( this.props.value ||\n\t\t\t\t(valid && value !== '' &&\n\t\t\t\tvalue !== '-' && value !== '.' && value !== '-.' )\n\t\t\t) {\n\t\t\t\tvalue = parseFloat( value );\n\t\t\t\tif ( isnan( value ) ) {\n\t\t\t\t\tvalue = '';\n\t\t\t\t}\n\t\t\t\tthis.props.onChange( value );\n\t\t\t\tif ( this.props.bind ) {\n\t\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tfinishChange = ( event ) => {\n\t\tconst { max, min, step } = this.props;\n\t\tdebug( 'Finished change...' );\n\t\tlet value = event.target.value;\n\t\tif ( contains( value, '/' ) ) {\n\t\t\tdebug( 'Encountered a fraction...' );\n\t\t\tlet vals = value.split( '/' );\n\t\t\tif ( vals[ 0 ] !== '' && vals[ 1 ] !== '' ) {\n\t\t\t\tvalue = parseFloat( vals[ 0 ]) / parseFloat( vals[ 1 ]);\n\t\t\t}\n\t\t}\n\t\tif ( isnan( value ) ) {\n\t\t\tvalue = '';\n\t\t}\n\t\telse if (\n\t\t\tvalue !== '' && value !== '-' &&\n\t\t\tvalue !== '.' && value !== '-.'\n\t\t) {\n\t\t\tvalue = parseFloat( value );\n\t\t}\n\t\tif ( value > max ) {\n\t\t\tvalue = max;\n\t\t}\n\t\telse if ( value < min ) {\n\t\t\tvalue = min;\n\t\t}\n\t\telse if (\n\t\t\tstep === 1.0 && value !== '' &&\n\t\t\tvalue !== '-' && value !== '.' && value !== '-.'\n\t\t) {\n\t\t\tvalue = value - value % this.props.step;\n\t\t}\n\t\tthis.props.onChange( value );\n\t\tthis.props.onBlur( value );\n\t\tif ( value !== this.state.value ) {\n\t\t\tthis.setState({\n\t\t\t\tvalue\n\t\t\t}, () => {\n\t\t\t\tif ( this.props.bind ) {\n\t\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tif ( this.props.value !== null ) {\n\t\t\tvalue = this.props.value;\n\t\t}\n\t\tif ( this.props.inline === true ) {\n\t\t\tconst input =\n\t\t\t\t<span className=\"input\" style={{ padding: '5px', ...this.props.style }}>\n\t\t\t\t\t{ this.props.legend ? <label htmlFor={this.id} > {this.props.legend} =  </label> : null }\n\t\t\t\t\t<input\n\t\t\t\t\t\tid={this.id}\n\t\t\t\t\t\ttype={this.props.numbersOnly ? 'number' : 'text'}\n\t\t\t\t\t\tname=\"input\"\n\t\t\t\t\t\tclassName=\"number-number-input\"\n\t\t\t\t\t\tdisabled={this.props.disabled}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tstep={this.props.step}\n\t\t\t\t\t\tmin={this.props.min}\n\t\t\t\t\t\tmax={this.props.max}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\twidth: '80px',\n\t\t\t\t\t\t\tpaddingLeft: '6px',\n\t\t\t\t\t\t\tmarginLeft: '3px',\n\t\t\t\t\t\t\t...this.props.inputStyle\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tonBlur={this.finishChange}\n\t\t\t\t\t\tonKeyPress={this.props.onKeyPress}\n\t\t\t\t\t\tonKeyDown={this.props.onKeyDown}\n\t\t\t\t\t\tonKeyUp={this.props.onKeyUp}\n\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t/>\n\t\t\t\t\t{ this.props.description ?\n\t\t\t\t\t\t<span>({this.props.description})</span> :\n\t\t\t\t\t\t<span />\n\t\t\t\t\t}\n\t\t\t\t</span>;\n\t\t\treturn this.props.disabled ?\n\t\t\t\tinput:\n\t\t\t\t<Tooltip id=\"number-input-tooltip-inline\" placement=\"top\" tooltip={this.state.tooltip} >\n\t\t\t\t\t{input}\n\t\t\t\t</Tooltip>;\n\t\t}\n\t\tlet input = <input\n\t\t\tid={this.id}\n\t\t\ttype={this.props.numbersOnly ? 'number' : 'text'}\n\t\t\tname=\"input\"\n\t\t\tclassName=\"number-number-input\"\n\t\t\tdisabled={this.props.disabled}\n\t\t\tvalue={value}\n\t\t\tstep={this.props.step}\n\t\t\tmin={this.props.min}\n\t\t\tmax={this.props.max}\n\t\t\tstyle={{\n\t\t\t\twidth: '80px',\n\t\t\t\tmarginLeft: '24px',\n\t\t\t\t...this.props.inputStyle\n\t\t\t}}\n\t\t\tonChange={this.handleChange}\n\t\t\tonBlur={this.finishChange}\n\t\t\tonKeyPress={this.props.onKeyPress}\n\t\t\tonKeyDown={this.props.onKeyDown}\n\t\t\tonKeyUp={this.props.onKeyUp}\n\t\t\tautoComplete=\"off\"\n\t\t/>;\n\t\treturn ( <div className=\"input\" style={{\n\t\t\tmarginBottom: '4px',\n\t\t\tmarginTop: '4px',\n\t\t\t...this.props.style\n\t\t}}>\n\t\t\t{ this.props.legend ?\n\t\t\t\t<span>\n\t\t\t\t\t<label htmlFor={this.id} >\n\t\t\t\t\t\t{isString( this.props.legend ) ?\n\t\t\t\t\t\t\tthis.props.legend+':' :\n\t\t\t\t\t\t\tthis.props.legend\n\t\t\t\t\t\t}\n\t\t\t\t\t</label>\n\t\t\t\t\t{ this.props.description ?\n\t\t\t\t\t\t<span> {this.props.description}</span> :\n\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t</span> : null\n\t\t\t}\n\t\t\t<Tooltip\n\t\t\t\tid=\"number-input-tooltip\" placement={this.props.tooltipPlacement}\n\t\t\t\ttooltip={this.state.tooltip}\n\t\t\t><span className=\"number-input-span\" >{input}</span></Tooltip>\n\t\t</div> );\n\t}\n}\n\n\n// PROPERTIES //\n\nNumberInput.defaultProps = {\n\tbind: '',\n\tdisabled: false,\n\tlegend: null,\n\tmin: NINF,\n\tmax: PINF,\n\tstep: 1,\n\tdefaultValue: 0,\n\tonBlur() {},\n\tonChange() {},\n\tonKeyDown() {},\n\tonKeyPress() {},\n\tonKeyUp() {},\n\tinline: false,\n\tnumbersOnly: true,\n\tstyle: {},\n\tinputStyle: {},\n\tvalue: null,\n\ttooltip: null,\n\ttooltipPlacement: 'left'\n};\n\nNumberInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmin: PropTypes.number,\n\tnumbersOnly: PropTypes.bool,\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\tstyle: PropTypes.object,\n\tinputStyle: PropTypes.object,\n\tvalue: PropTypes.number,\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'top', 'right', 'bottom', 'left' ])\n};\n\nNumberInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default NumberInput;\n"],"sourceRoot":""}