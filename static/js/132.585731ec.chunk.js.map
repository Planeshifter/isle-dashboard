{"version":3,"sources":["../node_modules/@isle-project/components/data-explorer/menu/boxplot.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/checkbox/index.js","../node_modules/@isle-project/components/input/checkbox/main.js"],"names":["BoxplotMenu","data","variables","defaultValue","groupingVariables","t","session","logAction","onCreated","useState","variable","setVariable","group","setGroup","orientation","setOrientation","overlayPoints","setOverlayPoints","Header","as","title","content","Body","legend","options","onChange","controlId","value","map","e","isClearable","isMulti","length","styles","selectStyles","menuPortalTarget","document","body","menuPlacement","variant","block","onClick","groupValues","plotId","randomstring","action","output","id","onShare","addNotification","message","level","position","DATA_EXPLORER_SHARE_BOXPLOT","DATA_EXPLORER_BOXPLOT","defaultProps","QuestionButton","props","popover","trigger","placement","rootClose","overlay","size","className","CheckboxInput","context","newValue","setState","bind","global","lesson","event","target","checked","updateValue","state","this","globalVal","input","type","handleChange","disabled","aria-label","tooltip","inline","tooltipPlacement","style","marginLeft","role","tabIndex","color","handleSpanChange","onKeyPress","onSpanChange","noop","nextProps","prevState","newState","isEmptyObject","Input","propTypes","PropTypes","string","bool","func","oneOfType","node","oneOf","object","contextType","SessionContext"],"mappings":"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","file":"static/js/132.585731ec.chunk.js","sourcesContent":["// MODULES //\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport SelectInput from '@isle-project/components/input/select';\nimport selectStyles from '@isle-project/components/input/select/styles';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport randomstring from '@isle-project/utils/randomstring/alphanumeric';\nimport BoxPlot from '@isle-project/components/plots/boxplot';\nimport { DATA_EXPLORER_SHARE_BOXPLOT, DATA_EXPLORER_BOXPLOT } from '@isle-project/constants/actions.js';\nimport QuestionButton from '../question_button.js';\n\n\n// MAIN //\n\nconst BoxplotMenu = ({ data, variables, defaultValue, groupingVariables, t, session, logAction, onCreated }) => {\n\tconst [ variable, setVariable ] = useState( defaultValue || variables[ 0 ] );\n\tconst [ group, setGroup ] = useState([]);\n\tconst [ orientation, setOrientation ] = useState( 'vertical' );\n\tconst [ overlayPoints, setOverlayPoints ] = useState( false );\n\n\tconst generateBoxplot = () => {\n\t\tconst groupValues = ( group || [] ).map( e => e.value );\n\t\tconst plotId = randomstring( 6 );\n\t\tconst action = {\n\t\t\tvariable,\n\t\t\tgroup: groupValues,\n\t\t\tplotId\n\t\t};\n\t\tconst onShare = () => {\n\t\t\tsession.addNotification({\n\t\t\t\ttitle: t('plot-shared'),\n\t\t\t\tmessage: t('plot-shared-message'),\n\t\t\t\tlevel: 'success',\n\t\t\t\tposition: 'tr'\n\t\t\t});\n\t\t\tlogAction( DATA_EXPLORER_SHARE_BOXPLOT, action );\n\t\t};\n\t\tconst output = <BoxPlot id={plotId} onShare={onShare} action={action}\n\t\t\tdata={data} variable={variable} group={groupValues} orientation={orientation}\n\t\t\toverlayPoints={overlayPoints} variables={variables}\n\t\t/>;\n\t\tlogAction( DATA_EXPLORER_BOXPLOT, action );\n\t\tonCreated( output );\n\t};\n\treturn (\n\t\t<Card>\n\t\t\t<Card.Header as=\"h4\">\n\t\t\t\t{t('Box Plot')}\n\t\t\t\t<QuestionButton title={t('Box Plot')} content={t('Box Plot-description')} />\n\t\t\t</Card.Header>\n\t\t\t<Card.Body>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('variable')}\n\t\t\t\t\tdefaultValue={variable}\n\t\t\t\t\toptions={variables}\n\t\t\t\t\tonChange={setVariable}\n\t\t\t\t/>\n\t\t\t\t<FormGroup controlId=\"boxplot-form-select\">\n\t\t\t\t\t<FormLabel>{t('group-by')}:</FormLabel>\n\t\t\t\t\t<Select\n\t\t\t\t\t\tvalue={group}\n\t\t\t\t\t\toptions={groupingVariables.map( e => ( { 'label': e, 'value': e } ))}\n\t\t\t\t\t\tisClearable\n\t\t\t\t\t\tisMulti\n\t\t\t\t\t\tonChange={( value ) => {\n\t\t\t\t\t\t\tif ( !value || value.length <= 2 ) {\n\t\t\t\t\t\t\t\tsetGroup( value );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tstyles={selectStyles}\n\t\t\t\t\t\tmenuPortalTarget={document.body}\n\t\t\t\t\t/>\n\t\t\t\t</FormGroup>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('orientation')}\n\t\t\t\t\toptions={[ 'vertical', 'horizontal' ]}\n\t\t\t\t\tdefaultValue=\"vertical\"\n\t\t\t\t\tmenuPlacement=\"top\"\n\t\t\t\t\tonChange={setOrientation}\n\t\t\t\t/>\n\t\t\t\t<CheckboxInput\n\t\t\t\t\tlegend={t('overlay-points')}\n\t\t\t\t\tdefaultValue={false}\n\t\t\t\t\tonChange={setOverlayPoints}\n\t\t\t\t/>\n\t\t\t\t<Button variant=\"primary\" block onClick={generateBoxplot}>\n\t\t\t\t\t{t('generate')}\n\t\t\t\t</Button>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\n\n// PROPERTIES //\n\nBoxplotMenu.defaultProps = {\n\tdefaultValue: null,\n\tgroupingVariables: null,\n\tlogAction() {},\n\tonCreated() {}\n};\n\nBoxplotMenu.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\tdefaultValue: PropTypes.string,\n\tgroupingVariables: PropTypes.array,\n\tlogAction: PropTypes.func,\n\tonCreated: PropTypes.func,\n\tsession: PropTypes.object.isRequired,\n\tvariables: PropTypes.array.isRequired\n};\n\n\n// EXPORTS //\n\nexport default BoxplotMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={['hover', 'focus']} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport noop from '@stdlib/utils/noop';\nimport Input from '@isle-project/components/input/base';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport './checkbox.css';\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nclass CheckboxInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.state = {\n\t\t\tvalue: props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue,\n\t\t\tbind: props.bind,\n\t\t\tdefaultValue: props.defaultValue\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tlet newState = {};\n\t\tif ( nextProps.defaultValue !== prevState.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t\tnewState.defaultValue = nextProps.defaultValue;\n\t\t}\n\t\telse if ( nextProps.bind !== prevState.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t\tnewState.bind = nextProps.bind;\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif ( this.props.bind ) {\n\t\t\tlet globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateValue = ( newValue ) => {\n\t\tthis.setState({\n\t\t\tvalue: newValue\n\t\t}, () => {\n\t\t\tif ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\thandleChange = ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tthis.props.onChange( newValue );\n\t\tthis.updateValue( newValue );\n\t}\n\n\thandleSpanChange = ( event ) => {\n\t\tconst newValue = this.props.value !== null ? !this.props.value : !this.state.value;\n\t\tthis.props.onChange( newValue );\n\t\tthis.updateValue( newValue );\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tif ( this.props.value !== null ) {\n\t\t\tvalue = this.props.value;\n\t\t}\n\t\tconst input = <input\n\t\t\tclassName=\"checkbox-input\"\n\t\t\ttype=\"checkbox\"\n\t\t\tchecked={value}\n\t\t\tvalue=\"checkbox\"\n\t\t\tonChange={this.handleChange}\n\t\t\tdisabled={this.props.disabled}\n\t\t\taria-label={this.props.tooltip}\n\t\t></input>;\n\t\tif ( this.props.inline === true ) {\n\t\t\treturn (\n\t\t\t\t<Tooltip tooltip={this.props.tooltip} placement={this.props.tooltipPlacement} >\n\t\t\t\t\t<span style={{ marginLeft: '8px', ...this.props.style }}>\n\t\t\t\t\t\t{input}\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tcolor: this.props.disabled ? 'darkgray' : null\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonClick={this.handleSpanChange} onKeyPress={this.handleSpanChange}\n\t\t\t\t\t\t>{this.props.legend}</span>\n\t\t\t\t\t</span>\n\t\t\t\t</Tooltip>\n\t\t\t);\n\t\t}\n\t\tconst onSpanChange = this.props.disabled ? noop : this.handleSpanChange;\n\t\treturn (\n\t\t\t<Tooltip tooltip={this.props.tooltip} placement={this.props.tooltipPlacement} >\n\t\t\t\t<div className=\"input checkbox-input-div\" style={this.props.style}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: this.props.disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t\t>{this.props.legend}</span>\n\t\t\t\t</div>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\nCheckboxInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n"],"sourceRoot":""}