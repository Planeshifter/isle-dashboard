{"version":3,"sources":["../node_modules/@isle-project/components/input/checkbox/main.js","../node_modules/@isle-project/components/input/checkbox/index.js","../node_modules/@isle-project/components/input/number/create_tooltip.js","../node_modules/@isle-project/components/input/number/main.js","../node_modules/@isle-project/components/input/number/index.js","../node_modules/@isle-project/components/input/text/main.js","../node_modules/@isle-project/components/input/text/index.js"],"names":["CheckboxInput","props","context","newValue","setState","value","bind","global","lesson","event","target","checked","onChange","updateValue","state","session","defaultValue","this","globalVal","input","className","type","handleChange","disabled","aria-label","tooltip","inline","placement","tooltipPlacement","style","marginLeft","role","tabIndex","color","onClick","handleSpanChange","onKeyPress","legend","onSpanChange","noop","nextProps","prevState","newState","isEmptyObject","Input","defaultProps","propTypes","PropTypes","contextType","SessionContext","step","max","PINF","min","NINF","debug","logger","uid","generateUID","NumberInput","valid","validity","parseFloat","isnan","contains","vals","split","onBlur","id","createTooltip","prevProps","isNumber","padding","htmlFor","numbersOnly","name","width","paddingLeft","inputStyle","finishChange","onKeyDown","onKeyUp","autoComplete","description","marginBottom","marginTop","isString","TextInput","textInput","focus","placeholder","ref"],"mappings":"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","file":"static/js/13812.0b56c4ce.chunk.js","sourcesContent":["// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport noop from '@stdlib/utils/noop';\nimport Input from '@isle-project/components/input/base';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport './checkbox.css';\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nclass CheckboxInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.state = {\n\t\t\tvalue: props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue,\n\t\t\tbind: props.bind,\n\t\t\tdefaultValue: props.defaultValue\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tlet newState = {};\n\t\tif ( nextProps.defaultValue !== prevState.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t\tnewState.defaultValue = nextProps.defaultValue;\n\t\t}\n\t\telse if ( nextProps.bind !== prevState.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t\tnewState.bind = nextProps.bind;\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif ( this.props.bind ) {\n\t\t\tlet globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateValue = ( newValue ) => {\n\t\tthis.setState({\n\t\t\tvalue: newValue\n\t\t}, () => {\n\t\t\tif ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\thandleChange = ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tthis.props.onChange( newValue );\n\t\tthis.updateValue( newValue );\n\t}\n\n\thandleSpanChange = ( event ) => {\n\t\tconst newValue = this.props.value !== null ? !this.props.value : !this.state.value;\n\t\tthis.props.onChange( newValue );\n\t\tthis.updateValue( newValue );\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tif ( this.props.value !== null ) {\n\t\t\tvalue = this.props.value;\n\t\t}\n\t\tconst input = <input\n\t\t\tclassName=\"checkbox-input\"\n\t\t\ttype=\"checkbox\"\n\t\t\tchecked={value}\n\t\t\tvalue=\"checkbox\"\n\t\t\tonChange={this.handleChange}\n\t\t\tdisabled={this.props.disabled}\n\t\t\taria-label={this.props.tooltip}\n\t\t></input>;\n\t\tif ( this.props.inline === true ) {\n\t\t\treturn (\n\t\t\t\t<Tooltip tooltip={this.props.tooltip} placement={this.props.tooltipPlacement} >\n\t\t\t\t\t<span style={{ marginLeft: '8px', ...this.props.style }}>\n\t\t\t\t\t\t{input}\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tcolor: this.props.disabled ? 'darkgray' : null\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonClick={this.handleSpanChange} onKeyPress={this.handleSpanChange}\n\t\t\t\t\t\t>{this.props.legend}</span>\n\t\t\t\t\t</span>\n\t\t\t\t</Tooltip>\n\t\t\t);\n\t\t}\n\t\tconst onSpanChange = this.props.disabled ? noop : this.handleSpanChange;\n\t\treturn (\n\t\t\t<Tooltip tooltip={this.props.tooltip} placement={this.props.tooltipPlacement} >\n\t\t\t\t<div className=\"input checkbox-input-div\" style={this.props.style}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: this.props.disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t\t>{this.props.legend}</span>\n\t\t\t\t</div>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\nCheckboxInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport PINF from '@stdlib/constants/math/float64-pinf';\nimport NINF from '@stdlib/constants/math/float64-ninf';\n\n\n// MAIN //\n\nfunction createTooltip( props ) {\n\tlet tooltip = `Enter a${ props.step === 1 ? 'n integer' : ' number'} `;\n\tif ( props.max !== PINF && props.min !== NINF ) {\n\t\ttooltip += `between ${props.min} and ${props.max}`;\n\t} else if ( props.min !== NINF ) {\n\t\ttooltip += `larger or equal to ${props.min}`;\n\t} else if ( props.max !== PINF ) {\n\t\ttooltip += `smaller or equal to ${props.max}`;\n\t}\n\treturn tooltip;\n}\n\n\n// EXPORTS //\n\nexport default createTooltip;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport Input from '@isle-project/components/input/base';\nimport contains from '@stdlib/assert/contains';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport PINF from '@stdlib/constants/math/float64-pinf';\nimport NINF from '@stdlib/constants/math/float64-ninf';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport createTooltip from './create_tooltip.js';\nimport './number.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:number-input' );\nconst uid = generateUID( 'number-input' );\n\n\n// MAIN //\n\n/**\n* A number input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the number to be assigned to\n* @property {number} value - number value (for controlled component)\n* @property {number} defaultValue - value indicating the default value of the input at startup\n* @property {boolean} disabled - boolean indicating whether the input is active or not\n* @property {number} min - number indicating the smallest possible value that may be inserted\n* @property {number} max - number indicating the maximum value that may be inserted\n* @property {(number|string)} step - number indicating the incremental changes when using the increment arrows\n* @property {boolean} inline - indicates whether the input is displayed inline\n* @property {string} legend - string indicating the text displayed next to the number input\n* @property {boolean} numbersOnly - controls whether only numbers are accepted\n* @property {string} tooltip - tooltip string (if not set, the tooltip is automatically generated)\n* @property {string} tooltipPlacement - direction of the tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} inputStyle - CSS inline styles for input element\n* @property {Function} onBlur - callback function to be invoked when using a blur method\n* @property {Function} onChange - callback function to be invoked when number input is changed\n* @property {Function} onKeyPress - callback function to be invoked when any key is entered\n* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down\n* @property {Function} onKeyUp - callback function to be invoked when key is released\n*/\nclass NumberInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.id = props.id || uid( props );\n\t\tthis.state = {\n\t\t\tvalue: props.value || (props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue),\n\t\t\ttooltip: props.tooltip || createTooltip( props ),\n\t\t\tprevProps: props\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tlet newState = {};\n\t\tconst { prevProps } = prevState;\n\t\tif ( nextProps.defaultValue !== prevProps.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t}\n\t\telse if ( nextProps.bind !== prevProps.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t}\n\t\tif ( nextProps.min !== prevProps.min || nextProps.max !== prevProps.max ) {\n\t\t\tnewState.tooltip = nextProps.tooltip || createTooltip( nextProps );\n\t\t}\n\t\telse if ( nextProps.tooltip && nextProps.tooltip !== prevState.tooltip ) {\n\t\t\tnewState.tooltip = nextProps.tooltip;\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\tdebug( 'Created new state from props...' );\n\t\t\tnewState.prevProps = nextProps;\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tdebug( 'Component did update...' );\n\t\tif ( this.props.bind ) {\n\t\t\tconst globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value && isNumber( this.state.value ) ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\thandleChange = ( event ) => {\n\t\tdebug( 'Handle change of input field...' );\n\t\tlet valid = event.target.validity.valid;\n\t\tlet value = event.target.value;\n\t\tthis.setState({\n\t\t\tvalue\n\t\t}, () => {\n\t\t\tif ( this.props.value ||\n\t\t\t\t(valid && value !== '' &&\n\t\t\t\tvalue !== '-' && value !== '.' && value !== '-.' )\n\t\t\t) {\n\t\t\t\tvalue = parseFloat( value );\n\t\t\t\tif ( isnan( value ) ) {\n\t\t\t\t\tvalue = '';\n\t\t\t\t}\n\t\t\t\tthis.props.onChange( value );\n\t\t\t\tif ( this.props.bind ) {\n\t\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tfinishChange = ( event ) => {\n\t\tconst { max, min, step } = this.props;\n\t\tdebug( 'Finished change...' );\n\t\tlet value = event.target.value;\n\t\tif ( contains( value, '/' ) ) {\n\t\t\tdebug( 'Encountered a fraction...' );\n\t\t\tlet vals = value.split( '/' );\n\t\t\tif ( vals[ 0 ] !== '' && vals[ 1 ] !== '' ) {\n\t\t\t\tvalue = parseFloat( vals[ 0 ]) / parseFloat( vals[ 1 ]);\n\t\t\t}\n\t\t}\n\t\tif ( isnan( value ) ) {\n\t\t\tvalue = '';\n\t\t}\n\t\telse if (\n\t\t\tvalue !== '' && value !== '-' &&\n\t\t\tvalue !== '.' && value !== '-.'\n\t\t) {\n\t\t\tvalue = parseFloat( value );\n\t\t}\n\t\tif ( value > max ) {\n\t\t\tvalue = max;\n\t\t}\n\t\telse if ( value < min ) {\n\t\t\tvalue = min;\n\t\t}\n\t\telse if (\n\t\t\tstep === 1.0 && value !== '' &&\n\t\t\tvalue !== '-' && value !== '.' && value !== '-.'\n\t\t) {\n\t\t\tvalue = value - value % this.props.step;\n\t\t}\n\t\tthis.props.onChange( value );\n\t\tthis.props.onBlur( value );\n\t\tif ( value !== this.state.value ) {\n\t\t\tthis.setState({\n\t\t\t\tvalue\n\t\t\t}, () => {\n\t\t\t\tif ( this.props.bind ) {\n\t\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tif ( this.props.value !== null ) {\n\t\t\tvalue = this.props.value;\n\t\t}\n\t\tif ( this.props.inline === true ) {\n\t\t\tconst input =\n\t\t\t\t<span className=\"input\" style={{ padding: '5px', ...this.props.style }}>\n\t\t\t\t\t{ this.props.legend ? <label htmlFor={this.id} > {this.props.legend} =  </label> : null }\n\t\t\t\t\t<input\n\t\t\t\t\t\tid={this.id}\n\t\t\t\t\t\ttype={this.props.numbersOnly ? 'number' : 'text'}\n\t\t\t\t\t\tname=\"input\"\n\t\t\t\t\t\tclassName=\"number-number-input\"\n\t\t\t\t\t\tdisabled={this.props.disabled}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tstep={this.props.step}\n\t\t\t\t\t\tmin={this.props.min}\n\t\t\t\t\t\tmax={this.props.max}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\twidth: '80px',\n\t\t\t\t\t\t\tpaddingLeft: '6px',\n\t\t\t\t\t\t\tmarginLeft: '3px',\n\t\t\t\t\t\t\t...this.props.inputStyle\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tonBlur={this.finishChange}\n\t\t\t\t\t\tonKeyPress={this.props.onKeyPress}\n\t\t\t\t\t\tonKeyDown={this.props.onKeyDown}\n\t\t\t\t\t\tonKeyUp={this.props.onKeyUp}\n\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t/>\n\t\t\t\t\t{ this.props.description ?\n\t\t\t\t\t\t<span>({this.props.description})</span> :\n\t\t\t\t\t\t<span />\n\t\t\t\t\t}\n\t\t\t\t</span>;\n\t\t\treturn this.props.disabled ?\n\t\t\t\tinput:\n\t\t\t\t<Tooltip id=\"number-input-tooltip-inline\" placement=\"top\" tooltip={this.state.tooltip} >\n\t\t\t\t\t{input}\n\t\t\t\t</Tooltip>;\n\t\t}\n\t\tlet input = <input\n\t\t\tid={this.id}\n\t\t\ttype={this.props.numbersOnly ? 'number' : 'text'}\n\t\t\tname=\"input\"\n\t\t\tclassName=\"number-number-input\"\n\t\t\tdisabled={this.props.disabled}\n\t\t\tvalue={value}\n\t\t\tstep={this.props.step}\n\t\t\tmin={this.props.min}\n\t\t\tmax={this.props.max}\n\t\t\tstyle={{\n\t\t\t\twidth: '80px',\n\t\t\t\tmarginLeft: '24px',\n\t\t\t\t...this.props.inputStyle\n\t\t\t}}\n\t\t\tonChange={this.handleChange}\n\t\t\tonBlur={this.finishChange}\n\t\t\tonKeyPress={this.props.onKeyPress}\n\t\t\tonKeyDown={this.props.onKeyDown}\n\t\t\tonKeyUp={this.props.onKeyUp}\n\t\t\tautoComplete=\"off\"\n\t\t/>;\n\t\treturn ( <div className=\"input\" style={{\n\t\t\tmarginBottom: '4px',\n\t\t\tmarginTop: '4px',\n\t\t\t...this.props.style\n\t\t}}>\n\t\t\t{ this.props.legend ?\n\t\t\t\t<span>\n\t\t\t\t\t<label htmlFor={this.id} >\n\t\t\t\t\t\t{isString( this.props.legend ) ?\n\t\t\t\t\t\t\tthis.props.legend+':' :\n\t\t\t\t\t\t\tthis.props.legend\n\t\t\t\t\t\t}\n\t\t\t\t\t</label>\n\t\t\t\t\t{ this.props.description ?\n\t\t\t\t\t\t<span> {this.props.description}</span> :\n\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t</span> : null\n\t\t\t}\n\t\t\t<Tooltip\n\t\t\t\tid=\"number-input-tooltip\" placement={this.props.tooltipPlacement}\n\t\t\t\ttooltip={this.state.tooltip}\n\t\t\t><span className=\"number-input-span\" >{input}</span></Tooltip>\n\t\t</div> );\n\t}\n}\n\n\n// PROPERTIES //\n\nNumberInput.defaultProps = {\n\tbind: '',\n\tdisabled: false,\n\tlegend: null,\n\tmin: NINF,\n\tmax: PINF,\n\tstep: 1,\n\tdefaultValue: 0,\n\tonBlur() {},\n\tonChange() {},\n\tonKeyDown() {},\n\tonKeyPress() {},\n\tonKeyUp() {},\n\tinline: false,\n\tnumbersOnly: true,\n\tstyle: {},\n\tinputStyle: {},\n\tvalue: null,\n\ttooltip: null,\n\ttooltipPlacement: 'left'\n};\n\nNumberInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmin: PropTypes.number,\n\tnumbersOnly: PropTypes.bool,\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\tstyle: PropTypes.object,\n\tinputStyle: PropTypes.object,\n\tvalue: PropTypes.number,\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'top', 'right', 'bottom', 'left' ])\n};\n\nNumberInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default NumberInput;\n","// MODULES //\n\nimport NumberInput from './main';\nimport CreateTooltip from './create_tooltip.js';\n\n\n// EXPORTS //\n\nexport const createTooltip = CreateTooltip;\nexport default NumberInput;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport Input from '@isle-project/components/input/base';\nimport generateUID from '@isle-project/utils/uid';\nimport SessionContext from '@isle-project/session/context.js';\nimport './text.css';\n\n\n// VARIABLES //\n\nconst uid = generateUID( 'text-input' );\n\n\n// MAIN //\n\n/**\n* A text input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {Function} onChange - A function to be called when a text value is changed\n* @property {string} defaultValue - A value indicating the default value of the input at start\n* @property {string} value - text value (for controlled component)\n* @property {boolean} disabled - A boolean indicating whether the input is active or not\n* @property {number} width - A number indicating the width of the input in pixels\n* @property {boolean} inline - Indicates whether the input is displayed inline\n* @property {string} legend - A string indicating the text displayed next to the number input\n* @property {string} bind - name of global variable for the number to be assigned to\n* @property {string} placeholder - A string indicating the value to be displayed before an initial choice is made\n* @property {Object} style - CSS inline styles\n* @property {Function} onBlur - callback function invoked when the text area loses focus\n* @property {Function} onKeyPress - callback function to be invoked when any key is entered\n* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down\n* @property {Function} onKeyUp - callback function to be invoked when key is released\n*/\nclass TextInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.state = {\n\t\t\tvalue: props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue,\n\t\t\tprevProps: props\n\t\t};\n\n\t\tthis.id = props.id || uid( props );\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tconst newState = {};\n\t\tconst { prevProps } = prevState;\n\t\tif ( nextProps.defaultValue !== prevProps.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t} else if ( nextProps.bind !== prevProps.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\tnewState.prevProps = nextProps;\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif ( this.props.bind ) {\n\t\t\tlet globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\thandleChange = ( event ) => {\n\t\tconst value = event.target.value;\n\t\tthis.props.onChange( value );\n\t\tthis.setState({\n\t\t\tvalue\n\t\t}, () => {\n\t\t\tif ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n\n\tfocus = () => {\n\t\tthis.textInput.focus();\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tif ( this.props.value !== null ) {\n\t\t\tvalue = this.props.value;\n\t\t}\n\t\tif ( this.props.inline ) {\n\t\t\treturn (\n\t\t\t\t<span className=\"input\" style={this.props.style} >\n\t\t\t\t\t{ this.props.legend ? <label htmlFor={this.id} >\n\t\t\t\t\t\t{this.props.legend}:\n\t\t\t\t\t</label> : <span /> }\n\t\t\t\t\t<input\n\t\t\t\t\t\tid={this.id}\n\t\t\t\t\t\tclassName=\"text-inline-input\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"input\"\n\t\t\t\t\t\tplaceholder={this.props.placeholder}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tref={( input ) => {\n\t\t\t\t\t\t\tthis.textInput = input;\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\twidth: this.props.width\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tonKeyPress={this.props.onKeyPress}\n\t\t\t\t\t\tonKeyDown={this.props.onKeyDown}\n\t\t\t\t\t\tonKeyUp={this.props.onKeyUp}\n\t\t\t\t\t/>\n\t\t\t\t\t{ this.props.description ?\n\t\t\t\t\t\t<span> ({this.props.description}) </span> :\n\t\t\t\t\t\t<span />\n\t\t\t\t\t}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"input text-container-div\" style={this.props.style} >\n\t\t\t\t<span>\n\t\t\t\t\t{ this.props.legend ?\n\t\t\t\t\t\t<label htmlFor={this.id} >{this.props.legend}:</label> :\n\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t\t{ this.props.description ?\n\t\t\t\t\t\t<span> {this.props.description}</span> :\n\t\t\t\t\t\t<span />\n\t\t\t\t\t}\n\t\t\t\t</span>\n\t\t\t\t<input\n\t\t\t\t\tid={this.id}\n\t\t\t\t\tclassName=\"text-input\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"input\"\n\t\t\t\t\tplaceholder={this.props.placeholder}\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tref={( input ) => {\n\t\t\t\t\t\tthis.textInput = input;\n\t\t\t\t\t}}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: this.props.width\n\t\t\t\t\t}}\n\t\t\t\t\tonBlur={this.props.onBlur}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\tonKeyPress={this.props.onKeyPress}\n\t\t\t\t\tonKeyDown={this.props.onKeyDown}\n\t\t\t\t\tonKeyUp={this.props.onKeyUp}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nTextInput.defaultProps = {\n\tbind: null,\n\tdefaultValue: '',\n\tvalue: null,\n\tlegend: '',\n\twidth: 80,\n\tonBlur() {},\n\tonChange() {},\n\tonKeyDown() {},\n\tonKeyPress() {},\n\tonKeyUp() {},\n\tinline: false,\n\tplaceholder: 'Enter text',\n\tstyle: {}\n};\n\nTextInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.string,\n\tvalue: PropTypes.string,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tinline: PropTypes.bool,\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tplaceholder: PropTypes.string,\n\twidth: PropTypes.number,\n\tstyle: PropTypes.object\n};\n\nTextInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default TextInput;\n","// MODULES //\n\nimport TextInput from './main.js';\n\n\n// EXPORTS //\n\nexport default TextInput;\n"],"sourceRoot":""}