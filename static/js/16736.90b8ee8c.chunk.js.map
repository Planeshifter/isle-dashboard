{"version":3,"sources":["../node_modules/@isle-project/components/collapse/index.js","../node_modules/@isle-project/components/data-explorer/menu/decision_tree.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/number/create_tooltip.js","../node_modules/@isle-project/components/input/number/main.js","../node_modules/@isle-project/components/input/number/index.js","../node_modules/@isle-project/utils/subtract/index.js"],"names":["Collapse","Loadable","DecisionTreeMenu","props","categorical","quantitative","t","useState","y","setY","x","setX","type","setType","impurityMeasure","setImpurityMeasure","scoreThreshold","setScoreThreshold","maxTreeDepth","setMaxTreeDepth","minItemsCount","setMinItemsCount","style","fontSize","maxWidth","as","title","content","legend","options","defaultValue","onChange","newType","multi","unique","concat","closeMenuOnSelect","header","headerStyle","min","max","step","disabled","length","variant","block","onClick","output","data","onPredict","tree","counter","newData","copy","newCategorical","slice","yhat","predict","map","String","name","contains","push","yvalues","i","onGenerate","newQuantitative","subtract","logAction","DATA_EXPLORER_DECISION_TREE","onCreated","defaultProps","popover","id","trigger","placement","rootClose","overlay","size","className","tooltip","PINF","NINF","debug","logger","uid","generateUID","NumberInput","context","event","valid","target","validity","value","setState","parseFloat","isnan","bind","global","lesson","vals","split","onBlur","state","session","createTooltip","prevProps","this","globalVal","isNumber","inline","input","padding","htmlFor","numbersOnly","width","paddingLeft","marginLeft","inputStyle","handleChange","finishChange","onKeyPress","onKeyDown","onKeyUp","autoComplete","description","marginBottom","marginTop","isString","tooltipPlacement","nextProps","prevState","newState","isEmptyObject","Input","propTypes","PropTypes","contextType","SessionContext","arr","isArr","isArrayLike","TypeError","len","out","Array","Error"],"mappings":"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","file":"static/js/16736.90b8ee8c.chunk.js","sourcesContent":["// MODULES //\n\nimport Loadable from '@isle-project/components/internal/loadable';\n\n\n// MAIN //\n\nconst Collapse = Loadable( () => import( /* webpackChunkName: \"Collapse\" */ './main.js' ) );\n\n\n// EXPORTS //\n\nexport default Collapse;\n","// MODULES //\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport unique from 'uniq';\nimport contains from '@stdlib/assert/contains';\nimport copy from '@stdlib/utils/copy';\nimport SelectInput from '@isle-project/components/input/select';\nimport NumberInput from '@isle-project/components/input/number';\nimport Collapse from '@isle-project/components/collapse';\nimport DecisionTree from '@isle-project/components/models/decision-tree';\nimport { DATA_EXPLORER_DECISION_TREE } from '@isle-project/constants/actions.js';\nimport subtract from '@isle-project/utils/subtract';\nimport QuestionButton from '../question_button.js';\n\n\n// MAIN //\n\nconst DecisionTreeMenu = ( props ) => {\n\tconst { categorical, quantitative, t } = props;\n\tconst [ y, setY ] = useState( 0 );\n\tconst [ x, setX ] = useState( 0 );\n\tconst [ type, setType ] = useState( 'Classification' );\n\tconst [ impurityMeasure, setImpurityMeasure ] = useState( 'gini' );\n\tconst [ scoreThreshold, setScoreThreshold ] = useState( 0.0075 );\n\tconst [ maxTreeDepth, setMaxTreeDepth ] = useState( 5 );\n\tconst [ minItemsCount, setMinItemsCount ] = useState( 50 );\n\n\tconst compute = () => {\n\t\tconst output = <DecisionTree\n\t\t\tx={x} y={y} type={type} impurityMeasure={impurityMeasure}\n\t\t\tdata={props.data} quantitative={props.quantitative}\n\t\t\tscoreThreshold={scoreThreshold} maxTreeDepth={maxTreeDepth}\n\t\t\tminItemsCount={minItemsCount}\n\t\t\tonPredict={( tree, counter ) => {\n\t\t\t\tconst newData = copy( props.data, 1 );\n\t\t\t\tif ( type === 'Classification' ) {\n\t\t\t\t\tconst newCategorical = props.categorical.slice();\n\t\t\t\t\tconst yhat = tree.predict( newData ).map( x => String( x ) );\n\t\t\t\t\tlet name = 'pred_tree' + counter;\n\t\t\t\t\tnewData[ name ] = yhat;\n\t\t\t\t\tif ( !contains( newCategorical, name ) ) {\n\t\t\t\t\t\tnewCategorical.push( name );\n\t\t\t\t\t}\n\t\t\t\t\tname = 'correct_tree' + counter;\n\t\t\t\t\tconst yvalues = props.data[ y ];\n\t\t\t\t\tnewData[ name ] = yhat.map( ( x, i ) => x === String( yvalues[ i ] ) ? 'Yes' : 'No' );\n\t\t\t\t\tif ( !contains( newCategorical, name ) ) {\n\t\t\t\t\t\tnewCategorical.push( name );\n\t\t\t\t\t}\n\t\t\t\t\tprops.onGenerate( props.quantitative, newCategorical, newData );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst newQuantitative = props.quantitative.slice();\n\t\t\t\t\tconst yhat = tree.predict( newData );\n\t\t\t\t\tlet name = 'pred_tree' + counter;\n\t\t\t\t\tnewData[ name ] = yhat;\n\t\t\t\t\tif ( !contains( newQuantitative, name ) ) {\n\t\t\t\t\t\tnewQuantitative.push( name );\n\t\t\t\t\t}\n\t\t\t\t\tname = 'resid_tree' + counter;\n\t\t\t\t\tnewData[ name ] = subtract( yhat, props.data[ y ] );\n\t\t\t\t\tif ( !contains( newQuantitative, name ) ) {\n\t\t\t\t\t\tnewQuantitative.push( name );\n\t\t\t\t\t}\n\t\t\t\t\tprops.onGenerate( newQuantitative, props.categorical, newData );\n\t\t\t\t}\n\t\t\t}}\n\t\t/>;\n\t\tprops.logAction( DATA_EXPLORER_DECISION_TREE, {\n\t\t\ty, x, type\n\t\t});\n\t\tprops.onCreated( output );\n\t};\n\treturn (\n\t\t<Card\n\t\t\tstyle={{ fontSize: '14px', maxWidth: 600 }}\n\t\t>\n\t\t\t<Card.Header as=\"h4\">\n\t\t\t\t{t('Decision Tree')}\n\t\t\t\t<QuestionButton title={t('Decision Tree')} content={t('Decision Tree-description')} />\n\t\t\t</Card.Header>\n\t\t\t<Card.Body>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('type')}\n\t\t\t\t\toptions={[ 'Classification', 'Regression' ]}\n\t\t\t\t\tdefaultValue={type}\n\t\t\t\t\tonChange={( newType ) => {\n\t\t\t\t\t\tif ( newType !== type ) {\n\t\t\t\t\t\t\tsetType( newType );\n\t\t\t\t\t\t\tsetY( type === 'Classification' ? categorical[ 0 ] : quantitative[ 0 ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('outcome-y')}\n\t\t\t\t\toptions={type === 'Classification' ? categorical : quantitative}\n\t\t\t\t\tdefaultValue={y}\n\t\t\t\t\tonChange={setY}\n\t\t\t\t/>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('predictors-x')} multi\n\t\t\t\t\toptions={unique( quantitative.concat( categorical ) )}\n\t\t\t\t\tdefaultValue={x || ''}\n\t\t\t\t\tonChange={setX}\n\t\t\t\t\tcloseMenuOnSelect={false}\n\t\t\t\t/>\n\t\t\t\t{ type === 'Classification' ? <SelectInput\n\t\t\t\t\tlegend={t('impurity-measure')}\n\t\t\t\t\tdefaultValue={impurityMeasure}\n\t\t\t\t\toptions={[ 'gini', 'entropy' ]}\n\t\t\t\t\tonChange={setImpurityMeasure}\n\t\t\t\t/> : null }\n\t\t\t\t<Collapse header={t('change-tree-features')} headerStyle={{ fontSize: '1rem' }} >\n\t\t\t\t\t<NumberInput legend=\"Score threshold for split\"\n\t\t\t\t\t\tmin={0} max={1} step={0.001}\n\t\t\t\t\t\tdefaultValue={scoreThreshold} onChange={setScoreThreshold}\n\t\t\t\t\t/>\n\t\t\t\t\t<NumberInput legend={t('maximum-tree-depth')}\n\t\t\t\t\t\tmin={1} max={50}\n\t\t\t\t\t\tdefaultValue={maxTreeDepth} onChange={setMaxTreeDepth}\n\t\t\t\t\t/>\n\t\t\t\t\t<NumberInput legend={t('min-obs-leafs')}\n\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\tdefaultValue={minItemsCount}\n\t\t\t\t\t\tonChange={setMinItemsCount}\n\t\t\t\t\t/>\n\t\t\t\t</Collapse>\n\t\t\t\t<Button disabled={!x || x.length === 0} variant=\"primary\" block onClick={compute} >\n\t\t\t\t\t{t('calculate')}\n\t\t\t\t</Button>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\n\n// PROPERTIES //\n\nDecisionTreeMenu.defaultProps = {\n\tlogAction() {}\n};\n\nDecisionTreeMenu.propTypes = {\n\tcategorical: PropTypes.array.isRequired,\n\tquantitative: PropTypes.array.isRequired,\n\tdata: PropTypes.object.isRequired,\n\tlogAction: PropTypes.func,\n\tonGenerate: PropTypes.func.isRequired,\n\tonCreated: PropTypes.func.isRequired\n};\n\n\n// EXPORTS //\n\nexport default DecisionTreeMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={['hover', 'focus']} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport PINF from '@stdlib/constants/math/float64-pinf';\nimport NINF from '@stdlib/constants/math/float64-ninf';\n\n\n// MAIN //\n\nfunction createTooltip( props ) {\n\tlet tooltip = `Enter a${ props.step === 1 ? 'n integer' : ' number'} `;\n\tif ( props.max !== PINF && props.min !== NINF ) {\n\t\ttooltip += `between ${props.min} and ${props.max}`;\n\t} else if ( props.min !== NINF ) {\n\t\ttooltip += `larger or equal to ${props.min}`;\n\t} else if ( props.max !== PINF ) {\n\t\ttooltip += `smaller or equal to ${props.max}`;\n\t}\n\treturn tooltip;\n}\n\n\n// EXPORTS //\n\nexport default createTooltip;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport Input from '@isle-project/components/input/base';\nimport contains from '@stdlib/assert/contains';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport PINF from '@stdlib/constants/math/float64-pinf';\nimport NINF from '@stdlib/constants/math/float64-ninf';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport createTooltip from './create_tooltip.js';\nimport './number.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:number-input' );\nconst uid = generateUID( 'number-input' );\n\n\n// MAIN //\n\n/**\n* A number input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the number to be assigned to\n* @property {number} value - number value (for controlled component)\n* @property {number} defaultValue - value indicating the default value of the input at startup\n* @property {boolean} disabled - boolean indicating whether the input is active or not\n* @property {number} min - number indicating the smallest possible value that may be inserted\n* @property {number} max - number indicating the maximum value that may be inserted\n* @property {(number|string)} step - number indicating the incremental changes when using the increment arrows\n* @property {boolean} inline - indicates whether the input is displayed inline\n* @property {string} legend - string indicating the text displayed next to the number input\n* @property {boolean} numbersOnly - controls whether only numbers are accepted\n* @property {string} tooltip - tooltip string (if not set, the tooltip is automatically generated)\n* @property {string} tooltipPlacement - direction of the tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} inputStyle - CSS inline styles for input element\n* @property {Function} onBlur - callback function to be invoked when using a blur method\n* @property {Function} onChange - callback function to be invoked when number input is changed\n* @property {Function} onKeyPress - callback function to be invoked when any key is entered\n* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down\n* @property {Function} onKeyUp - callback function to be invoked when key is released\n*/\nclass NumberInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.id = props.id || uid( props );\n\t\tthis.state = {\n\t\t\tvalue: props.value || (props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue),\n\t\t\ttooltip: props.tooltip || createTooltip( props ),\n\t\t\tprevProps: props\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tlet newState = {};\n\t\tconst { prevProps } = prevState;\n\t\tif ( nextProps.defaultValue !== prevProps.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t}\n\t\telse if ( nextProps.bind !== prevProps.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t}\n\t\tif ( nextProps.min !== prevProps.min || nextProps.max !== prevProps.max ) {\n\t\t\tnewState.tooltip = nextProps.tooltip || createTooltip( nextProps );\n\t\t}\n\t\telse if ( nextProps.tooltip && nextProps.tooltip !== prevState.tooltip ) {\n\t\t\tnewState.tooltip = nextProps.tooltip;\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\tdebug( 'Created new state from props...' );\n\t\t\tnewState.prevProps = nextProps;\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tdebug( 'Component did update...' );\n\t\tif ( this.props.bind ) {\n\t\t\tconst globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value && isNumber( this.state.value ) ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\thandleChange = ( event ) => {\n\t\tdebug( 'Handle change of input field...' );\n\t\tlet valid = event.target.validity.valid;\n\t\tlet value = event.target.value;\n\t\tthis.setState({\n\t\t\tvalue\n\t\t}, () => {\n\t\t\tif ( this.props.value ||\n\t\t\t\t(valid && value !== '' &&\n\t\t\t\tvalue !== '-' && value !== '.' && value !== '-.' )\n\t\t\t) {\n\t\t\t\tvalue = parseFloat( value );\n\t\t\t\tif ( isnan( value ) ) {\n\t\t\t\t\tvalue = '';\n\t\t\t\t}\n\t\t\t\tthis.props.onChange( value );\n\t\t\t\tif ( this.props.bind ) {\n\t\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tfinishChange = ( event ) => {\n\t\tconst { max, min, step } = this.props;\n\t\tdebug( 'Finished change...' );\n\t\tlet value = event.target.value;\n\t\tif ( contains( value, '/' ) ) {\n\t\t\tdebug( 'Encountered a fraction...' );\n\t\t\tlet vals = value.split( '/' );\n\t\t\tif ( vals[ 0 ] !== '' && vals[ 1 ] !== '' ) {\n\t\t\t\tvalue = parseFloat( vals[ 0 ]) / parseFloat( vals[ 1 ]);\n\t\t\t}\n\t\t}\n\t\tif ( isnan( value ) ) {\n\t\t\tvalue = '';\n\t\t}\n\t\telse if (\n\t\t\tvalue !== '' && value !== '-' &&\n\t\t\tvalue !== '.' && value !== '-.'\n\t\t) {\n\t\t\tvalue = parseFloat( value );\n\t\t}\n\t\tif ( value > max ) {\n\t\t\tvalue = max;\n\t\t}\n\t\telse if ( value < min ) {\n\t\t\tvalue = min;\n\t\t}\n\t\telse if (\n\t\t\tstep === 1.0 && value !== '' &&\n\t\t\tvalue !== '-' && value !== '.' && value !== '-.'\n\t\t) {\n\t\t\tvalue = value - value % this.props.step;\n\t\t}\n\t\tthis.props.onChange( value );\n\t\tthis.props.onBlur( value );\n\t\tif ( value !== this.state.value ) {\n\t\t\tthis.setState({\n\t\t\t\tvalue\n\t\t\t}, () => {\n\t\t\t\tif ( this.props.bind ) {\n\t\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tif ( this.props.value !== null ) {\n\t\t\tvalue = this.props.value;\n\t\t}\n\t\tif ( this.props.inline === true ) {\n\t\t\tconst input =\n\t\t\t\t<span className=\"input\" style={{ padding: '5px', ...this.props.style }}>\n\t\t\t\t\t{ this.props.legend ? <label htmlFor={this.id} > {this.props.legend} =  </label> : null }\n\t\t\t\t\t<input\n\t\t\t\t\t\tid={this.id}\n\t\t\t\t\t\ttype={this.props.numbersOnly ? 'number' : 'text'}\n\t\t\t\t\t\tname=\"input\"\n\t\t\t\t\t\tclassName=\"number-number-input\"\n\t\t\t\t\t\tdisabled={this.props.disabled}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tstep={this.props.step}\n\t\t\t\t\t\tmin={this.props.min}\n\t\t\t\t\t\tmax={this.props.max}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\twidth: '80px',\n\t\t\t\t\t\t\tpaddingLeft: '6px',\n\t\t\t\t\t\t\tmarginLeft: '3px',\n\t\t\t\t\t\t\t...this.props.inputStyle\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tonBlur={this.finishChange}\n\t\t\t\t\t\tonKeyPress={this.props.onKeyPress}\n\t\t\t\t\t\tonKeyDown={this.props.onKeyDown}\n\t\t\t\t\t\tonKeyUp={this.props.onKeyUp}\n\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t/>\n\t\t\t\t\t{ this.props.description ?\n\t\t\t\t\t\t<span>({this.props.description})</span> :\n\t\t\t\t\t\t<span />\n\t\t\t\t\t}\n\t\t\t\t</span>;\n\t\t\treturn this.props.disabled ?\n\t\t\t\tinput:\n\t\t\t\t<Tooltip id=\"number-input-tooltip-inline\" placement=\"top\" tooltip={this.state.tooltip} >\n\t\t\t\t\t{input}\n\t\t\t\t</Tooltip>;\n\t\t}\n\t\tlet input = <input\n\t\t\tid={this.id}\n\t\t\ttype={this.props.numbersOnly ? 'number' : 'text'}\n\t\t\tname=\"input\"\n\t\t\tclassName=\"number-number-input\"\n\t\t\tdisabled={this.props.disabled}\n\t\t\tvalue={value}\n\t\t\tstep={this.props.step}\n\t\t\tmin={this.props.min}\n\t\t\tmax={this.props.max}\n\t\t\tstyle={{\n\t\t\t\twidth: '80px',\n\t\t\t\tmarginLeft: '24px',\n\t\t\t\t...this.props.inputStyle\n\t\t\t}}\n\t\t\tonChange={this.handleChange}\n\t\t\tonBlur={this.finishChange}\n\t\t\tonKeyPress={this.props.onKeyPress}\n\t\t\tonKeyDown={this.props.onKeyDown}\n\t\t\tonKeyUp={this.props.onKeyUp}\n\t\t\tautoComplete=\"off\"\n\t\t/>;\n\t\treturn ( <div className=\"input\" style={{\n\t\t\tmarginBottom: '4px',\n\t\t\tmarginTop: '4px',\n\t\t\t...this.props.style\n\t\t}}>\n\t\t\t{ this.props.legend ?\n\t\t\t\t<span>\n\t\t\t\t\t<label htmlFor={this.id} >\n\t\t\t\t\t\t{isString( this.props.legend ) ?\n\t\t\t\t\t\t\tthis.props.legend+':' :\n\t\t\t\t\t\t\tthis.props.legend\n\t\t\t\t\t\t}\n\t\t\t\t\t</label>\n\t\t\t\t\t{ this.props.description ?\n\t\t\t\t\t\t<span> {this.props.description}</span> :\n\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t</span> : null\n\t\t\t}\n\t\t\t<Tooltip\n\t\t\t\tid=\"number-input-tooltip\" placement={this.props.tooltipPlacement}\n\t\t\t\ttooltip={this.state.tooltip}\n\t\t\t><span className=\"number-input-span\" >{input}</span></Tooltip>\n\t\t</div> );\n\t}\n}\n\n\n// PROPERTIES //\n\nNumberInput.defaultProps = {\n\tbind: '',\n\tdisabled: false,\n\tlegend: null,\n\tmin: NINF,\n\tmax: PINF,\n\tstep: 1,\n\tdefaultValue: 0,\n\tonBlur() {},\n\tonChange() {},\n\tonKeyDown() {},\n\tonKeyPress() {},\n\tonKeyUp() {},\n\tinline: false,\n\tnumbersOnly: true,\n\tstyle: {},\n\tinputStyle: {},\n\tvalue: null,\n\ttooltip: null,\n\ttooltipPlacement: 'left'\n};\n\nNumberInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmin: PropTypes.number,\n\tnumbersOnly: PropTypes.bool,\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\tstyle: PropTypes.object,\n\tinputStyle: PropTypes.object,\n\tvalue: PropTypes.number,\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'top', 'right', 'bottom', 'left' ])\n};\n\nNumberInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default NumberInput;\n","// MODULES //\n\nimport NumberInput from './main';\nimport CreateTooltip from './create_tooltip.js';\n\n\n// EXPORTS //\n\nexport const createTooltip = CreateTooltip;\nexport default NumberInput;\n","// MODULES //\n\nimport isArrayLike from '@stdlib/assert/is-array-like';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\n\n\n// MAIN //\n\n/**\n* Computes an element-wise subtraction.\n*\n* @param {NumberArray} arr - input array\n* @param {(NumberArray|number)} x - either an array of equal length or a scalar\n* @returns {NumberArray} output array\n*/\nfunction subtract( arr, x ) {\n\tconst isArr = isArrayLike( x );\n\tif ( !isArrayLike( arr ) ) {\n\t\tthrow new TypeError( 'invalid input argument. Must provide an array. Value: `' + arr + '`.' );\n\t}\n\tif ( !isArr && !isNumber( x ) ) {\n\t\tthrow new TypeError( 'invalid input argument. Second argument must either be an array or number primitive. Value: `' + x + '`.' );\n\t}\n\tconst len = arr.length;\n\tconst out = new Array( len );\n\n\t// Case 1: x is an array\n\tif ( isArr ) {\n\t\tif ( len !== x.length ) {\n\t\t\tthrow new Error( 'invalid input argument. Array to be added must have a length equal to that of the input array.' );\n\t\t}\n\t\tfor ( let i = 0; i < len; i++ ) {\n\t\t\tout[ i ] = arr[ i ] - x[ i ];\n\t\t}\n\t}\n\t// Case 2: scalar\n\telse {\n\t\tfor ( let i = 0; i < len; i++ ) {\n\t\t\tout[ i ] = arr[ i ] - x;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default subtract;\n"],"sourceRoot":""}