{"version":3,"sources":["../node_modules/@isle-project/components/dashboard/index.js","../node_modules/@isle-project/components/data-explorer/menu/mosaicplot.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/checkbox/main.js","../node_modules/@isle-project/components/input/checkbox/index.js"],"names":["Dashboard","Loadable","AXIS_OPTIONS","MosaicPlotMenu","data","variables","session","t","logAction","onCreated","onPlotDone","autoStart","title","content","onGenerate","showColors","axisLabels","length","addNotification","message","level","position","plotId","randomstring","action","output","id","onShare","DATA_EXPLORER_SHARE_MOSAIC","DATA_EXPLORER_MOSAIC","style","minHeight","legend","options","multi","defaultValue","defaultProps","props","popover","trigger","placement","rootClose","overlay","size","variant","className","CheckboxInput","context","newValue","setState","value","bind","global","lesson","event","target","checked","onChange","updateValue","state","this","globalVal","input","type","handleChange","disabled","aria-label","tooltip","inline","tooltipPlacement","marginLeft","role","tabIndex","color","onClick","handleSpanChange","onKeyPress","onSpanChange","noop","nextProps","prevState","newState","isEmptyObject","Input","propTypes","PropTypes","contextType","SessionContext"],"mappings":"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","file":"static/js/1338.6c19aed9.chunk.js","sourcesContent":["// MODULES //\n\nimport Loadable from '@isle-project/components/internal/loadable';\n\n\n// MAIN //\n\nconst Dashboard = Loadable( () => import( /* webpackChunkName: \"Dashboard\" */ './main.js' ) );\n\n\n// EXPORTS //\n\nexport default Dashboard;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport SelectInput from '@isle-project/components/input/select';\nimport Dashboard from '@isle-project/components/dashboard';\nimport randomstring from '@isle-project/utils/randomstring/alphanumeric';\nimport MosaicPlot from '@isle-project/components/plots/mosaicplot';\nimport { DATA_EXPLORER_SHARE_MOSAIC, DATA_EXPLORER_MOSAIC } from '@isle-project/constants/actions.js';\nimport QuestionButton from './../question_button.js';\n\n\n// VARIABLES //\n\nconst AXIS_OPTIONS = [\n\t'parallel to the axis',\n\t'horizontal',\n\t'perpendicular to the axis',\n\t'vertical'\n];\n\n\n// MAIN //\n\nconst MosaicPlotMenu = ({ data, variables, session, t, logAction, onCreated, onPlotDone }) => {\n\tconst generateMosaicPlot = ( variables, showColors, axisLabels ) => {\n\t\tif ( !variables || variables.length < 2 ) {\n\t\t\treturn session.addNotification({\n\t\t\t\ttitle: 'Select Variables',\n\t\t\t\tmessage: 'You need to select at least two variables for the mosaic plot',\n\t\t\t\tlevel: 'warning',\n\t\t\t\tposition: 'tr'\n\t\t\t});\n\t\t}\n\t\tconst plotId = randomstring( 6 );\n\t\tconst action = {\n\t\t\tvariables, showColors, plotId\n\t\t};\n\t\tconst onShare = () => {\n\t\t\tsession.addNotification({\n\t\t\t\ttitle: t('plot-shared'),\n\t\t\t\tmessage: t('plot-shared-message'),\n\t\t\t\tlevel: 'success',\n\t\t\t\tposition: 'tr'\n\t\t\t});\n\t\t\tlogAction( DATA_EXPLORER_SHARE_MOSAIC, {\n\t\t\t\tvariables, showColors, plotId\n\t\t\t});\n\t\t};\n\t\tconst output = <MosaicPlot\n\t\t\tdata={data}\n\t\t\tvariables={variables}\n\t\t\tshowColors={showColors}\n\t\t\taxisLabels={axisLabels}\n\t\t\tid={plotId}\n\t\t\taction={action}\n\t\t\tonShare={onShare}\n\t\t\tonPlotDone={onPlotDone}\n\t\t/>;\n\t\tlogAction( DATA_EXPLORER_MOSAIC, action );\n\t\tonCreated( output );\n\t};\n\treturn (\n\t\t<Dashboard\n\t\t\tautoStart={false}\n\t\t\ttitle={<span>\n\t\t\t\t{t('Mosaic Plot')}\n\t\t\t\t<QuestionButton title={t('Mosaic Plot')} content={t('Mosaic Plot-description')} />\n\t\t\t</span>}\n\t\t\tonGenerate={generateMosaicPlot}\n\t\t\tstyle={{ minHeight: 380 }}\n\t\t>\n\t\t\t<SelectInput\n\t\t\t\tlegend={t('variables')}\n\t\t\t\toptions={variables}\n\t\t\t\tmulti\n\t\t\t/>\n\t\t\t<CheckboxInput\n\t\t\t\tlegend={t('show-colors')}\n\t\t\t\tdefaultValue={false}\n\t\t\t/>\n\t\t\t<SelectInput\n\t\t\t\tlegend=\"Axis Label Rotation\"\n\t\t\t\toptions={AXIS_OPTIONS}\n\t\t\t/>\n\t\t</Dashboard>\n\t);\n};\n\n\n// PROPERTIES //\n\nMosaicPlotMenu.defaultProps = {\n\tlogAction() {},\n\tonPlotDone() {}\n};\n\nMosaicPlotMenu.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\tlogAction: PropTypes.func,\n\tonCreated: PropTypes.func.isRequired,\n\tonPlotDone: PropTypes.func,\n\tsession: PropTypes.object.isRequired,\n\tvariables: PropTypes.array.isRequired\n};\n\n\n// EXPORTS //\n\nexport default MosaicPlotMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={['hover', 'focus']} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport noop from '@stdlib/utils/noop';\nimport Input from '@isle-project/components/input/base';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport './checkbox.css';\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nclass CheckboxInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.state = {\n\t\t\tvalue: props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue,\n\t\t\tbind: props.bind,\n\t\t\tdefaultValue: props.defaultValue\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tlet newState = {};\n\t\tif ( nextProps.defaultValue !== prevState.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t\tnewState.defaultValue = nextProps.defaultValue;\n\t\t}\n\t\telse if ( nextProps.bind !== prevState.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t\tnewState.bind = nextProps.bind;\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif ( this.props.bind ) {\n\t\t\tlet globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateValue = ( newValue ) => {\n\t\tthis.setState({\n\t\t\tvalue: newValue\n\t\t}, () => {\n\t\t\tif ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\thandleChange = ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tthis.props.onChange( newValue );\n\t\tthis.updateValue( newValue );\n\t}\n\n\thandleSpanChange = ( event ) => {\n\t\tconst newValue = this.props.value !== null ? !this.props.value : !this.state.value;\n\t\tthis.props.onChange( newValue );\n\t\tthis.updateValue( newValue );\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tif ( this.props.value !== null ) {\n\t\t\tvalue = this.props.value;\n\t\t}\n\t\tconst input = <input\n\t\t\tclassName=\"checkbox-input\"\n\t\t\ttype=\"checkbox\"\n\t\t\tchecked={value}\n\t\t\tvalue=\"checkbox\"\n\t\t\tonChange={this.handleChange}\n\t\t\tdisabled={this.props.disabled}\n\t\t\taria-label={this.props.tooltip}\n\t\t></input>;\n\t\tif ( this.props.inline === true ) {\n\t\t\treturn (\n\t\t\t\t<Tooltip tooltip={this.props.tooltip} placement={this.props.tooltipPlacement} >\n\t\t\t\t\t<span style={{ marginLeft: '8px', ...this.props.style }}>\n\t\t\t\t\t\t{input}\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tcolor: this.props.disabled ? 'darkgray' : null\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonClick={this.handleSpanChange} onKeyPress={this.handleSpanChange}\n\t\t\t\t\t\t>{this.props.legend}</span>\n\t\t\t\t\t</span>\n\t\t\t\t</Tooltip>\n\t\t\t);\n\t\t}\n\t\tconst onSpanChange = this.props.disabled ? noop : this.handleSpanChange;\n\t\treturn (\n\t\t\t<Tooltip tooltip={this.props.tooltip} placement={this.props.tooltipPlacement} >\n\t\t\t\t<div className=\"input checkbox-input-div\" style={this.props.style}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: this.props.disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t\t>{this.props.legend}</span>\n\t\t\t\t</div>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\nCheckboxInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n"],"sourceRoot":""}