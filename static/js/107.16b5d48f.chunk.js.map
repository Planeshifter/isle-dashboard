{"version":3,"sources":["../node_modules/@isle-project/components/data-explorer/menu/contourchart.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/checkbox/index.js","../node_modules/@isle-project/components/input/checkbox/main.js","../node_modules/@isle-project/components/input/slider/index.js","../node_modules/@isle-project/components/input/slider/main.js"],"names":["ContourChartMenu","props","useState","variables","x","setX","y","setY","overlayPoints","setOverlayPoints","regressionMethod","setRegressionMethod","smoothSpan","setSmoothSpan","t","Header","as","title","content","Body","legend","defaultValue","options","onChange","menuPlacement","multi","value","isArray","min","max","step","disabled","contains","variant","block","onClick","data","onCreated","onSelected","logAction","session","plotId","randomstring","action","output","id","onShare","addNotification","message","level","position","DATA_EXPLORER_SHARE_CONTOURPLOT","DATA_EXPLORER_CONTOURPLOT","defaultProps","QuestionButton","popover","trigger","placement","rootClose","overlay","size","className","CheckboxInput","context","newValue","setState","bind","global","lesson","event","target","checked","updateValue","state","this","globalVal","input","type","handleChange","aria-label","tooltip","inline","tooltipPlacement","style","marginLeft","role","tabIndex","color","handleSpanChange","onKeyPress","onSpanChange","noop","nextProps","prevState","newState","isEmptyObject","Input","propTypes","PropTypes","string","bool","func","oneOfType","node","oneOf","object","contextType","SessionContext","SliderInput","debug","logger","createTooltip","PINF","NINF","parseFloat","valid","validity","prevProps","precision","minLabel","maxLabel","roundn","rangeInput","handleInputChange","width","float","display","rangeInputStyle","numberInput","name","onBlur","finishChange","marginTop","numberInputStyle","autoComplete","padding","opacity","show","hideTooltip","number"],"mappings":"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","file":"static/js/107.16b5d48f.chunk.js","sourcesContent":["// MODULES //\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport contains from '@stdlib/assert/contains';\nimport isArray from '@stdlib/assert/is-array';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport ContourChart from '@isle-project/components/plots/contourchart';\nimport SelectInput from '@isle-project/components/input/select';\nimport SliderInput from '@isle-project/components/input/slider';\nimport randomstring from '@isle-project/utils/randomstring/alphanumeric';\nimport { DATA_EXPLORER_SHARE_CONTOURPLOT, DATA_EXPLORER_CONTOURPLOT } from '@isle-project/constants/actions.js';\nimport QuestionButton from '../question_button.js';\n\n\n// MAIN //\n\nconst ContourChartMenu = ( props ) => {\n\tconst [ x, setX ] = useState( props.variables[ 0 ] );\n\tconst [ y, setY ] = useState( props.variables[ 1 ] );\n\tconst [ overlayPoints, setOverlayPoints ] = useState( false );\n\tconst [ regressionMethod, setRegressionMethod ] = useState( [] );\n\tconst [ smoothSpan, setSmoothSpan ] = useState( 0.66 );\n\n\tconst generateContourChart = () => {\n\t\tconst { data, onCreated, onSelected, logAction, session, t } = props;\n\t\tconst plotId = randomstring( 6 );\n\t\tconst action = {\n\t\t\tx, y, overlayPoints, regressionMethod, smoothSpan, plotId\n\t\t};\n\t\tconst output = <ContourChart\n\t\t\tid={plotId}\n\t\t\taction={action}\n\t\t\tdata={data}\n\t\t\tonShare={() => {\n\t\t\t\tsession.addNotification({\n\t\t\t\t\ttitle: t('plot-shared'),\n\t\t\t\t\tmessage: t('plot-shared-message'),\n\t\t\t\t\tlevel: 'success',\n\t\t\t\t\tposition: 'tr'\n\t\t\t\t});\n\t\t\t\tlogAction( DATA_EXPLORER_SHARE_CONTOURPLOT, action );\n\t\t\t}}\n\t\t\tx={x}\n\t\t\ty={y}\n\t\t\toverlayPoints={overlayPoints}\n\t\t\tregressionMethod={regressionMethod}\n\t\t\tsmoothSpan={smoothSpan}\n\t\t\tonSelected={onSelected}\n\t\t/>;\n\t\tlogAction( DATA_EXPLORER_CONTOURPLOT, action );\n\t\tonCreated( output );\n\t};\n\tconst { variables, t } = props;\n\treturn (\n\t\t<Card>\n\t\t\t<Card.Header as=\"h4\" >\n\t\t\t\t{t('Contour Chart')}\n\t\t\t\t<QuestionButton title={t('Contour Chart')} content={t('Contour Chart-description')} />\n\t\t\t</Card.Header>\n\t\t\t<Card.Body>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\tlegend={t('x-axis-variable')}\n\t\t\t\t\t\t\tdefaultValue={x}\n\t\t\t\t\t\t\toptions={variables}\n\t\t\t\t\t\t\tonChange={setX}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\tlegend={t('y-axis-variable')}\n\t\t\t\t\t\t\tdefaultValue={y}\n\t\t\t\t\t\t\toptions={variables}\n\t\t\t\t\t\t\tmenuPlacement=\"top\"\n\t\t\t\t\t\t\tonChange={setY}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<CheckboxInput\n\t\t\t\t\t\t\tlegend={t('overlay-observations')}\n\t\t\t\t\t\t\tdefaultValue={overlayPoints}\n\t\t\t\t\t\t\tonChange={() => {\n\t\t\t\t\t\t\t\tsetOverlayPoints( !overlayPoints );\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\tlegend={t('overlay-regression-line')}\n\t\t\t\t\t\t\tmulti={true}\n\t\t\t\t\t\t\toptions={[ 'linear', 'smooth' ]}\n\t\t\t\t\t\t\tonChange={( value ) => {\n\t\t\t\t\t\t\t\tif ( !isArray( value ) ) {\n\t\t\t\t\t\t\t\t\tvalue = [ value ];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tsetRegressionMethod( value );\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<SliderInput\n\t\t\t\t\t\t\tlegend={t('smoothing-parameter')}\n\t\t\t\t\t\t\tmin={0.01}\n\t\t\t\t\t\t\tmax={1}\n\t\t\t\t\t\t\tstep={0.01}\n\t\t\t\t\t\t\tdefaultValue={smoothSpan}\n\t\t\t\t\t\t\tdisabled={!contains( regressionMethod, 'smooth' )}\n\t\t\t\t\t\t\tonChange={setSmoothSpan}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Button variant=\"primary\" block onClick={generateContourChart}>\n\t\t\t\t\t{t('generate')}\n\t\t\t\t</Button>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\n\n// PROPERTIES //\n\nContourChartMenu.defaultProps = {\n\tlogAction() {},\n\tonSelected() {}\n};\n\nContourChartMenu.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\tlogAction: PropTypes.func,\n\tsession: PropTypes.object.isRequired,\n\tvariables: PropTypes.array.isRequired,\n\tonCreated: PropTypes.func.isRequired,\n\tonSelected: PropTypes.func\n};\n\n\n// EXPORTS //\n\nexport default ContourChartMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={['hover', 'focus']} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport noop from '@stdlib/utils/noop';\nimport Input from '@isle-project/components/input/base';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport './checkbox.css';\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nclass CheckboxInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.state = {\n\t\t\tvalue: props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue,\n\t\t\tbind: props.bind,\n\t\t\tdefaultValue: props.defaultValue\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tlet newState = {};\n\t\tif ( nextProps.defaultValue !== prevState.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t\tnewState.defaultValue = nextProps.defaultValue;\n\t\t}\n\t\telse if ( nextProps.bind !== prevState.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t\tnewState.bind = nextProps.bind;\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif ( this.props.bind ) {\n\t\t\tlet globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateValue = ( newValue ) => {\n\t\tthis.setState({\n\t\t\tvalue: newValue\n\t\t}, () => {\n\t\t\tif ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\thandleChange = ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tthis.props.onChange( newValue );\n\t\tthis.updateValue( newValue );\n\t}\n\n\thandleSpanChange = ( event ) => {\n\t\tconst newValue = this.props.value !== null ? !this.props.value : !this.state.value;\n\t\tthis.props.onChange( newValue );\n\t\tthis.updateValue( newValue );\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tif ( this.props.value !== null ) {\n\t\t\tvalue = this.props.value;\n\t\t}\n\t\tconst input = <input\n\t\t\tclassName=\"checkbox-input\"\n\t\t\ttype=\"checkbox\"\n\t\t\tchecked={value}\n\t\t\tvalue=\"checkbox\"\n\t\t\tonChange={this.handleChange}\n\t\t\tdisabled={this.props.disabled}\n\t\t\taria-label={this.props.tooltip}\n\t\t></input>;\n\t\tif ( this.props.inline === true ) {\n\t\t\treturn (\n\t\t\t\t<Tooltip tooltip={this.props.tooltip} placement={this.props.tooltipPlacement} >\n\t\t\t\t\t<span style={{ marginLeft: '8px', ...this.props.style }}>\n\t\t\t\t\t\t{input}\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tcolor: this.props.disabled ? 'darkgray' : null\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonClick={this.handleSpanChange} onKeyPress={this.handleSpanChange}\n\t\t\t\t\t\t>{this.props.legend}</span>\n\t\t\t\t\t</span>\n\t\t\t\t</Tooltip>\n\t\t\t);\n\t\t}\n\t\tconst onSpanChange = this.props.disabled ? noop : this.handleSpanChange;\n\t\treturn (\n\t\t\t<Tooltip tooltip={this.props.tooltip} placement={this.props.tooltipPlacement} >\n\t\t\t\t<div className=\"input checkbox-input-div\" style={this.props.style}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: this.props.disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t\t>{this.props.legend}</span>\n\t\t\t\t</div>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\nCheckboxInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport SliderInput from './main.js';\n\n\n// EXPORTS //\n\nexport default SliderInput;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport Badge from 'react-bootstrap/Badge';\nimport Input from '@isle-project/components/input/base';\nimport Tooltip from '@isle-project/components/tooltip';\nimport roundn from '@stdlib/math/base/special/roundn';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport PINF from '@stdlib/constants/math/float64-pinf';\nimport NINF from '@stdlib/constants/math/float64-ninf';\nimport SessionContext from '@isle-project/session/context.js';\nimport './slider.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:slider-input' );\n\n\n// FUNCTIONS //\n\nfunction createTooltip( props ) {\n\tlet tooltip = `Enter a${ props.step === 1 ? 'n integer' : ' number'} `;\n\tif ( props.max !== PINF && props.min !== NINF ) {\n\t\ttooltip += `between ${props.min} and ${props.max}:`;\n\t} else if ( props.min !== NINF ) {\n\t\ttooltip += `larger or equal to ${props.min}:`;\n\t} else if ( props.max !== PINF ) {\n\t\ttooltip += `smaller or equal to ${props.max}:`;\n\t} else {\n\t\ttooltip += ':';\n\t}\n\treturn tooltip;\n}\n\n\n// MAIN //\n\n/**\n* A slider input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} legend - caption of the input\n* @property {number} defaultValue - The starting value of the slider\n* @property {number} min - The minimum value of the slider\n* @property {number} max - The maximum value of the slider\n* @property {(number|string)} step - step size of the slider\n* @property {boolean} inline - controls whether to place the slider inline with text or outside\n* @property {number} precision - rounding of the input. The value will be rounded to have no more significant digits than the precision. For example, if one wishes to only use integers, a precision of 10 would be used, while if one wishes to round to the hundreds place, one would use a precision of 0.001\n* @property {boolean} disabled - controls whether the slider input is active or not. If set to true, the slider will be present on the screen, albeit grayed-out\n* @property {string} minLabel - label to be displayed to the left of slider instead of minimum value\n* @property {string} maxLabel - label to be displayed to the right of slider instead of maximum value\n* @property {boolean} hideTooltip - controls whether to hide tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} numberInputStyle - CSS inline styles for number input component\n* @property {Object} rangeInputStyle - CSS inline style for range input component\n* @property {Function} onChange - callback invoked with the new value when the slider value changes\n*/\nclass SliderInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.state = {\n\t\t\ttooltip: createTooltip( props ),\n\t\t\tvalue: props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue,\n\t\t\tprevProps: props\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tlet newState = {};\n\t\tconst { prevProps } = prevState;\n\t\tif ( nextProps.defaultValue !== prevProps.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t} else if ( nextProps.bind !== prevProps.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t}\n\t\tif ( nextProps.min !== prevProps.min || nextProps.max !== prevProps.max ) {\n\t\t\tnewState.tooltip = createTooltip( nextProps );\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\tnewState.prevProps = nextProps;\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif ( this.props.bind ) {\n\t\t\tlet globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tfinishChange = ( event ) => {\n\t\tdebug( 'Finalizing change...' );\n\t\tconst { max, min, step } = this.props;\n\t\tlet value = event.target.value;\n\t\tif ( value !== '' ) {\n\t\t\tvalue = parseFloat( value );\n\t\t}\n\t\tif ( value > max ) {\n\t\t\tvalue = max;\n\t\t}\n\t\telse if ( value < min ) {\n\t\t\tvalue = min;\n\t\t}\n\t\telse if ( step === 1.0 && value !== '' ) {\n\t\t\tvalue = value - value % this.props.step;\n\t\t}\n\t\tdebug( `Setting state value to: ${value}...` );\n\t\tif ( value !== this.state.value ) {\n\t\t\tthis.setState({\n\t\t\t\tvalue\n\t\t\t}, () => {\n\t\t\t\tthis.props.onChange( value );\n\t\t\t\tif ( this.props.bind ) {\n\t\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\thandleInputChange = ( event ) => {\n\t\tconst valid = event.target.validity.valid;\n\t\tlet value = event.target.value;\n\t\tdebug( `Input value changed to ${value}` );\n\t\tthis.setState({\n\t\t\tvalue\n\t\t}, () => {\n\t\t\tif ( valid && value !== '' ) {\n\t\t\t\tvalue = parseFloat( value );\n\t\t\t\tthis.props.onChange( value );\n\t\t\t\tif ( this.props.bind ) {\n\t\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tconst { legend, disabled, inline, min, max, precision, step, minLabel, maxLabel } = this.props;\n\t\tif ( value !== '' ) {\n\t\t\troundn( value, ( -1.0 )*precision );\n\t\t}\n\t\tconst rangeInput = <input\n\t\t\ttype=\"range\"\n\t\t\tclassName=\"slider-range-input\"\n\t\t\tmin={min}\n\t\t\tmax={max}\n\t\t\tstep={step}\n\t\t\tvalue={value}\n\t\t\tdisabled={disabled}\n\t\t\tonChange={this.handleInputChange}\n\t\t\tstyle={{\n\t\t\t\twidth: '160px',\n\t\t\t\tfloat: inline ? 'none' : 'left',\n\t\t\t\tdisplay: inline ? 'inline' : 'block',\n\t\t\t\t...this.props.rangeInputStyle\n\t\t\t}}\n\t\t/>;\n\t\tconst numberInput = <input\n\t\t\ttype=\"number\"\n\t\t\tname=\"input\"\n\t\t\tclassName=\"slider-number-input\"\n\t\t\tdisabled={disabled}\n\t\t\tmin={min}\n\t\t\tmax={max}\n\t\t\tstep={step}\n\t\t\tvalue={value}\n\t\t\tonChange={this.handleInputChange}\n\t\t\tonBlur={this.finishChange}\n\t\t\tstyle={{\n\t\t\t\tfloat: inline ? 'none' : 'right',\n\t\t\t\tmarginTop: legend && !inline ? -22 : 0,\n\t\t\t\t...this.props.numberInputStyle\n\t\t\t}}\n\t\t\tautoComplete=\"off\"\n\t\t/>;\n\n\t\tif ( inline ) {\n\t\t\treturn (\n\t\t\t\t<span className=\"input\" style={{\n\t\t\t\t\tpadding: '5px',\n\t\t\t\t\topacity: disabled ? 0.2 : 1.0,\n\t\t\t\t\t...this.props.style\n\t\t\t\t}}>\n\t\t\t\t\t{ legend ?\n\t\t\t\t\t\t<label>{legend}:</label> :\n\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t\t<span className=\"slider-range-wrapper\" >\n\t\t\t\t\t\t<Badge variant=\"secondary\" >{minLabel || min}</Badge>\n\t\t\t\t\t\t{rangeInput}\n\t\t\t\t\t\t<Badge variant=\"secondary\" >{maxLabel || max}</Badge>\n\t\t\t\t\t</span>\n\t\t\t\t\t{numberInput}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Tooltip\n\t\t\t\tid=\"sliderTooltip\"\n\t\t\t\tplacement=\"top\"\n\t\t\t\tshow={!this.props.hideTooltip}\n\t\t\t\ttooltip={disabled ? 'The slider input is disabled right now.' : this.state.tooltip}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"slider-outer-div input\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\topacity: disabled ? 0.2 : 1.0,\n\t\t\t\t\t\t...this.props.style\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{ legend ?\n\t\t\t\t\t\t<label>{legend}:</label> :\n\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t\t<br />\n\t\t\t\t\t<span className=\"slider-range-wrapper\" >\n\t\t\t\t\t\t<Badge variant=\"secondary\" style={{ float: 'left' }} >{minLabel || min}</Badge>\n\t\t\t\t\t\t{rangeInput}\n\t\t\t\t\t\t<Badge variant=\"secondary\" style={{ float: 'left' }} >{maxLabel || max}</Badge>\n\t\t\t\t\t</span>\n\t\t\t\t\t{numberInput}\n\t\t\t\t\t<br />\n\t\t\t\t</div>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nSliderInput.defaultProps = {\n\tinline: false,\n\tlegend: null,\n\tmin: 0,\n\tminLabel: null,\n\tmax: 100,\n\tmaxLabel: null,\n\tstep: 1,\n\tdefaultValue: 10,\n\tonChange() {},\n\tprecision: 10,\n\tdisabled: false,\n\thideTooltip: false,\n\tstyle: {},\n\tnumberInputStyle: {},\n\trangeInputStyle: {}\n};\n\nSliderInput.propTypes = {\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmaxLabel: PropTypes.string,\n\tmin: PropTypes.number,\n\tminLabel: PropTypes.string,\n\tonChange: PropTypes.func,\n\tprecision: PropTypes.number,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\thideTooltip: PropTypes.bool,\n\tstyle: PropTypes.object,\n\tnumberInputStyle: PropTypes.object,\n\trangeInputStyle: PropTypes.object\n};\n\nSliderInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default SliderInput;\n"],"sourceRoot":""}