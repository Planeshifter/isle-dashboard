{"version":3,"sources":["../node_modules/@isle-project/components/key-controls/main.js"],"names":["debug","logger","KeyControls","props","keys","objectKeys","actions","container","join","ReactDOM","findDOMNode","addEventListener","triggerEvent","err","message","document","triggerDocEvent","removeEventListener","event","keyName","key","fn","modifier","ctrlKey","shiftKey","altKey","metaKey","activeElement","isFunction","preventDefault","stopPropagation","this","addListeners","prevProps","removeListeners","Component","defaultProps","contextType","SessionContext"],"mappings":"8OAcMA,EAAQC,IAAQ,qBAWhBC,E,kDACL,WAAaC,GAAS,IAAD,6BACpB,cAAOA,GADa,2CAsBN,WACd,IAAMC,EAAOC,IAAY,EAAKF,MAAMG,SAEpC,GADAN,EAAM,mCAAD,OAAqC,EAAKG,MAAMI,UAAY,YAAc,WAA1E,aAAyFH,EAAKI,KAAM,QACpG,EAAKL,MAAMI,UACf,IACcE,IAASC,YAAa,EAAKP,MAAMI,WACzCI,iBAAkB,UAAW,EAAKC,cACtC,MAAQC,GACTb,EAAOa,EAAIC,cAGZC,SAASJ,iBAAkB,UAAW,EAAKK,oBAjCxB,8CAqCH,SAAET,GACnB,IAAMH,EAAOC,IAAY,EAAKF,MAAMG,SAEpC,GADAN,EAAM,sCAAD,OAAwCO,EAAY,YAAc,WAAlE,aAAiFH,EAAKI,KAAM,QAC5FD,EACJ,IACcE,IAASC,YAAaH,GAC9BU,oBAAqB,UAAW,EAAKL,cACzC,MAAQC,GACTb,EAAOa,EAAIC,SAGbC,SAASE,oBAAqB,UAAW,EAAKD,oBAhD1B,2CAmDN,SAAEE,GAChB,IAAMC,EAAUD,EAAME,IACtBpB,EAAM,qCAAD,OAAuCmB,IAC5C,IAAME,EAAK,EAAKlB,MAAMG,QAASa,GACzBG,EAAWJ,EAAMK,SAAWL,EAAMM,UAAYN,EAAMO,QAAUP,EAAMQ,QAEzEX,SAASY,gBAAkB,EAAKxB,MAAMI,YACrCe,GACDM,IAAYP,KAEZH,EAAMW,iBACNX,EAAMY,kBACNT,EAAIH,OA/De,8CAmEH,SAAEA,GACnB,IAAMC,EAAUD,EAAME,IAChBE,EAAWJ,EAAMK,SAAWL,EAAMM,UAAYN,EAAMO,QAAUP,EAAMQ,QAC1E1B,EAAM,oCAAD,OAAsCmB,IAC3C,IAAME,EAAK,EAAKlB,MAAMG,QAASa,IACzBG,GAAYM,IAAYP,KAC7BH,EAAMW,iBACNX,EAAMY,kBACNT,EAAIH,OA3Ee,E,qDAIrB,WACClB,EAAO,4BACP+B,KAAKC,iB,gCAGN,SAAoBC,GACdF,KAAK5B,MAAMI,YAAc0B,EAAU1B,YACvCP,EAAO,uDACP+B,KAAKG,gBAAiBD,EAAU1B,WAChCwB,KAAKC,kB,kCAIP,WACChC,EAAO,8BACP+B,KAAKG,oB,oBA4DN,WACC,OAAO,S,GAjFiBC,aAwF1BjC,EAAYkC,aAAe,CAC1B9B,QAAS,GACTC,UAAW,MAQZL,EAAYmC,YAAcC,IAKXpC","file":"static/js/KeyControls.21385e34.chunk.js","sourcesContent":["\n// MODULES //\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport objectKeys from '@stdlib/utils/keys';\nimport isFunction from '@stdlib/assert/is-function';\nimport SessionContext from '@isle-project/session/context.js';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:key-controls' );\n\n\n// MAIN //\n\n/**\n* Keyboard controls.\n*\n* @property {Object} actions - object mapping key codes to events\n* @property {Node} container - DOM node for which to attach event listeners\n*/\nclass KeyControls extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t}\n\n\tcomponentDidMount() {\n\t\tdebug( 'Component has mounted...' );\n\t\tthis.addListeners();\n\t}\n\n\tcomponentDidUpdate( prevProps ) {\n\t\tif ( this.props.container !== prevProps.container ) {\n\t\t\tdebug( 'Container has changed, re-attach event listeners...' );\n\t\t\tthis.removeListeners( prevProps.container );\n\t\t\tthis.addListeners();\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tdebug( 'Component has unmounted...' );\n\t\tthis.removeListeners();\n\t}\n\n\taddListeners = () => {\n\t\tconst keys = objectKeys( this.props.actions );\n\t\tdebug( `Add keydown event listeners for ${this.props.container ? 'container' : 'document'}: ${keys.join( ', ')}` );\n\t\tif ( this.props.container ) {\n\t\t\ttry {\n\t\t\t\tconst node = ReactDOM.findDOMNode( this.props.container );\n\t\t\t\tnode.addEventListener( 'keydown', this.triggerEvent );\n\t\t\t} catch ( err ) {\n\t\t\t\tdebug( err.message );\n\t\t\t}\n\t\t} else {\n\t\t\tdocument.addEventListener( 'keydown', this.triggerDocEvent );\n\t\t}\n\t}\n\n\tremoveListeners = ( container ) => {\n\t\tconst keys = objectKeys( this.props.actions );\n\t\tdebug( `Remove keydown event listeners for ${container ? 'container' : 'document'}: ${keys.join( ', ')}` );\n\t\tif ( container ) {\n\t\t\ttry {\n\t\t\t\tconst node = ReactDOM.findDOMNode( container );\n\t\t\t\tnode.removeEventListener( 'keydown', this.triggerEvent );\n\t\t\t} catch ( err ) {\n\t\t\t\tdebug( err.message );\n\t\t\t}\n\t\t}\n\t\tdocument.removeEventListener( 'keydown', this.triggerDocEvent );\n\t}\n\n\ttriggerEvent = ( event ) => {\n\t\tconst keyName = event.key;\n\t\tdebug( `Received key press for container: ${keyName}` );\n\t\tconst fn = this.props.actions[ keyName ];\n\t\tconst modifier = event.ctrlKey || event.shiftKey || event.altKey || event.metaKey;\n\t\tif (\n\t\t\tdocument.activeElement === this.props.container &&\n\t\t\t!modifier &&\n\t\t\tisFunction( fn )\n\t\t) {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\t\tfn( event );\n\t\t}\n\t}\n\n\ttriggerDocEvent = ( event ) => {\n\t\tconst keyName = event.key;\n\t\tconst modifier = event.ctrlKey || event.shiftKey || event.altKey || event.metaKey;\n\t\tdebug( `Received key press for document: ${keyName}` );\n\t\tconst fn = this.props.actions[ keyName ];\n\t\tif ( !modifier && isFunction( fn ) ) {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\t\tfn( event );\n\t\t}\n\t}\n\n\trender() {\n\t\treturn null;\n\t}\n}\n\n\n// PROPERTIES //\n\nKeyControls.defaultProps = {\n\tactions: {},\n\tcontainer: null\n};\n\nKeyControls.propTypes = {\n\tactions: PropTypes.objectOf( PropTypes.func ),\n\tcontainer: PropTypes.oneOfType([ PropTypes.object, PropTypes.element ])\n};\n\nKeyControls.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default KeyControls;\n"],"sourceRoot":""}