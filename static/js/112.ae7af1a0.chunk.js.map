{"version":3,"sources":["../node_modules/@isle-project/components/node_modules/react-bootstrap/esm/ProgressBar.js","../node_modules/@isle-project/components/node_modules/react-bootstrap/esm/ElementChildren.js","../node_modules/@isle-project/components/spreadsheet-upload/main.js","../node_modules/csv-parse/lib/index.js","../node_modules/csv-parse/lib/ResizeableBuffer.js","../node_modules/detect-csv/index.js","../node_modules/@isle-project/components/input/checkbox/index.js","../node_modules/@isle-project/components/input/checkbox/main.js"],"names":["getPercentage","now","min","max","percentage","Math","round","renderProgressBar","_ref","ref","_classNames","label","srOnly","striped","animated","className","style","variant","bsPrefix","props","_objectWithoutPropertiesLoose","React","createElement","_extends","role","classNames","width","ProgressBar","forwardRef","_ref2","isChild","useBootstrapPrefix","children","wrapperProps","func","index","Children","map","child","isValidElement","cloneElement","displayName","defaultProps","addResources","SpreadsheetUpload","setState","uploading","reader","FileReader","selectedFile","fileUpload","files","addEventListener","onFileRead","event","lengthComputable","percentCompleted","loaded","total","readAsText","delimiter","columns","text","target","result","csv","detect","isNull","idx","replace","indexOf","firstLine","substring","split","state","header","x","i","parse","cast","err","output","context","addNotification","title","t","message","level","position","onUpload","evt","stopPropagation","preventDefault","dt","dataTransfer","file","items","kind","getAsFile","type","completed","this","Header","as","Body","htmlFor","id","accept","onChange","handleFileUpload","margin","onDrop","onFileDrop","onDragOver","ignoreDrag","onDragEnd","minHeight","border","padding","legend","defaultValue","value","Component","contextType","SessionContext","withTranslation","_wrapNativeSuper","_slicedToArray","_toConsumableArray","_objectSpread","_classCallCheck","_createClass","_inherits","_createSuper","Transform","ResizeableBuffer","boms","Buffer","from","Parser","_Transform","_super","_this","opts","arguments","length","undefined","call","readableObjectMode","encoding","__originalOptions","__normalizeOptions","key","options","opt","underscore","CsvError","concat","JSON","stringify","bom","fnCastField","cast_date","date","Date","isNaN","fnFirstLineToHeaders","Array","isArray","normalizeColumnsArray","columns_duplicates_to_array","comment","isBuffer","delimiter_json","escape","Error","test","parseInt","Number","isInteger","from_line","ignore_last_delimiters","floor","info","max_record_size","objname","toString","on_record","quote","raw","record_delimiter","rd","relax","relax_column_count","relax_column_count_less","relax_column_count_more","skip_empty_lines","skip_lines_with_empty_values","skip_lines_with_error","rtrim","ltrim","trim","to","to_line","comment_lines","empty_lines","invalid_field_length","lines","records","bomSkipped","castField","commenting","error","enabled","escaping","escapeIsQuote","compare","expectedRecordLength","field","firstLineToHeaders","Object","assign","needMoreDataSize","apply","previousBuf","quoting","stop","rawBuffer","record","recordHasError","record_length","recordDelimiterMaxLength","v","trimChars","wasQuoting","wasRowDelimiter","buf","callback","__parse","nextBuf","end","_this$options","_this$state","push","slice","pos","bufLen","__needMoreData","__autoDiscoverRecordDelimiter","chr","append","__isEscape","__isQuote","nextChr","isNextChrTrimable","__isCharTrimable","isNextChrComment","__compareBytes","isNextChrDelimiter","__isDelimiter","isNextChrRecordDelimiter","__isRecordDelimiter","__error","String","fromCharCode","__context","prepend","_err","recordDelimiterLength","__resetField","__resetRecord","errField","__onField","errRecord","__onRecord","delimiterLength","_errField","_err2","lappend","rappend","_err3","_err4","_errField2","_errRecord","_this$options2","_this$state2","recordLength","isRecordEmpty","__firstLineToColumns","finalErr","obj","l","disabled","name","_err5","__push","_err6","_err7","_err8","_err9","_err10","headers","normalizedHeaders","reset","_this$options3","_this$state3","trimRight","_this$__cast","__cast","_this$__cast2","f","_this$options4","__isFloat","parseFloat","sourceBuf","targetBuf","targetPos","firstByte","sourceLength","_this$state4","_this$options5","loop1","del","j","rdLength","msg","emit","column","data","argument","isObject","parser","on","read","setImmediate","write","_Error","_super2","code","_this2","join","captureStackTrace","_assertThisInitialized","_len","contexts","_key","_i","_contexts","module","exports","str","_","match","toLowerCase","every","normalizedColumns","size","alloc","val","resize","copy","_length","_buf","clone","Uint8Array","prototype","determineMost","chunk","maxChar","currValue","ignoreString","itemCount","maxValue","forEach","item","delimiters","newlines","newline","CheckboxInput","newValue","bind","global","lesson","checked","updateValue","session","globalVal","input","handleChange","aria-label","tooltip","inline","placement","tooltipPlacement","marginLeft","tabIndex","color","onClick","handleSpanChange","onKeyPress","onSpanChange","noop","nextProps","prevState","newState","isEmptyObject","Input","propTypes","PropTypes","string","bool","oneOfType","node","oneOf","object"],"mappings":"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","file":"static/js/112.ae7af1a0.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nvar ROUND_PRECISION = 1000;\n/**\n * Validate that children, if any, are instances of `<ProgressBar>`.\n */\n\nfunction onlyProgressBar(props, propName, componentName) {\n  var children = props[propName];\n\n  if (!children) {\n    return null;\n  }\n\n  var error = null;\n  React.Children.forEach(children, function (child) {\n    if (error) {\n      return;\n    }\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n\n\n    var element = /*#__PURE__*/React.createElement(ProgressBar, null);\n    if (child.type === element.type) return;\n    var childType = child.type;\n    var childIdentifier = React.isValidElement(child) ? childType.displayName || childType.name || childType : child;\n    error = new Error(\"Children of \" + componentName + \" can contain only ProgressBar \" + (\"components. Found \" + childIdentifier + \".\"));\n  });\n  return error;\n}\n\nvar defaultProps = {\n  min: 0,\n  max: 100,\n  animated: false,\n  isChild: false,\n  srOnly: false,\n  striped: false\n};\n\nfunction getPercentage(now, min, max) {\n  var percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\n\nfunction renderProgressBar(_ref, ref) {\n  var _classNames;\n\n  var min = _ref.min,\n      now = _ref.now,\n      max = _ref.max,\n      label = _ref.label,\n      srOnly = _ref.srOnly,\n      striped = _ref.striped,\n      animated = _ref.animated,\n      className = _ref.className,\n      style = _ref.style,\n      variant = _ref.variant,\n      bsPrefix = _ref.bsPrefix,\n      props = _objectWithoutPropertiesLoose(_ref, [\"min\", \"now\", \"max\", \"label\", \"srOnly\", \"striped\", \"animated\", \"className\", \"style\", \"variant\", \"bsPrefix\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, props, {\n    role: \"progressbar\",\n    className: classNames(className, bsPrefix + \"-bar\", (_classNames = {}, _classNames[\"bg-\" + variant] = variant, _classNames[bsPrefix + \"-bar-animated\"] = animated, _classNames[bsPrefix + \"-bar-striped\"] = animated || striped, _classNames)),\n    style: _extends({\n      width: getPercentage(now, min, max) + \"%\"\n    }, style),\n    \"aria-valuenow\": now,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max\n  }), srOnly ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\"\n  }, label) : label);\n}\n\nvar ProgressBar = React.forwardRef(function (_ref2, ref) {\n  var isChild = _ref2.isChild,\n      props = _objectWithoutPropertiesLoose(_ref2, [\"isChild\"]);\n\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n\n  var min = props.min,\n      now = props.now,\n      max = props.max,\n      label = props.label,\n      srOnly = props.srOnly,\n      striped = props.striped,\n      animated = props.animated,\n      bsPrefix = props.bsPrefix,\n      variant = props.variant,\n      className = props.className,\n      children = props.children,\n      wrapperProps = _objectWithoutPropertiesLoose(props, [\"min\", \"now\", \"max\", \"label\", \"srOnly\", \"striped\", \"animated\", \"bsPrefix\", \"variant\", \"className\", \"children\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, wrapperProps, {\n    className: classNames(className, bsPrefix)\n  }), children ? map(children, function (child) {\n    return cloneElement(child, {\n      isChild: true\n    });\n  }) : renderProgressBar({\n    min: min,\n    now: now,\n    max: max,\n    label: label,\n    srOnly: srOnly,\n    striped: striped,\n    animated: animated,\n    bsPrefix: bsPrefix,\n    variant: variant\n  }, ref));\n});\nProgressBar.displayName = 'ProgressBar';\nProgressBar.defaultProps = defaultProps;\nexport default ProgressBar;","import React from 'react';\n/**\n * Iterates through children that are typically specified as `props.children`,\n * but only maps over children that are \"valid elements\".\n *\n * The mapFunction provided index will be normalised to the components mapped,\n * so an invalid component would not increase the index.\n *\n */\n\nfunction map(children, func) {\n  var index = 0;\n  return React.Children.map(children, function (child) {\n    return React.isValidElement(child) ? func(child, index++) : child;\n  });\n}\n/**\n * Iterates through children that are \"valid elements\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n */\n\n\nfunction forEach(children, func) {\n  var index = 0;\n  React.Children.forEach(children, function (child) {\n    if (React.isValidElement(child)) func(child, index++);\n  });\n}\n\nexport { map, forEach };","// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Card from 'react-bootstrap/Card';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport parse from 'csv-parse';\nimport detect from 'detect-csv';\nimport replace from '@stdlib/string/replace';\nimport isNull from '@stdlib/assert/is-null';\nimport round from '@stdlib/math/base/special/round';\nimport SessionContext from '@isle-project/session/context.js';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport { addResources } from '@isle-project/locales';\n\n\n// VARIABLES //\n\naddResources( 'SpreadsheetUpload' );\n\n\n// MAIN //\n\n/**\n* Component allowing students upload a *.csv spreadsheet.\n*\n* @property {string} title - card title\n* @property {Function} onUpload - callback function called with ( err, output ) after loading of file\n*/\nclass SpreadsheetUpload extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tthis.state = {\n\t\t\tpercentCompleted: 0,\n\t\t\tuploading: false,\n\t\t\theader: true\n\t\t};\n\t}\n\n\t/**\n\t* Creates FileReader and attaches event listener for when the file is ready.\n\t*/\n\thandleFileUpload = () => {\n\t\tthis.setState({\n\t\t\tuploading: true\n\t\t}, () => {\n\t\t\tconst reader = new FileReader();\n\t\t\tconst selectedFile = this.fileUpload.files[ 0 ];\n\t\t\treader.addEventListener( 'load', this.onFileRead, false );\n\t\t\treader.addEventListener( 'progress', ( event ) => {\n\t\t\t\tif ( event.lengthComputable ) {\n\t\t\t\t\tconst percentCompleted = event.loaded / event.total;\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tpercentCompleted\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, false );\n\t\t\treader.readAsText( selectedFile, 'utf-8' );\n\t\t});\n\t}\n\n\t/**\n\t* Event handler invoked once student-supplied CSV file has been uploaded. Parses the file and extracts its categorical and quantitative variables.\n\t*/\n\tonFileRead = ( event ) => {\n\t\tlet text = event.target.result;\n\t\tconst csv = detect( text );\n\t\tlet delimiter;\n\t\tif ( !isNull( csv ) ) {\n\t\t\tdelimiter = csv.delimiter;\n\t\t} else {\n\t\t\tdelimiter = ',';\n\t\t}\n\t\ttext = replace( text, '\\r', '' ); // Remove carriage returns for search in L73 to return correct index\n\t\tlet columns;\n\t\tconst idx = text.indexOf( '\\n' );\n\t\tlet firstLine = text.substring( 0, idx ).split( delimiter );\n\t\tif ( this.state.header ) {\n\t\t\tcolumns = firstLine;\n\t\t\ttext = text.substring( idx+1 );\n\t\t} else {\n\t\t\tcolumns = firstLine.map( ( x, i ) => {\n\t\t\t\treturn 'VAR_'+(i+1);\n\t\t\t});\n\t\t}\n\t\tthis.setState({\n\t\t\tpercentCompleted: 0,\n\t\t\tuploading: false\n\t\t});\n\t\tparse( text, { delimiter, columns, cast: true }, ( err, output ) => {\n\t\t\tif ( err ) {\n\t\t\t\tconst session = this.context;\n\t\t\t\tsession.addNotification({\n\t\t\t\t\ttitle: this.props.t('error-title'),\n\t\t\t\t\tmessage: `${this.props.t('error-message')}: ${err.message}`,\n\t\t\t\t\tlevel: 'error',\n\t\t\t\t\tposition: 'tr'\n\t\t\t\t});\n\t\t\t\treturn this.props.onUpload( err );\n\t\t\t}\n\t\t\tthis.props.onUpload( null, output );\n\t\t});\n\t}\n\n\t/**\n\t* Event handler ignoring default dragging behavior and preventing bubbling-up.\n\t*/\n\tignoreDrag = ( evt ) => {\n\t\tevt.stopPropagation();\n\t\tevt.preventDefault();\n\t}\n\n\t/**\n\t* Event handler invoked when user drags CSV file onto the upload area.\n\t*/\n\tonFileDrop = ( evt ) => {\n\t\tevt.stopPropagation();\n\t\tevt.preventDefault();\n\t\tconst dt = evt.dataTransfer;\n\t\tconst reader = new FileReader();\n\t\tlet file = null;\n\t\tif ( dt.items ) {\n\t\t\tif ( dt.items[ 0 ].kind === 'file' ) {\n\t\t\t\tfile = dt.items[ 0 ].getAsFile();\n\t\t\t}\n\t\t} else {\n\t\t\tfile = dt.files[ 0 ];\n\t\t}\n\t\tif ( file ) {\n\t\t\tconst mimeType = file.type;\n\t\t\tif ( mimeType !== 'text/csv' ) {\n\t\t\t\tconst session = this.context;\n\t\t\t\treturn session.addNotification({\n\t\t\t\t\ttitle: this.props.t('no-csv'),\n\t\t\t\t\tmessage: this.props.t('no-csv-message'),\n\t\t\t\t\tlevel: 'error',\n\t\t\t\t\tposition: 'tr'\n\t\t\t\t});\n\t\t\t}\n\t\t\treader.addEventListener( 'load', this.onFileRead, false );\n\t\t\treader.readAsText( file, 'utf-8' );\n\t\t}\n\t}\n\n\trender() {\n\t\tconst completed = round( this.state.percentCompleted * 100.0 );\n\t\treturn ( <Card>\n\t\t\t<Card.Header as=\"h2\">\n\t\t\t\t{this.props.title || this.props.t('title')}\n\t\t\t</Card.Header>\n\t\t\t<Card.Body>\n\t\t\t\t<label htmlFor=\"CSVUpload\">{this.props.t('csv-upload-prompt')}:</label>\n\t\t\t\t<input\n\t\t\t\t\tid=\"CSVUpload\"\n\t\t\t\t\ttype=\"file\"\n\t\t\t\t\taccept=\".csv\"\n\t\t\t\t\tonChange={this.handleFileUpload}\n\t\t\t\t\tref={fileUpload => {\n\t\t\t\t\t\tthis.fileUpload = fileUpload;\n\t\t\t\t\t}}\n\t\t\t\t\tstyle={{ margin: 'auto' }}\n\t\t\t\t/>\n\t\t\t\t<p>{this.props.t('or')}</p>\n\t\t\t\t<div\n\t\t\t\t\tonDrop={this.onFileDrop}\n\t\t\t\t\tonDragOver={this.ignoreDrag}\n\t\t\t\t\tonDragEnd={this.ignoreDrag}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tminHeight: '150px',\n\t\t\t\t\t\twidth: '250px',\n\t\t\t\t\t\tborder: '1px solid blue',\n\t\t\t\t\t\tpadding: '10px'\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<span>{this.props.t('drop-file')}</span>\n\t\t\t\t</div>\n\t\t\t\t<CheckboxInput\n\t\t\t\t\tlegend={this.props.t('first-row-names')}\n\t\t\t\t\tdefaultValue={true}\n\t\t\t\t\tonChange={( value ) => {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\theader: value\n\t\t\t\t\t\t});\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t{ this.state.uploading ?\n\t\t\t\t\t<ProgressBar now={completed} label={`${completed}%`} /> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t</Card.Body>\n\t\t</Card> );\n\t}\n}\n\n\n// PROPERTIES //\n\nSpreadsheetUpload.defaultProps = {\n\tonUpload() {},\n\ttitle: null\n};\n\nSpreadsheetUpload.propTypes = {\n\tonUpload: PropTypes.func,\n\ttitle: PropTypes.string\n};\n\nSpreadsheetUpload.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default withTranslation( 'SpreadsheetUpload' )( SpreadsheetUpload );\n","var _assertThisInitialized = require(\"/home/philipp/git/cmu-isle/isle-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _wrapNativeSuper = require(\"/home/philipp/git/cmu-isle/isle-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar _slicedToArray = require(\"/home/philipp/git/cmu-isle/isle-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"/home/philipp/git/cmu-isle/isle-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _objectSpread = require(\"/home/philipp/git/cmu-isle/isle-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/home/philipp/git/cmu-isle/isle-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/philipp/git/cmu-isle/isle-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/philipp/git/cmu-isle/isle-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/philipp/git/cmu-isle/isle-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n/*\nCSV Parse\n\nPlease look at the [project documentation](https://csv.js.org/parse/) for\nadditional information.\n*/\nvar _require = require('stream'),\n    Transform = _require.Transform;\n\nvar ResizeableBuffer = require('./ResizeableBuffer'); // white space characters\n// https://en.wikipedia.org/wiki/Whitespace_character\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes#Types\n// \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff\n\n\nvar tab = 9;\nvar nl = 10; // \\n, 0x0A in hexadecimal, 10 in decimal\n\nvar np = 12;\nvar cr = 13; // \\r, 0x0D in hexadécimal, 13 in decimal\n\nvar space = 32;\nvar boms = {\n  // Note, the following are equals:\n  // Buffer.from(\"\\ufeff\")\n  // Buffer.from([239, 187, 191])\n  // Buffer.from('EFBBBF', 'hex')\n  'utf8': Buffer.from([239, 187, 191]),\n  // Note, the following are equals:\n  // Buffer.from \"\\ufeff\", 'utf16le\n  // Buffer.from([255, 254])\n  'utf16le': Buffer.from([255, 254])\n};\n\nvar Parser = /*#__PURE__*/function (_Transform) {\n  \"use strict\";\n\n  _inherits(Parser, _Transform);\n\n  var _super = _createSuper(Parser);\n\n  function Parser() {\n    var _this;\n\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Parser);\n\n    _this = _super.call(this, _objectSpread(_objectSpread(_objectSpread({}, {\n      readableObjectMode: true\n    }), opts), {}, {\n      encoding: null\n    }));\n    _this.__originalOptions = opts;\n\n    _this.__normalizeOptions(opts);\n\n    return _this;\n  }\n\n  _createClass(Parser, [{\n    key: \"__normalizeOptions\",\n    value: function __normalizeOptions(opts) {\n      var options = {}; // Merge with user options\n\n      for (var opt in opts) {\n        options[underscore(opt)] = opts[opt];\n      } // Normalize option `encoding`\n      // Note: defined first because other options depends on it\n      // to convert chars/strings into buffers.\n\n\n      if (options.encoding === undefined || options.encoding === true) {\n        options.encoding = 'utf8';\n      } else if (options.encoding === null || options.encoding === false) {\n        options.encoding = null;\n      } else if (typeof options.encoding !== 'string' && options.encoding !== null) {\n        throw new CsvError('CSV_INVALID_OPTION_ENCODING', ['Invalid option encoding:', 'encoding must be a string or null to return a buffer,', \"got \".concat(JSON.stringify(options.encoding))], options);\n      } // Normalize option `bom`\n\n\n      if (options.bom === undefined || options.bom === null || options.bom === false) {\n        options.bom = false;\n      } else if (options.bom !== true) {\n        throw new CsvError('CSV_INVALID_OPTION_BOM', ['Invalid option bom:', 'bom must be true,', \"got \".concat(JSON.stringify(options.bom))], options);\n      } // Normalize option `cast`\n\n\n      var fnCastField = null;\n\n      if (options.cast === undefined || options.cast === null || options.cast === false || options.cast === '') {\n        options.cast = undefined;\n      } else if (typeof options.cast === 'function') {\n        fnCastField = options.cast;\n        options.cast = true;\n      } else if (options.cast !== true) {\n        throw new CsvError('CSV_INVALID_OPTION_CAST', ['Invalid option cast:', 'cast must be true or a function,', \"got \".concat(JSON.stringify(options.cast))], options);\n      } // Normalize option `cast_date`\n\n\n      if (options.cast_date === undefined || options.cast_date === null || options.cast_date === false || options.cast_date === '') {\n        options.cast_date = false;\n      } else if (options.cast_date === true) {\n        options.cast_date = function (value) {\n          var date = Date.parse(value);\n          return !isNaN(date) ? new Date(date) : value;\n        };\n      } else if (typeof options.cast_date !== 'function') {\n        throw new CsvError('CSV_INVALID_OPTION_CAST_DATE', ['Invalid option cast_date:', 'cast_date must be true or a function,', \"got \".concat(JSON.stringify(options.cast_date))], options);\n      } // Normalize option `columns`\n\n\n      var fnFirstLineToHeaders = null;\n\n      if (options.columns === true) {\n        // Fields in the first line are converted as-is to columns\n        fnFirstLineToHeaders = undefined;\n      } else if (typeof options.columns === 'function') {\n        fnFirstLineToHeaders = options.columns;\n        options.columns = true;\n      } else if (Array.isArray(options.columns)) {\n        options.columns = normalizeColumnsArray(options.columns);\n      } else if (options.columns === undefined || options.columns === null || options.columns === false) {\n        options.columns = false;\n      } else {\n        throw new CsvError('CSV_INVALID_OPTION_COLUMNS', ['Invalid option columns:', 'expect an object, a function or true,', \"got \".concat(JSON.stringify(options.columns))], options);\n      } // Normalize option `columns_duplicates_to_array`\n\n\n      if (options.columns_duplicates_to_array === undefined || options.columns_duplicates_to_array === null || options.columns_duplicates_to_array === false) {\n        options.columns_duplicates_to_array = false;\n      } else if (options.columns_duplicates_to_array !== true) {\n        throw new CsvError('CSV_INVALID_OPTION_COLUMNS_DUPLICATES_TO_ARRAY', ['Invalid option columns_duplicates_to_array:', 'expect an boolean,', \"got \".concat(JSON.stringify(options.columns_duplicates_to_array))], options);\n      } // Normalize option `comment`\n\n\n      if (options.comment === undefined || options.comment === null || options.comment === false || options.comment === '') {\n        options.comment = null;\n      } else {\n        if (typeof options.comment === 'string') {\n          options.comment = Buffer.from(options.comment, options.encoding);\n        }\n\n        if (!Buffer.isBuffer(options.comment)) {\n          throw new CsvError('CSV_INVALID_OPTION_COMMENT', ['Invalid option comment:', 'comment must be a buffer or a string,', \"got \".concat(JSON.stringify(options.comment))], options);\n        }\n      } // Normalize option `delimiter`\n\n\n      var delimiter_json = JSON.stringify(options.delimiter);\n      if (!Array.isArray(options.delimiter)) options.delimiter = [options.delimiter];\n\n      if (options.delimiter.length === 0) {\n        throw new CsvError('CSV_INVALID_OPTION_DELIMITER', ['Invalid option delimiter:', 'delimiter must be a non empty string or buffer or array of string|buffer,', \"got \".concat(delimiter_json)], options);\n      }\n\n      options.delimiter = options.delimiter.map(function (delimiter) {\n        if (delimiter === undefined || delimiter === null || delimiter === false) {\n          return Buffer.from(',', options.encoding);\n        }\n\n        if (typeof delimiter === 'string') {\n          delimiter = Buffer.from(delimiter, options.encoding);\n        }\n\n        if (!Buffer.isBuffer(delimiter) || delimiter.length === 0) {\n          throw new CsvError('CSV_INVALID_OPTION_DELIMITER', ['Invalid option delimiter:', 'delimiter must be a non empty string or buffer or array of string|buffer,', \"got \".concat(delimiter_json)], options);\n        }\n\n        return delimiter;\n      }); // Normalize option `escape`\n\n      if (options.escape === undefined || options.escape === true) {\n        options.escape = Buffer.from('\"', options.encoding);\n      } else if (typeof options.escape === 'string') {\n        options.escape = Buffer.from(options.escape, options.encoding);\n      } else if (options.escape === null || options.escape === false) {\n        options.escape = null;\n      }\n\n      if (options.escape !== null) {\n        if (!Buffer.isBuffer(options.escape)) {\n          throw new Error(\"Invalid Option: escape must be a buffer, a string or a boolean, got \".concat(JSON.stringify(options.escape)));\n        }\n      } // Normalize option `from`\n\n\n      if (options.from === undefined || options.from === null) {\n        options.from = 1;\n      } else {\n        if (typeof options.from === 'string' && /\\d+/.test(options.from)) {\n          options.from = parseInt(options.from);\n        }\n\n        if (Number.isInteger(options.from)) {\n          if (options.from < 0) {\n            throw new Error(\"Invalid Option: from must be a positive integer, got \".concat(JSON.stringify(opts.from)));\n          }\n        } else {\n          throw new Error(\"Invalid Option: from must be an integer, got \".concat(JSON.stringify(options.from)));\n        }\n      } // Normalize option `from_line`\n\n\n      if (options.from_line === undefined || options.from_line === null) {\n        options.from_line = 1;\n      } else {\n        if (typeof options.from_line === 'string' && /\\d+/.test(options.from_line)) {\n          options.from_line = parseInt(options.from_line);\n        }\n\n        if (Number.isInteger(options.from_line)) {\n          if (options.from_line <= 0) {\n            throw new Error(\"Invalid Option: from_line must be a positive integer greater than 0, got \".concat(JSON.stringify(opts.from_line)));\n          }\n        } else {\n          throw new Error(\"Invalid Option: from_line must be an integer, got \".concat(JSON.stringify(opts.from_line)));\n        }\n      } // Normalize options `ignore_last_delimiters`\n\n\n      if (options.ignore_last_delimiters === undefined || options.ignore_last_delimiters === null) {\n        options.ignore_last_delimiters = false;\n      } else if (typeof options.ignore_last_delimiters === 'number') {\n        options.ignore_last_delimiters = Math.floor(options.ignore_last_delimiters);\n\n        if (options.ignore_last_delimiters === 0) {\n          options.ignore_last_delimiters = false;\n        }\n      } else if (typeof options.ignore_last_delimiters !== 'boolean') {\n        throw new CsvError('CSV_INVALID_OPTION_IGNORE_LAST_DELIMITERS', ['Invalid option `ignore_last_delimiters`:', 'the value must be a boolean value or an integer,', \"got \".concat(JSON.stringify(options.ignore_last_delimiters))], options);\n      }\n\n      if (options.ignore_last_delimiters === true && options.columns === false) {\n        throw new CsvError('CSV_IGNORE_LAST_DELIMITERS_REQUIRES_COLUMNS', ['The option `ignore_last_delimiters`', 'requires the activation of the `columns` option'], options);\n      } // Normalize option `info`\n\n\n      if (options.info === undefined || options.info === null || options.info === false) {\n        options.info = false;\n      } else if (options.info !== true) {\n        throw new Error(\"Invalid Option: info must be true, got \".concat(JSON.stringify(options.info)));\n      } // Normalize option `max_record_size`\n\n\n      if (options.max_record_size === undefined || options.max_record_size === null || options.max_record_size === false) {\n        options.max_record_size = 0;\n      } else if (Number.isInteger(options.max_record_size) && options.max_record_size >= 0) {// Great, nothing to do\n      } else if (typeof options.max_record_size === 'string' && /\\d+/.test(options.max_record_size)) {\n        options.max_record_size = parseInt(options.max_record_size);\n      } else {\n        throw new Error(\"Invalid Option: max_record_size must be a positive integer, got \".concat(JSON.stringify(options.max_record_size)));\n      } // Normalize option `objname`\n\n\n      if (options.objname === undefined || options.objname === null || options.objname === false) {\n        options.objname = undefined;\n      } else if (Buffer.isBuffer(options.objname)) {\n        if (options.objname.length === 0) {\n          throw new Error(\"Invalid Option: objname must be a non empty buffer\");\n        }\n\n        if (options.encoding === null) {// Don't call `toString`, leave objname as a buffer\n        } else {\n          options.objname = options.objname.toString(options.encoding);\n        }\n      } else if (typeof options.objname === 'string') {\n        if (options.objname.length === 0) {\n          throw new Error(\"Invalid Option: objname must be a non empty string\");\n        } // Great, nothing to do\n\n      } else {\n        throw new Error(\"Invalid Option: objname must be a string or a buffer, got \".concat(options.objname));\n      } // Normalize option `on_record`\n\n\n      if (options.on_record === undefined || options.on_record === null) {\n        options.on_record = undefined;\n      } else if (typeof options.on_record !== 'function') {\n        throw new CsvError('CSV_INVALID_OPTION_ON_RECORD', ['Invalid option `on_record`:', 'expect a function,', \"got \".concat(JSON.stringify(options.on_record))], options);\n      } // Normalize option `quote`\n\n\n      if (options.quote === null || options.quote === false || options.quote === '') {\n        options.quote = null;\n      } else {\n        if (options.quote === undefined || options.quote === true) {\n          options.quote = Buffer.from('\"', options.encoding);\n        } else if (typeof options.quote === 'string') {\n          options.quote = Buffer.from(options.quote, options.encoding);\n        }\n\n        if (!Buffer.isBuffer(options.quote)) {\n          throw new Error(\"Invalid Option: quote must be a buffer or a string, got \".concat(JSON.stringify(options.quote)));\n        }\n      } // Normalize option `raw`\n\n\n      if (options.raw === undefined || options.raw === null || options.raw === false) {\n        options.raw = false;\n      } else if (options.raw !== true) {\n        throw new Error(\"Invalid Option: raw must be true, got \".concat(JSON.stringify(options.raw)));\n      } // Normalize option `record_delimiter`\n\n\n      if (!options.record_delimiter) {\n        options.record_delimiter = [];\n      } else if (!Array.isArray(options.record_delimiter)) {\n        options.record_delimiter = [options.record_delimiter];\n      }\n\n      options.record_delimiter = options.record_delimiter.map(function (rd) {\n        if (typeof rd === 'string') {\n          rd = Buffer.from(rd, options.encoding);\n        }\n\n        return rd;\n      }); // Normalize option `relax`\n\n      if (typeof options.relax === 'boolean') {// Great, nothing to do\n      } else if (options.relax === undefined || options.relax === null) {\n        options.relax = false;\n      } else {\n        throw new Error(\"Invalid Option: relax must be a boolean, got \".concat(JSON.stringify(options.relax)));\n      } // Normalize option `relax_column_count`\n\n\n      if (typeof options.relax_column_count === 'boolean') {// Great, nothing to do\n      } else if (options.relax_column_count === undefined || options.relax_column_count === null) {\n        options.relax_column_count = false;\n      } else {\n        throw new Error(\"Invalid Option: relax_column_count must be a boolean, got \".concat(JSON.stringify(options.relax_column_count)));\n      }\n\n      if (typeof options.relax_column_count_less === 'boolean') {// Great, nothing to do\n      } else if (options.relax_column_count_less === undefined || options.relax_column_count_less === null) {\n        options.relax_column_count_less = false;\n      } else {\n        throw new Error(\"Invalid Option: relax_column_count_less must be a boolean, got \".concat(JSON.stringify(options.relax_column_count_less)));\n      }\n\n      if (typeof options.relax_column_count_more === 'boolean') {// Great, nothing to do\n      } else if (options.relax_column_count_more === undefined || options.relax_column_count_more === null) {\n        options.relax_column_count_more = false;\n      } else {\n        throw new Error(\"Invalid Option: relax_column_count_more must be a boolean, got \".concat(JSON.stringify(options.relax_column_count_more)));\n      } // Normalize option `skip_empty_lines`\n\n\n      if (typeof options.skip_empty_lines === 'boolean') {// Great, nothing to do\n      } else if (options.skip_empty_lines === undefined || options.skip_empty_lines === null) {\n        options.skip_empty_lines = false;\n      } else {\n        throw new Error(\"Invalid Option: skip_empty_lines must be a boolean, got \".concat(JSON.stringify(options.skip_empty_lines)));\n      } // Normalize option `skip_lines_with_empty_values`\n\n\n      if (typeof options.skip_lines_with_empty_values === 'boolean') {// Great, nothing to do\n      } else if (options.skip_lines_with_empty_values === undefined || options.skip_lines_with_empty_values === null) {\n        options.skip_lines_with_empty_values = false;\n      } else {\n        throw new Error(\"Invalid Option: skip_lines_with_empty_values must be a boolean, got \".concat(JSON.stringify(options.skip_lines_with_empty_values)));\n      } // Normalize option `skip_lines_with_error`\n\n\n      if (typeof options.skip_lines_with_error === 'boolean') {// Great, nothing to do\n      } else if (options.skip_lines_with_error === undefined || options.skip_lines_with_error === null) {\n        options.skip_lines_with_error = false;\n      } else {\n        throw new Error(\"Invalid Option: skip_lines_with_error must be a boolean, got \".concat(JSON.stringify(options.skip_lines_with_error)));\n      } // Normalize option `rtrim`\n\n\n      if (options.rtrim === undefined || options.rtrim === null || options.rtrim === false) {\n        options.rtrim = false;\n      } else if (options.rtrim !== true) {\n        throw new Error(\"Invalid Option: rtrim must be a boolean, got \".concat(JSON.stringify(options.rtrim)));\n      } // Normalize option `ltrim`\n\n\n      if (options.ltrim === undefined || options.ltrim === null || options.ltrim === false) {\n        options.ltrim = false;\n      } else if (options.ltrim !== true) {\n        throw new Error(\"Invalid Option: ltrim must be a boolean, got \".concat(JSON.stringify(options.ltrim)));\n      } // Normalize option `trim`\n\n\n      if (options.trim === undefined || options.trim === null || options.trim === false) {\n        options.trim = false;\n      } else if (options.trim !== true) {\n        throw new Error(\"Invalid Option: trim must be a boolean, got \".concat(JSON.stringify(options.trim)));\n      } // Normalize options `trim`, `ltrim` and `rtrim`\n\n\n      if (options.trim === true && opts.ltrim !== false) {\n        options.ltrim = true;\n      } else if (options.ltrim !== true) {\n        options.ltrim = false;\n      }\n\n      if (options.trim === true && opts.rtrim !== false) {\n        options.rtrim = true;\n      } else if (options.rtrim !== true) {\n        options.rtrim = false;\n      } // Normalize option `to`\n\n\n      if (options.to === undefined || options.to === null) {\n        options.to = -1;\n      } else {\n        if (typeof options.to === 'string' && /\\d+/.test(options.to)) {\n          options.to = parseInt(options.to);\n        }\n\n        if (Number.isInteger(options.to)) {\n          if (options.to <= 0) {\n            throw new Error(\"Invalid Option: to must be a positive integer greater than 0, got \".concat(JSON.stringify(opts.to)));\n          }\n        } else {\n          throw new Error(\"Invalid Option: to must be an integer, got \".concat(JSON.stringify(opts.to)));\n        }\n      } // Normalize option `to_line`\n\n\n      if (options.to_line === undefined || options.to_line === null) {\n        options.to_line = -1;\n      } else {\n        if (typeof options.to_line === 'string' && /\\d+/.test(options.to_line)) {\n          options.to_line = parseInt(options.to_line);\n        }\n\n        if (Number.isInteger(options.to_line)) {\n          if (options.to_line <= 0) {\n            throw new Error(\"Invalid Option: to_line must be a positive integer greater than 0, got \".concat(JSON.stringify(opts.to_line)));\n          }\n        } else {\n          throw new Error(\"Invalid Option: to_line must be an integer, got \".concat(JSON.stringify(opts.to_line)));\n        }\n      }\n\n      this.info = {\n        comment_lines: 0,\n        empty_lines: 0,\n        invalid_field_length: 0,\n        lines: 1,\n        records: 0\n      };\n      this.options = options;\n      this.state = {\n        bomSkipped: false,\n        castField: fnCastField,\n        commenting: false,\n        // Current error encountered by a record\n        error: undefined,\n        enabled: options.from_line === 1,\n        escaping: false,\n        // escapeIsQuote: options.escape === options.quote,\n        escapeIsQuote: Buffer.isBuffer(options.escape) && Buffer.isBuffer(options.quote) && Buffer.compare(options.escape, options.quote) === 0,\n        expectedRecordLength: options.columns === null ? 0 : options.columns.length,\n        field: new ResizeableBuffer(20),\n        firstLineToHeaders: fnFirstLineToHeaders,\n        info: Object.assign({}, this.info),\n        needMoreDataSize: Math.max.apply(Math, [// Skip if the remaining buffer smaller than comment\n        options.comment !== null ? options.comment.length : 0].concat(_toConsumableArray(options.delimiter.map(function (delimiter) {\n          return delimiter.length;\n        })), [// Skip if the remaining buffer can be escape sequence\n        options.quote !== null ? options.quote.length : 0])),\n        previousBuf: undefined,\n        quoting: false,\n        stop: false,\n        rawBuffer: new ResizeableBuffer(100),\n        record: [],\n        recordHasError: false,\n        record_length: 0,\n        recordDelimiterMaxLength: options.record_delimiter.length === 0 ? 2 : Math.max.apply(Math, _toConsumableArray(options.record_delimiter.map(function (v) {\n          return v.length;\n        }))),\n        trimChars: [Buffer.from(' ', options.encoding)[0], Buffer.from('\\t', options.encoding)[0]],\n        wasQuoting: false,\n        wasRowDelimiter: false\n      };\n    } // Implementation of `Transform._transform`\n\n  }, {\n    key: \"_transform\",\n    value: function _transform(buf, encoding, callback) {\n      if (this.state.stop === true) {\n        return;\n      }\n\n      var err = this.__parse(buf, false);\n\n      if (err !== undefined) {\n        this.state.stop = true;\n      }\n\n      callback(err);\n    } // Implementation of `Transform._flush`\n\n  }, {\n    key: \"_flush\",\n    value: function _flush(callback) {\n      if (this.state.stop === true) {\n        return;\n      }\n\n      var err = this.__parse(undefined, true);\n\n      callback(err);\n    } // Central parser implementation\n\n  }, {\n    key: \"__parse\",\n    value: function __parse(nextBuf, end) {\n      var _this$options = this.options,\n          bom = _this$options.bom,\n          comment = _this$options.comment,\n          escape = _this$options.escape,\n          from_line = _this$options.from_line,\n          info = _this$options.info,\n          ltrim = _this$options.ltrim,\n          max_record_size = _this$options.max_record_size,\n          quote = _this$options.quote,\n          raw = _this$options.raw,\n          relax = _this$options.relax,\n          rtrim = _this$options.rtrim,\n          skip_empty_lines = _this$options.skip_empty_lines,\n          to = _this$options.to,\n          to_line = _this$options.to_line;\n      var record_delimiter = this.options.record_delimiter;\n      var _this$state = this.state,\n          bomSkipped = _this$state.bomSkipped,\n          previousBuf = _this$state.previousBuf,\n          rawBuffer = _this$state.rawBuffer,\n          escapeIsQuote = _this$state.escapeIsQuote;\n      var buf;\n\n      if (previousBuf === undefined) {\n        if (nextBuf === undefined) {\n          // Handle empty string\n          this.push(null);\n          return;\n        } else {\n          buf = nextBuf;\n        }\n      } else if (previousBuf !== undefined && nextBuf === undefined) {\n        buf = previousBuf;\n      } else {\n        buf = Buffer.concat([previousBuf, nextBuf]);\n      } // Handle UTF BOM\n\n\n      if (bomSkipped === false) {\n        if (bom === false) {\n          this.state.bomSkipped = true;\n        } else if (buf.length < 3) {\n          // No enough data\n          if (end === false) {\n            // Wait for more data\n            this.state.previousBuf = buf;\n            return;\n          }\n        } else {\n          for (var encoding in boms) {\n            if (boms[encoding].compare(buf, 0, boms[encoding].length) === 0) {\n              // Skip BOM\n              buf = buf.slice(boms[encoding].length); // Renormalize original options with the new encoding\n\n              this.__normalizeOptions(_objectSpread(_objectSpread({}, this.__originalOptions), {}, {\n                encoding: encoding\n              }));\n\n              break;\n            }\n          }\n\n          this.state.bomSkipped = true;\n        }\n      }\n\n      var bufLen = buf.length;\n      var pos;\n\n      for (pos = 0; pos < bufLen; pos++) {\n        // Ensure we get enough space to look ahead\n        // There should be a way to move this out of the loop\n        if (this.__needMoreData(pos, bufLen, end)) {\n          break;\n        }\n\n        if (this.state.wasRowDelimiter === true) {\n          this.info.lines++;\n\n          if (info === true && this.state.record.length === 0 && this.state.field.length === 0 && this.state.wasQuoting === false) {\n            this.state.info = Object.assign({}, this.info);\n          }\n\n          this.state.wasRowDelimiter = false;\n        }\n\n        if (to_line !== -1 && this.info.lines > to_line) {\n          this.state.stop = true;\n          this.push(null);\n          return;\n        } // Auto discovery of record_delimiter, unix, mac and windows supported\n\n\n        if (this.state.quoting === false && record_delimiter.length === 0) {\n          var record_delimiterCount = this.__autoDiscoverRecordDelimiter(buf, pos);\n\n          if (record_delimiterCount) {\n            record_delimiter = this.options.record_delimiter;\n          }\n        }\n\n        var chr = buf[pos];\n\n        if (raw === true) {\n          rawBuffer.append(chr);\n        }\n\n        if ((chr === cr || chr === nl) && this.state.wasRowDelimiter === false) {\n          this.state.wasRowDelimiter = true;\n        } // Previous char was a valid escape char\n        // treat the current char as a regular char\n\n\n        if (this.state.escaping === true) {\n          this.state.escaping = false;\n        } else {\n          // Escape is only active inside quoted fields\n          // We are quoting, the char is an escape chr and there is a chr to escape\n          // if(escape !== null && this.state.quoting === true && chr === escape && pos + 1 < bufLen){\n          if (escape !== null && this.state.quoting === true && this.__isEscape(buf, pos, chr) && pos + escape.length < bufLen) {\n            if (escapeIsQuote) {\n              if (this.__isQuote(buf, pos + escape.length)) {\n                this.state.escaping = true;\n                pos += escape.length - 1;\n                continue;\n              }\n            } else {\n              this.state.escaping = true;\n              pos += escape.length - 1;\n              continue;\n            }\n          } // Not currently escaping and chr is a quote\n          // TODO: need to compare bytes instead of single char\n\n\n          if (this.state.commenting === false && this.__isQuote(buf, pos)) {\n            if (this.state.quoting === true) {\n              var nextChr = buf[pos + quote.length];\n\n              var isNextChrTrimable = rtrim && this.__isCharTrimable(nextChr);\n\n              var isNextChrComment = comment !== null && this.__compareBytes(comment, buf, pos + quote.length, nextChr);\n\n              var isNextChrDelimiter = this.__isDelimiter(buf, pos + quote.length, nextChr);\n\n              var isNextChrRecordDelimiter = record_delimiter.length === 0 ? this.__autoDiscoverRecordDelimiter(buf, pos + quote.length) : this.__isRecordDelimiter(nextChr, buf, pos + quote.length); // Escape a quote\n              // Treat next char as a regular character\n\n              if (escape !== null && this.__isEscape(buf, pos, chr) && this.__isQuote(buf, pos + escape.length)) {\n                pos += escape.length - 1;\n              } else if (!nextChr || isNextChrDelimiter || isNextChrRecordDelimiter || isNextChrComment || isNextChrTrimable) {\n                this.state.quoting = false;\n                this.state.wasQuoting = true;\n                pos += quote.length - 1;\n                continue;\n              } else if (relax === false) {\n                var err = this.__error(new CsvError('CSV_INVALID_CLOSING_QUOTE', ['Invalid Closing Quote:', \"got \\\"\".concat(String.fromCharCode(nextChr), \"\\\"\"), \"at line \".concat(this.info.lines), 'instead of delimiter, record delimiter, trimable character', '(if activated) or comment'], this.options, this.__context()));\n\n                if (err !== undefined) return err;\n              } else {\n                this.state.quoting = false;\n                this.state.wasQuoting = true;\n                this.state.field.prepend(quote);\n                pos += quote.length - 1;\n              }\n            } else {\n              if (this.state.field.length !== 0) {\n                // In relax mode, treat opening quote preceded by chrs as regular\n                if (relax === false) {\n                  var _err = this.__error(new CsvError('INVALID_OPENING_QUOTE', ['Invalid Opening Quote:', \"a quote is found inside a field at line \".concat(this.info.lines)], this.options, this.__context(), {\n                    field: this.state.field\n                  }));\n\n                  if (_err !== undefined) return _err;\n                }\n              } else {\n                this.state.quoting = true;\n                pos += quote.length - 1;\n                continue;\n              }\n            }\n          }\n\n          if (this.state.quoting === false) {\n            var recordDelimiterLength = this.__isRecordDelimiter(chr, buf, pos);\n\n            if (recordDelimiterLength !== 0) {\n              // Do not emit comments which take a full line\n              var skipCommentLine = this.state.commenting && this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0;\n\n              if (skipCommentLine) {\n                this.info.comment_lines++; // Skip full comment line\n              } else {\n                // Activate records emition if above from_line\n                if (this.state.enabled === false && this.info.lines + (this.state.wasRowDelimiter === true ? 1 : 0) >= from_line) {\n                  this.state.enabled = true;\n\n                  this.__resetField();\n\n                  this.__resetRecord();\n\n                  pos += recordDelimiterLength - 1;\n                  continue;\n                } // Skip if line is empty and skip_empty_lines activated\n\n\n                if (skip_empty_lines === true && this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0) {\n                  this.info.empty_lines++;\n                  pos += recordDelimiterLength - 1;\n                  continue;\n                }\n\n                var errField = this.__onField();\n\n                if (errField !== undefined) return errField;\n\n                var errRecord = this.__onRecord();\n\n                if (errRecord !== undefined) return errRecord;\n\n                if (to !== -1 && this.info.records >= to) {\n                  this.state.stop = true;\n                  this.push(null);\n                  return;\n                }\n              }\n\n              this.state.commenting = false;\n              pos += recordDelimiterLength - 1;\n              continue;\n            }\n\n            if (this.state.commenting) {\n              continue;\n            }\n\n            var commentCount = comment === null ? 0 : this.__compareBytes(comment, buf, pos, chr);\n\n            if (commentCount !== 0) {\n              this.state.commenting = true;\n              continue;\n            }\n\n            var delimiterLength = this.__isDelimiter(buf, pos, chr);\n\n            if (delimiterLength !== 0) {\n              var _errField = this.__onField();\n\n              if (_errField !== undefined) return _errField;\n              pos += delimiterLength - 1;\n              continue;\n            }\n          }\n        }\n\n        if (this.state.commenting === false) {\n          if (max_record_size !== 0 && this.state.record_length + this.state.field.length > max_record_size) {\n            var _err2 = this.__error(new CsvError('CSV_MAX_RECORD_SIZE', ['Max Record Size:', 'record exceed the maximum number of tolerated bytes', \"of \".concat(max_record_size), \"at line \".concat(this.info.lines)], this.options, this.__context()));\n\n            if (_err2 !== undefined) return _err2;\n          }\n        }\n\n        var lappend = ltrim === false || this.state.quoting === true || this.state.field.length !== 0 || !this.__isCharTrimable(chr); // rtrim in non quoting is handle in __onField\n\n        var rappend = rtrim === false || this.state.wasQuoting === false;\n\n        if (lappend === true && rappend === true) {\n          this.state.field.append(chr);\n        } else if (rtrim === true && !this.__isCharTrimable(chr)) {\n          var _err3 = this.__error(new CsvError('CSV_NON_TRIMABLE_CHAR_AFTER_CLOSING_QUOTE', ['Invalid Closing Quote:', 'found non trimable byte after quote', \"at line \".concat(this.info.lines)], this.options, this.__context()));\n\n          if (_err3 !== undefined) return _err3;\n        }\n      }\n\n      if (end === true) {\n        // Ensure we are not ending in a quoting state\n        if (this.state.quoting === true) {\n          var _err4 = this.__error(new CsvError('CSV_QUOTE_NOT_CLOSED', ['Quote Not Closed:', \"the parsing is finished with an opening quote at line \".concat(this.info.lines)], this.options, this.__context()));\n\n          if (_err4 !== undefined) return _err4;\n        } else {\n          // Skip last line if it has no characters\n          if (this.state.wasQuoting === true || this.state.record.length !== 0 || this.state.field.length !== 0) {\n            var _errField2 = this.__onField();\n\n            if (_errField2 !== undefined) return _errField2;\n\n            var _errRecord = this.__onRecord();\n\n            if (_errRecord !== undefined) return _errRecord;\n          } else if (this.state.wasRowDelimiter === true) {\n            this.info.empty_lines++;\n          } else if (this.state.commenting === true) {\n            this.info.comment_lines++;\n          }\n        }\n      } else {\n        this.state.previousBuf = buf.slice(pos);\n      }\n\n      if (this.state.wasRowDelimiter === true) {\n        this.info.lines++;\n        this.state.wasRowDelimiter = false;\n      }\n    }\n  }, {\n    key: \"__onRecord\",\n    value: function __onRecord() {\n      var _this$options2 = this.options,\n          columns = _this$options2.columns,\n          columns_duplicates_to_array = _this$options2.columns_duplicates_to_array,\n          encoding = _this$options2.encoding,\n          info = _this$options2.info,\n          from = _this$options2.from,\n          relax_column_count = _this$options2.relax_column_count,\n          relax_column_count_less = _this$options2.relax_column_count_less,\n          relax_column_count_more = _this$options2.relax_column_count_more,\n          raw = _this$options2.raw,\n          skip_lines_with_empty_values = _this$options2.skip_lines_with_empty_values;\n      var _this$state2 = this.state,\n          enabled = _this$state2.enabled,\n          record = _this$state2.record;\n\n      if (enabled === false) {\n        return this.__resetRecord();\n      } // Convert the first line into column names\n\n\n      var recordLength = record.length;\n\n      if (columns === true) {\n        if (isRecordEmpty(record)) {\n          this.__resetRecord();\n\n          return;\n        }\n\n        return this.__firstLineToColumns(record);\n      }\n\n      if (columns === false && this.info.records === 0) {\n        this.state.expectedRecordLength = recordLength;\n      }\n\n      if (recordLength !== this.state.expectedRecordLength) {\n        var err = columns === false ? // Todo: rename CSV_INCONSISTENT_RECORD_LENGTH to\n        // CSV_RECORD_INCONSISTENT_FIELDS_LENGTH\n        new CsvError('CSV_INCONSISTENT_RECORD_LENGTH', ['Invalid Record Length:', \"expect \".concat(this.state.expectedRecordLength, \",\"), \"got \".concat(recordLength, \" on line \").concat(this.info.lines)], this.options, this.__context(), {\n          record: record\n        }) : // Todo: rename CSV_RECORD_DONT_MATCH_COLUMNS_LENGTH to\n        // CSV_RECORD_INCONSISTENT_COLUMNS\n        new CsvError('CSV_RECORD_DONT_MATCH_COLUMNS_LENGTH', ['Invalid Record Length:', \"columns length is \".concat(columns.length, \",\"), // rename columns\n        \"got \".concat(recordLength, \" on line \").concat(this.info.lines)], this.options, this.__context(), {\n          record: record\n        });\n\n        if (relax_column_count === true || relax_column_count_less === true && recordLength < this.state.expectedRecordLength || relax_column_count_more === true && recordLength > this.state.expectedRecordLength) {\n          this.info.invalid_field_length++;\n          this.state.error = err; // Error is undefined with skip_lines_with_error\n        } else {\n          var finalErr = this.__error(err);\n\n          if (finalErr) return finalErr;\n        }\n      }\n\n      if (skip_lines_with_empty_values === true) {\n        if (isRecordEmpty(record)) {\n          this.__resetRecord();\n\n          return;\n        }\n      }\n\n      if (this.state.recordHasError === true) {\n        this.__resetRecord();\n\n        this.state.recordHasError = false;\n        return;\n      }\n\n      this.info.records++;\n\n      if (from === 1 || this.info.records >= from) {\n        if (columns !== false) {\n          var obj = {}; // Transform record array to an object\n\n          for (var i = 0, l = record.length; i < l; i++) {\n            if (columns[i] === undefined || columns[i].disabled) continue; // Turn duplicate columns into an array\n\n            if (columns_duplicates_to_array === true && obj[columns[i].name]) {\n              if (Array.isArray(obj[columns[i].name])) {\n                obj[columns[i].name] = obj[columns[i].name].concat(record[i]);\n              } else {\n                obj[columns[i].name] = [obj[columns[i].name], record[i]];\n              }\n            } else {\n              obj[columns[i].name] = record[i];\n            }\n          }\n\n          var objname = this.options.objname;\n\n          if (objname === undefined) {\n            if (raw === true || info === true) {\n              var _err5 = this.__push(Object.assign({\n                record: obj\n              }, raw === true ? {\n                raw: this.state.rawBuffer.toString(encoding)\n              } : {}, info === true ? {\n                info: this.state.info\n              } : {}));\n\n              if (_err5) {\n                return _err5;\n              }\n            } else {\n              var _err6 = this.__push(obj);\n\n              if (_err6) {\n                return _err6;\n              }\n            }\n          } else {\n            if (raw === true || info === true) {\n              var _err7 = this.__push(Object.assign({\n                record: [obj[objname], obj]\n              }, raw === true ? {\n                raw: this.state.rawBuffer.toString(encoding)\n              } : {}, info === true ? {\n                info: this.state.info\n              } : {}));\n\n              if (_err7) {\n                return _err7;\n              }\n            } else {\n              var _err8 = this.__push([obj[objname], obj]);\n\n              if (_err8) {\n                return _err8;\n              }\n            }\n          }\n        } else {\n          if (raw === true || info === true) {\n            var _err9 = this.__push(Object.assign({\n              record: record\n            }, raw === true ? {\n              raw: this.state.rawBuffer.toString(encoding)\n            } : {}, info === true ? {\n              info: this.state.info\n            } : {}));\n\n            if (_err9) {\n              return _err9;\n            }\n          } else {\n            var _err10 = this.__push(record);\n\n            if (_err10) {\n              return _err10;\n            }\n          }\n        }\n      }\n\n      this.__resetRecord();\n    }\n  }, {\n    key: \"__firstLineToColumns\",\n    value: function __firstLineToColumns(record) {\n      var firstLineToHeaders = this.state.firstLineToHeaders;\n\n      try {\n        var headers = firstLineToHeaders === undefined ? record : firstLineToHeaders.call(null, record);\n\n        if (!Array.isArray(headers)) {\n          return this.__error(new CsvError('CSV_INVALID_COLUMN_MAPPING', ['Invalid Column Mapping:', 'expect an array from column function,', \"got \".concat(JSON.stringify(headers))], this.options, this.__context(), {\n            headers: headers\n          }));\n        }\n\n        var normalizedHeaders = normalizeColumnsArray(headers);\n        this.state.expectedRecordLength = normalizedHeaders.length;\n        this.options.columns = normalizedHeaders;\n\n        this.__resetRecord();\n\n        return;\n      } catch (err) {\n        return err;\n      }\n    }\n  }, {\n    key: \"__resetRecord\",\n    value: function __resetRecord() {\n      if (this.options.raw === true) {\n        this.state.rawBuffer.reset();\n      }\n\n      this.state.error = undefined;\n      this.state.record = [];\n      this.state.record_length = 0;\n    }\n  }, {\n    key: \"__onField\",\n    value: function __onField() {\n      var _this$options3 = this.options,\n          cast = _this$options3.cast,\n          encoding = _this$options3.encoding,\n          rtrim = _this$options3.rtrim,\n          max_record_size = _this$options3.max_record_size;\n      var _this$state3 = this.state,\n          enabled = _this$state3.enabled,\n          wasQuoting = _this$state3.wasQuoting; // Short circuit for the from_line options\n\n      if (enabled === false) {\n        /* this.options.columns !== true && */\n        return this.__resetField();\n      }\n\n      var field = this.state.field.toString(encoding);\n\n      if (rtrim === true && wasQuoting === false) {\n        field = field.trimRight();\n      }\n\n      if (cast === true) {\n        var _this$__cast = this.__cast(field),\n            _this$__cast2 = _slicedToArray(_this$__cast, 2),\n            err = _this$__cast2[0],\n            f = _this$__cast2[1];\n\n        if (err !== undefined) return err;\n        field = f;\n      }\n\n      this.state.record.push(field); // Increment record length if record size must not exceed a limit\n\n      if (max_record_size !== 0 && typeof field === 'string') {\n        this.state.record_length += field.length;\n      }\n\n      this.__resetField();\n    }\n  }, {\n    key: \"__resetField\",\n    value: function __resetField() {\n      this.state.field.reset();\n      this.state.wasQuoting = false;\n    }\n  }, {\n    key: \"__push\",\n    value: function __push(record) {\n      var on_record = this.options.on_record;\n\n      if (on_record !== undefined) {\n        var context = this.__context();\n\n        try {\n          record = on_record.call(null, record, context);\n        } catch (err) {\n          return err;\n        }\n\n        if (record === undefined || record === null) {\n          return;\n        }\n      }\n\n      this.push(record);\n    } // Return a tuple with the error and the casted value\n\n  }, {\n    key: \"__cast\",\n    value: function __cast(field) {\n      var _this$options4 = this.options,\n          columns = _this$options4.columns,\n          relax_column_count = _this$options4.relax_column_count;\n      var isColumns = Array.isArray(columns); // Dont loose time calling cast\n      // because the final record is an object\n      // and this field can't be associated to a key present in columns\n\n      if (isColumns === true && relax_column_count && this.options.columns.length <= this.state.record.length) {\n        return [undefined, undefined];\n      }\n\n      var context = this.__context();\n\n      if (this.state.castField !== null) {\n        try {\n          return [undefined, this.state.castField.call(null, field, context)];\n        } catch (err) {\n          return [err];\n        }\n      }\n\n      if (this.__isFloat(field)) {\n        return [undefined, parseFloat(field)];\n      } else if (this.options.cast_date !== false) {\n        return [undefined, this.options.cast_date.call(null, field, context)];\n      }\n\n      return [undefined, field];\n    } // Helper to test if a character is a space or a line delimiter\n\n  }, {\n    key: \"__isCharTrimable\",\n    value: function __isCharTrimable(chr) {\n      return chr === space || chr === tab || chr === cr || chr === nl || chr === np;\n    } // Keep it in case we implement the `cast_int` option\n    // __isInt(value){\n    //   // return Number.isInteger(parseInt(value))\n    //   // return !isNaN( parseInt( obj ) );\n    //   return /^(\\-|\\+)?[1-9][0-9]*$/.test(value)\n    // }\n\n  }, {\n    key: \"__isFloat\",\n    value: function __isFloat(value) {\n      return value - parseFloat(value) + 1 >= 0; // Borrowed from jquery\n    }\n  }, {\n    key: \"__compareBytes\",\n    value: function __compareBytes(sourceBuf, targetBuf, targetPos, firstByte) {\n      if (sourceBuf[0] !== firstByte) return 0;\n      var sourceLength = sourceBuf.length;\n\n      for (var i = 1; i < sourceLength; i++) {\n        if (sourceBuf[i] !== targetBuf[targetPos + i]) return 0;\n      }\n\n      return sourceLength;\n    }\n  }, {\n    key: \"__needMoreData\",\n    value: function __needMoreData(i, bufLen, end) {\n      if (end) return false;\n      var quote = this.options.quote;\n      var _this$state4 = this.state,\n          quoting = _this$state4.quoting,\n          needMoreDataSize = _this$state4.needMoreDataSize,\n          recordDelimiterMaxLength = _this$state4.recordDelimiterMaxLength;\n      var numOfCharLeft = bufLen - i - 1;\n      var requiredLength = Math.max(needMoreDataSize, // Skip if the remaining buffer smaller than record delimiter\n      recordDelimiterMaxLength, // Skip if the remaining buffer can be record delimiter following the closing quote\n      // 1 is for quote.length\n      quoting ? quote.length + recordDelimiterMaxLength : 0);\n      return numOfCharLeft < requiredLength;\n    }\n  }, {\n    key: \"__isDelimiter\",\n    value: function __isDelimiter(buf, pos, chr) {\n      var _this$options5 = this.options,\n          delimiter = _this$options5.delimiter,\n          ignore_last_delimiters = _this$options5.ignore_last_delimiters;\n\n      if (ignore_last_delimiters === true && this.state.record.length === this.options.columns.length - 1) {\n        return 0;\n      } else if (ignore_last_delimiters !== false && typeof ignore_last_delimiters === 'number' && this.state.record.length === ignore_last_delimiters - 1) {\n        return 0;\n      }\n\n      loop1: for (var i = 0; i < delimiter.length; i++) {\n        var del = delimiter[i];\n\n        if (del[0] === chr) {\n          for (var j = 1; j < del.length; j++) {\n            if (del[j] !== buf[pos + j]) continue loop1;\n          }\n\n          return del.length;\n        }\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"__isRecordDelimiter\",\n    value: function __isRecordDelimiter(chr, buf, pos) {\n      var record_delimiter = this.options.record_delimiter;\n      var recordDelimiterLength = record_delimiter.length;\n\n      loop1: for (var i = 0; i < recordDelimiterLength; i++) {\n        var rd = record_delimiter[i];\n        var rdLength = rd.length;\n\n        if (rd[0] !== chr) {\n          continue;\n        }\n\n        for (var j = 1; j < rdLength; j++) {\n          if (rd[j] !== buf[pos + j]) {\n            continue loop1;\n          }\n        }\n\n        return rd.length;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"__isEscape\",\n    value: function __isEscape(buf, pos, chr) {\n      var escape = this.options.escape;\n      if (escape === null) return false;\n      var l = escape.length;\n\n      if (escape[0] === chr) {\n        for (var i = 0; i < l; i++) {\n          if (escape[i] !== buf[pos + i]) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"__isQuote\",\n    value: function __isQuote(buf, pos) {\n      var quote = this.options.quote;\n      if (quote === null) return false;\n      var l = quote.length;\n\n      for (var i = 0; i < l; i++) {\n        if (quote[i] !== buf[pos + i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"__autoDiscoverRecordDelimiter\",\n    value: function __autoDiscoverRecordDelimiter(buf, pos) {\n      var encoding = this.options.encoding;\n      var chr = buf[pos];\n\n      if (chr === cr) {\n        if (buf[pos + 1] === nl) {\n          this.options.record_delimiter.push(Buffer.from('\\r\\n', encoding));\n          this.state.recordDelimiterMaxLength = 2;\n          return 2;\n        } else {\n          this.options.record_delimiter.push(Buffer.from('\\r', encoding));\n          this.state.recordDelimiterMaxLength = 1;\n          return 1;\n        }\n      } else if (chr === nl) {\n        this.options.record_delimiter.push(Buffer.from('\\n', encoding));\n        this.state.recordDelimiterMaxLength = 1;\n        return 1;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"__error\",\n    value: function __error(msg) {\n      var skip_lines_with_error = this.options.skip_lines_with_error;\n      var err = typeof msg === 'string' ? new Error(msg) : msg;\n\n      if (skip_lines_with_error) {\n        this.state.recordHasError = true;\n        this.emit('skip', err);\n        return undefined;\n      } else {\n        return err;\n      }\n    }\n  }, {\n    key: \"__context\",\n    value: function __context() {\n      var columns = this.options.columns;\n      var isColumns = Array.isArray(columns);\n      return {\n        column: isColumns === true ? columns.length > this.state.record.length ? columns[this.state.record.length].name : null : this.state.record.length,\n        empty_lines: this.info.empty_lines,\n        error: this.state.error,\n        header: columns === true,\n        index: this.state.record.length,\n        invalid_field_length: this.info.invalid_field_length,\n        quoting: this.state.wasQuoting,\n        lines: this.info.lines,\n        records: this.info.records\n      };\n    }\n  }]);\n\n  return Parser;\n}(Transform);\n\nvar parse = function parse() {\n  var data, options, callback;\n\n  for (var i in arguments) {\n    var argument = arguments[i];\n    var type = typeof argument;\n\n    if (data === undefined && (typeof argument === 'string' || Buffer.isBuffer(argument))) {\n      data = argument;\n    } else if (options === undefined && isObject(argument)) {\n      options = argument;\n    } else if (callback === undefined && type === 'function') {\n      callback = argument;\n    } else {\n      throw new CsvError('CSV_INVALID_ARGUMENT', ['Invalid argument:', \"got \".concat(JSON.stringify(argument), \" at index \").concat(i)], this.options);\n    }\n  }\n\n  var parser = new Parser(options);\n\n  if (callback) {\n    var records = options === undefined || options.objname === undefined ? [] : {};\n    parser.on('readable', function () {\n      var record;\n\n      while ((record = this.read()) !== null) {\n        if (options === undefined || options.objname === undefined) {\n          records.push(record);\n        } else {\n          records[record[0]] = record[1];\n        }\n      }\n    });\n    parser.on('error', function (err) {\n      callback(err, undefined, parser.info);\n    });\n    parser.on('end', function () {\n      callback(undefined, records, parser.info);\n    });\n  }\n\n  if (data !== undefined) {\n    // Give a chance for events to be registered later\n    if (typeof setImmediate === 'function') {\n      setImmediate(function () {\n        parser.write(data);\n        parser.end();\n      });\n    } else {\n      parser.write(data);\n      parser.end();\n    }\n  }\n\n  return parser;\n};\n\nvar CsvError = /*#__PURE__*/function (_Error) {\n  \"use strict\";\n\n  _inherits(CsvError, _Error);\n\n  var _super2 = _createSuper(CsvError);\n\n  function CsvError(code, message, options) {\n    var _this2;\n\n    _classCallCheck(this, CsvError);\n\n    if (Array.isArray(message)) message = message.join(' ');\n    _this2 = _super2.call(this, message);\n\n    if (Error.captureStackTrace !== undefined) {\n      Error.captureStackTrace(_assertThisInitialized(_this2), CsvError);\n    }\n\n    _this2.code = code;\n\n    for (var _len = arguments.length, contexts = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      contexts[_key - 3] = arguments[_key];\n    }\n\n    for (var _i = 0, _contexts = contexts; _i < _contexts.length; _i++) {\n      var context = _contexts[_i];\n\n      for (var key in context) {\n        var value = context[key];\n        _this2[key] = Buffer.isBuffer(value) ? value.toString(options.encoding) : value == null ? value : JSON.parse(JSON.stringify(value));\n      }\n    }\n\n    return _this2;\n  }\n\n  return CsvError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nparse.Parser = Parser;\nparse.CsvError = CsvError;\nmodule.exports = parse;\n\nvar underscore = function underscore(str) {\n  return str.replace(/([A-Z])/g, function (_, match) {\n    return '_' + match.toLowerCase();\n  });\n};\n\nvar isObject = function isObject(obj) {\n  return typeof obj === 'object' && obj !== null && !Array.isArray(obj);\n};\n\nvar isRecordEmpty = function isRecordEmpty(record) {\n  return record.every(function (field) {\n    return field == null || field.toString && field.toString().trim() === '';\n  });\n};\n\nvar normalizeColumnsArray = function normalizeColumnsArray(columns) {\n  var normalizedColumns = [];\n\n  for (var i = 0, l = columns.length; i < l; i++) {\n    var column = columns[i];\n\n    if (column === undefined || column === null || column === false) {\n      normalizedColumns[i] = {\n        disabled: true\n      };\n    } else if (typeof column === 'string') {\n      normalizedColumns[i] = {\n        name: column\n      };\n    } else if (isObject(column)) {\n      if (typeof column.name !== 'string') {\n        throw new CsvError('CSV_OPTION_COLUMNS_MISSING_NAME', ['Option columns missing name:', \"property \\\"name\\\" is required at position \".concat(i), 'when column is an object literal']);\n      }\n\n      normalizedColumns[i] = column;\n    } else {\n      throw new CsvError('CSV_INVALID_COLUMN_DEFINITION', ['Invalid column definition:', 'expect a string or a literal object,', \"got \".concat(JSON.stringify(column), \" at position \").concat(i)]);\n    }\n  }\n\n  return normalizedColumns;\n};","var _classCallCheck = require(\"/home/philipp/git/cmu-isle/isle-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/philipp/git/cmu-isle/isle-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar ResizeableBuffer = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function ResizeableBuffer() {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n\n    _classCallCheck(this, ResizeableBuffer);\n\n    this.size = size;\n    this.length = 0;\n    this.buf = Buffer.alloc(size);\n  }\n\n  _createClass(ResizeableBuffer, [{\n    key: \"prepend\",\n    value: function prepend(val) {\n      if (Buffer.isBuffer(val)) {\n        var length = this.length + val.length;\n\n        if (length >= this.size) {\n          this.resize();\n\n          if (length >= this.size) {\n            throw Error('INVALID_BUFFER_STATE');\n          }\n        }\n\n        var buf = this.buf;\n        this.buf = Buffer.alloc(this.size);\n        val.copy(this.buf, 0);\n        buf.copy(this.buf, val.length);\n        this.length += val.length;\n      } else {\n        var _length = this.length++;\n\n        if (_length === this.size) {\n          this.resize();\n        }\n\n        var _buf = this.clone();\n\n        this.buf[0] = val;\n\n        _buf.copy(this.buf, 1, 0, _length);\n      }\n    }\n  }, {\n    key: \"append\",\n    value: function append(val) {\n      var length = this.length++;\n\n      if (length === this.size) {\n        this.resize();\n      }\n\n      this.buf[length] = val;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return Buffer.from(this.buf.slice(0, this.length));\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var length = this.length;\n      this.size = this.size * 2;\n      var buf = Buffer.alloc(this.size);\n      this.buf.copy(buf, 0, 0, length);\n      this.buf = buf;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(encoding) {\n      if (encoding) {\n        return this.buf.slice(0, this.length).toString(encoding);\n      } else {\n        return Uint8Array.prototype.slice.call(this.buf.slice(0, this.length));\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString('utf8');\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.length = 0;\n    }\n  }]);\n\n  return ResizeableBuffer;\n}();\n\nmodule.exports = ResizeableBuffer;","module.exports = function detectCSV(chunk, opts) {\n  opts = opts || {};\n  if (Buffer.isBuffer(chunk)) chunk = chunk + '';\n  var delimiters = opts.delimiters || [',', ';', '\\t', '|'];\n  var newlines = opts.newlines || ['\\n', '\\r'];\n  var lines = chunk.split(/[\\n\\r]+/g);\n  var delimiter = determineMost(lines[0], delimiters);\n  var newline = determineMost(chunk, newlines);\n  if (!delimiter) return null;\n  return {\n    delimiter: delimiter,\n    newline: newline\n  };\n};\n\nfunction determineMost(chunk, items) {\n  var ignoreString = false;\n  var itemCount = {};\n  var maxValue = 0;\n  var maxChar;\n  var currValue;\n  items.forEach(function (item) {\n    itemCount[item] = 0;\n  });\n\n  for (var i = 0; i < chunk.length; i++) {\n    if (chunk[i] === '\"') ignoreString = !ignoreString;else if (!ignoreString && chunk[i] in itemCount) {\n      currValue = ++itemCount[chunk[i]];\n\n      if (currValue > maxValue) {\n        maxValue = currValue;\n        maxChar = chunk[i];\n      }\n    }\n  }\n\n  return maxChar;\n}","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport noop from '@stdlib/utils/noop';\nimport Input from '@isle-project/components/input/base';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport './checkbox.css';\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nclass CheckboxInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.state = {\n\t\t\tvalue: props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue,\n\t\t\tbind: props.bind,\n\t\t\tdefaultValue: props.defaultValue\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tlet newState = {};\n\t\tif ( nextProps.defaultValue !== prevState.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t\tnewState.defaultValue = nextProps.defaultValue;\n\t\t}\n\t\telse if ( nextProps.bind !== prevState.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t\tnewState.bind = nextProps.bind;\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif ( this.props.bind ) {\n\t\t\tlet globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateValue = ( newValue ) => {\n\t\tthis.setState({\n\t\t\tvalue: newValue\n\t\t}, () => {\n\t\t\tif ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\thandleChange = ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tthis.props.onChange( newValue );\n\t\tthis.updateValue( newValue );\n\t}\n\n\thandleSpanChange = ( event ) => {\n\t\tconst newValue = this.props.value !== null ? !this.props.value : !this.state.value;\n\t\tthis.props.onChange( newValue );\n\t\tthis.updateValue( newValue );\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tif ( this.props.value !== null ) {\n\t\t\tvalue = this.props.value;\n\t\t}\n\t\tconst input = <input\n\t\t\tclassName=\"checkbox-input\"\n\t\t\ttype=\"checkbox\"\n\t\t\tchecked={value}\n\t\t\tvalue=\"checkbox\"\n\t\t\tonChange={this.handleChange}\n\t\t\tdisabled={this.props.disabled}\n\t\t\taria-label={this.props.tooltip}\n\t\t></input>;\n\t\tif ( this.props.inline === true ) {\n\t\t\treturn (\n\t\t\t\t<Tooltip tooltip={this.props.tooltip} placement={this.props.tooltipPlacement} >\n\t\t\t\t\t<span style={{ marginLeft: '8px', ...this.props.style }}>\n\t\t\t\t\t\t{input}\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tcolor: this.props.disabled ? 'darkgray' : null\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonClick={this.handleSpanChange} onKeyPress={this.handleSpanChange}\n\t\t\t\t\t\t>{this.props.legend}</span>\n\t\t\t\t\t</span>\n\t\t\t\t</Tooltip>\n\t\t\t);\n\t\t}\n\t\tconst onSpanChange = this.props.disabled ? noop : this.handleSpanChange;\n\t\treturn (\n\t\t\t<Tooltip tooltip={this.props.tooltip} placement={this.props.tooltipPlacement} >\n\t\t\t\t<div className=\"input checkbox-input-div\" style={this.props.style}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: this.props.disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t\t>{this.props.legend}</span>\n\t\t\t\t</div>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\nCheckboxInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n"],"sourceRoot":""}