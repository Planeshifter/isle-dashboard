{"version":3,"sources":["../node_modules/@isle-project/components/data-explorer/menu/contourchart.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/checkbox/main.js","../node_modules/@isle-project/components/input/checkbox/index.js","../node_modules/@isle-project/components/input/slider/main.js","../node_modules/@isle-project/components/input/slider/index.js"],"names":["ContourChartMenu","props","useState","variables","x","setX","y","setY","overlayPoints","setOverlayPoints","regressionMethod","setRegressionMethod","smoothSpan","setSmoothSpan","t","as","title","content","legend","defaultValue","options","onChange","menuPlacement","multi","value","isArray","min","max","step","disabled","contains","variant","block","onClick","data","onCreated","onSelected","logAction","session","plotId","randomstring","action","output","id","onShare","addNotification","message","level","position","DATA_EXPLORER_SHARE_CONTOURPLOT","DATA_EXPLORER_CONTOURPLOT","defaultProps","popover","trigger","placement","rootClose","overlay","size","className","uid","generateUID","CheckboxInput","bind","useRef","useContext","SessionContext","state","setValue","useEffect","global","lesson","globalValue","updateValue","useCallback","newValue","setState","handleChange","event","target","checked","handleSpanChange","input","type","aria-label","tooltip","inline","tooltipPlacement","current","style","marginLeft","role","tabIndex","color","onKeyPress","onSpanChange","noop","debug","logger","SliderInput","hideTooltip","precision","minLabel","maxLabel","numberInputStyle","rangeInputStyle","useTranslation","roundedValue","finishChange","parseFloat","handleInputChange","valid","validity","PINF","NINF","roundn","rangeInput","float","display","numberInput","name","onBlur","marginTop","autoComplete","padding","opacity","Badge","show"],"mappings":"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","file":"static/js/ContourChartMenu.6a9e98d8.chunk.js","sourcesContent":["// MODULES //\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport contains from '@stdlib/assert/contains';\nimport isArray from '@stdlib/assert/is-array';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport ContourChart from '@isle-project/components/plots/contourchart';\nimport SelectInput from '@isle-project/components/input/select';\nimport SliderInput from '@isle-project/components/input/slider';\nimport randomstring from '@isle-project/utils/randomstring/alphanumeric';\nimport { DATA_EXPLORER_SHARE_CONTOURPLOT, DATA_EXPLORER_CONTOURPLOT } from '@isle-project/constants/actions.js';\nimport QuestionButton from '../question_button.js';\n\n\n// MAIN //\n\nconst ContourChartMenu = ( props ) => {\n\tconst [ x, setX ] = useState( props.variables[ 0 ] );\n\tconst [ y, setY ] = useState( props.variables[ 1 ] );\n\tconst [ overlayPoints, setOverlayPoints ] = useState( false );\n\tconst [ regressionMethod, setRegressionMethod ] = useState( [] );\n\tconst [ smoothSpan, setSmoothSpan ] = useState( 0.66 );\n\n\tconst generateContourChart = () => {\n\t\tconst { data, onCreated, onSelected, logAction, session, t } = props;\n\t\tconst plotId = randomstring( 6 );\n\t\tconst action = {\n\t\t\tx, y, overlayPoints, regressionMethod, smoothSpan, plotId\n\t\t};\n\t\tconst output = <ContourChart\n\t\t\tid={plotId}\n\t\t\taction={action}\n\t\t\tdata={data}\n\t\t\tonShare={() => {\n\t\t\t\tsession.addNotification({\n\t\t\t\t\ttitle: t('plot-shared'),\n\t\t\t\t\tmessage: t('plot-shared-message'),\n\t\t\t\t\tlevel: 'success',\n\t\t\t\t\tposition: 'tr'\n\t\t\t\t});\n\t\t\t\tlogAction( DATA_EXPLORER_SHARE_CONTOURPLOT, action );\n\t\t\t}}\n\t\t\tx={x}\n\t\t\ty={y}\n\t\t\toverlayPoints={overlayPoints}\n\t\t\tregressionMethod={regressionMethod}\n\t\t\tsmoothSpan={smoothSpan}\n\t\t\tonSelected={onSelected}\n\t\t/>;\n\t\tlogAction( DATA_EXPLORER_CONTOURPLOT, action );\n\t\tonCreated( output );\n\t};\n\tconst { variables, t } = props;\n\treturn (\n\t\t<Card>\n\t\t\t<Card.Header as=\"h4\" >\n\t\t\t\t{t('Contour Chart')}\n\t\t\t\t<QuestionButton title={t('Contour Chart')} content={t('Contour Chart-description')} />\n\t\t\t</Card.Header>\n\t\t\t<Card.Body>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\tlegend={t('x-axis-variable')}\n\t\t\t\t\t\t\tdefaultValue={x}\n\t\t\t\t\t\t\toptions={variables}\n\t\t\t\t\t\t\tonChange={setX}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\tlegend={t('y-axis-variable')}\n\t\t\t\t\t\t\tdefaultValue={y}\n\t\t\t\t\t\t\toptions={variables}\n\t\t\t\t\t\t\tmenuPlacement=\"top\"\n\t\t\t\t\t\t\tonChange={setY}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<CheckboxInput\n\t\t\t\t\t\t\tlegend={t('overlay-observations')}\n\t\t\t\t\t\t\tdefaultValue={overlayPoints}\n\t\t\t\t\t\t\tonChange={() => {\n\t\t\t\t\t\t\t\tsetOverlayPoints( !overlayPoints );\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\tlegend={t('overlay-regression-line')}\n\t\t\t\t\t\t\tmulti={true}\n\t\t\t\t\t\t\toptions={[ 'linear', 'smooth' ]}\n\t\t\t\t\t\t\tonChange={( value ) => {\n\t\t\t\t\t\t\t\tif ( !isArray( value ) ) {\n\t\t\t\t\t\t\t\t\tvalue = [ value ];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tsetRegressionMethod( value );\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<SliderInput\n\t\t\t\t\t\t\tlegend={t('smoothing-parameter')}\n\t\t\t\t\t\t\tmin={0.01}\n\t\t\t\t\t\t\tmax={1}\n\t\t\t\t\t\t\tstep={0.01}\n\t\t\t\t\t\t\tdefaultValue={smoothSpan}\n\t\t\t\t\t\t\tdisabled={!contains( regressionMethod, 'smooth' )}\n\t\t\t\t\t\t\tonChange={setSmoothSpan}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Button variant=\"primary\" block onClick={generateContourChart}>\n\t\t\t\t\t{t('generate')}\n\t\t\t\t</Button>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\n\n// PROPERTIES //\n\nContourChartMenu.defaultProps = {\n\tlogAction() {},\n\tonSelected() {}\n};\n\nContourChartMenu.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\tlogAction: PropTypes.func,\n\tsession: PropTypes.object.isRequired,\n\tvariables: PropTypes.array.isRequired,\n\tonCreated: PropTypes.func.isRequired,\n\tonSelected: PropTypes.func\n};\n\n\n// EXPORTS //\n\nexport default ContourChartMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={[ 'click', 'hover', 'focus' ]} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport noop from '@stdlib/utils/noop';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport './checkbox.css';\n\n\n// VARIABLES //\n\nconst uid = generateUID( 'checkbox-input' );\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nconst CheckboxInput = ( props ) => {\n\tconst { bind, defaultValue, disabled, onChange } = props;\n\tconst id = useRef( props.id || uid( props ) );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tbind && session.state ? session.state[ bind ]: defaultValue\n\t);\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tlet globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ]);\n\tconst updateValue = useCallback( ( newValue ) => {\n\t\tsetValue( newValue );\n\t\tif ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind ] );\n\tconst handleChange = useCallback( ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t}, [ onChange, updateValue ] );\n\tconst handleSpanChange = () => {\n\t\tconst newValue = props.value !== null ? !props.value : !value;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t};\n\tconst input = <input\n\t\tclassName=\"checkbox-input\"\n\t\ttype=\"checkbox\"\n\t\tchecked={props.value !== null ? props.value : value}\n\t\tvalue=\"checkbox\"\n\t\tonChange={handleChange}\n\t\tdisabled={disabled}\n\t\taria-label={props.tooltip}\n\t></input>;\n\tif ( props.inline === true ) {\n\t\treturn (\n\t\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t\t<span id={id.current} style={{ marginLeft: '8px', ...props.style }}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={handleSpanChange} onKeyPress={handleSpanChange}\n\t\t\t\t\t>{props.legend}</span>\n\t\t\t\t</span>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\tconst onSpanChange = disabled ? noop : handleSpanChange;\n\treturn (\n\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t<div id={id.current} className=\"input checkbox-input-div\" style={props.style}>\n\t\t\t\t{input}\n\t\t\t\t<span\n\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t}}\n\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t>{props.legend}</span>\n\t\t\t</div>\n\t\t</Tooltip>\n\t);\n};\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport { useTranslation } from 'react-i18next';\nimport Badge from 'react-bootstrap/Badge';\nimport roundn from '@stdlib/math/base/special/roundn';\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport './slider.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:slider-input' );\n\n\n// MAIN //\n\n/**\n* A slider input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} legend - caption of the input\n* @property {number} defaultValue - The starting value of the slider\n* @property {number} min - The minimum value of the slider\n* @property {number} max - The maximum value of the slider\n* @property {(number|string)} step - step size of the slider\n* @property {boolean} inline - controls whether to place the slider inline with text or outside\n* @property {number} precision - rounding of the input. The value will be rounded to have no more significant digits than the precision. For example, if one wishes to only use integers, a precision of 10 would be used, while if one wishes to round to the hundreds place, one would use a precision of 0.001\n* @property {boolean} disabled - controls whether the slider input is active or not. If set to true, the slider will be present on the screen, albeit grayed-out\n* @property {string} minLabel - label to be displayed to the left of slider instead of minimum value\n* @property {string} maxLabel - label to be displayed to the right of slider instead of maximum value\n* @property {boolean} hideTooltip - controls whether to hide tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} numberInputStyle - CSS inline styles for number input component\n* @property {Object} rangeInputStyle - CSS inline style for range input component\n* @property {Function} onChange - callback invoked with the new value when the slider value changes\n*/\nconst SliderInput = ( props ) => {\n\tconst { bind, defaultValue, legend, disabled, hideTooltip, inline, min, max, onChange, precision, step,\n\t\tminLabel, maxLabel, numberInputStyle, rangeInputStyle, style } = props;\n\n\tconst { t } = useTranslation( 'input' );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tbind && session.state ? session.state[ bind ] : defaultValue\n\t);\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tconst globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ] );\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ]);\n\n\tconst finishChange = useCallback( ( event ) => {\n\t\tdebug( 'Finalizing change...' );\n\t\tlet newValue = event.target.value;\n\t\tif ( newValue !== '' ) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t}\n\t\tif ( newValue > max ) {\n\t\t\tnewValue = max;\n\t\t}\n\t\telse if ( newValue < min ) {\n\t\t\tnewValue = min;\n\t\t}\n\t\telse if ( step === 1.0 && newValue !== '' ) {\n\t\t\tnewValue = newValue - newValue % step;\n\t\t}\n\t\tdebug( `Setting state value to: ${value}...` );\n\t\tif ( newValue !== value ) {\n\t\t\tsetValue( newValue );\n\t\t\tonChange( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: value\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [ bind, max, min, step, value, onChange ] );\n\n\tconst handleInputChange = useCallback( ( event ) => {\n\t\tconst valid = event.target.validity.valid;\n\t\tlet newValue = event.target.value;\n\t\tdebug( `Input value changed to ${value}` );\n\t\tsetValue( newValue );\n\n\t\tif ( valid && newValue !== '' ) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t\tonChange( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t} else if ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind, value, onChange ] );\n\n\tlet tooltip = `${t('enter')} ${ step === 1 ? t('integer') : t('number')} `;\n\tif ( max !== PINF && min !== NINF ) {\n\t\ttooltip += `${t('between')} ${min} ${t('and')} ${max}:`;\n\t} else if ( min !== NINF ) {\n\t\ttooltip += `${t('larger-or-equal-to')} ${min}:`;\n\t} else if ( max !== PINF ) {\n\t\ttooltip += `${t('smaller-or-equal-to')} ${max}:`;\n\t} else {\n\t\ttooltip += ':';\n\t}\n\tlet roundedValue;\n\tif ( value !== '' ) {\n\t\troundedValue = roundn( value, ( -1.0 )*precision );\n\t} else {\n\t\troundedValue = value;\n\t}\n\tconst rangeInput = <input\n\t\ttype=\"range\"\n\t\tclassName=\"slider-range-input\"\n\t\tmin={min}\n\t\tmax={max}\n\t\tstep={step}\n\t\tvalue={roundedValue}\n\t\tdisabled={disabled}\n\t\tonChange={handleInputChange}\n\t\tstyle={{\n\t\t\tfloat: inline ? 'none' : 'left',\n\t\t\tdisplay: inline ? 'inline' : 'block',\n\t\t\t...rangeInputStyle\n\t\t}}\n\t/>;\n\tconst numberInput = <input\n\t\ttype=\"number\"\n\t\tname=\"input\"\n\t\tclassName=\"slider-number-input\"\n\t\tdisabled={disabled}\n\t\tmin={min}\n\t\tmax={max}\n\t\tstep={step}\n\t\tvalue={roundedValue}\n\t\tonChange={handleInputChange}\n\t\tonBlur={finishChange}\n\t\tstyle={{\n\t\t\tfloat: inline ? 'none' : 'right',\n\t\t\tmarginTop: legend && !inline ? -22 : 0,\n\t\t\t...numberInputStyle\n\t\t}}\n\t\tautoComplete=\"off\"\n\t/>;\n\tif ( inline ) {\n\t\treturn (\n\t\t\t<span className=\"input\" style={{\n\t\t\t\tpadding: '5px',\n\t\t\t\topacity: disabled ? 0.2 : 1.0,\n\t\t\t\t...style\n\t\t\t}}>\n\t\t\t\t{ legend ?\n\t\t\t\t\t<label>{legend}:</label> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t\t<span className=\"slider-range-wrapper\" >\n\t\t\t\t\t<Badge variant=\"secondary\" >{minLabel || min}</Badge>\n\t\t\t\t\t{rangeInput}\n\t\t\t\t\t<Badge variant=\"secondary\" >{maxLabel || max}</Badge>\n\t\t\t\t</span>\n\t\t\t\t{numberInput}\n\t\t\t</span>\n\t\t);\n\t}\n\treturn (\n\t\t<Tooltip\n\t\t\tid=\"sliderTooltip\"\n\t\t\tplacement=\"top\"\n\t\t\tshow={!hideTooltip}\n\t\t\ttooltip={disabled ? t('slider-disabled') : tooltip}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName=\"slider-outer-div input\"\n\t\t\t\tstyle={{\n\t\t\t\t\topacity: disabled ? 0.2 : 1.0,\n\t\t\t\t\t...style\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{ legend ?\n\t\t\t\t\t<label>{legend}:</label> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t\t<br />\n\t\t\t\t<span className=\"slider-range-wrapper\" >\n\t\t\t\t\t<Badge variant=\"secondary\" style={{ float: 'left' }} >{minLabel || min}</Badge>\n\t\t\t\t\t{rangeInput}\n\t\t\t\t\t<Badge variant=\"secondary\" style={{ float: 'left' }} >{maxLabel || max}</Badge>\n\t\t\t\t</span>\n\t\t\t\t{numberInput}\n\t\t\t\t<br />\n\t\t\t</div>\n\t\t</Tooltip>\n\t);\n};\n\n\n// PROPERTIES //\n\nSliderInput.defaultProps = {\n\tinline: false,\n\tlegend: null,\n\tmin: 0,\n\tminLabel: null,\n\tmax: 100,\n\tmaxLabel: null,\n\tstep: 1,\n\tdefaultValue: 10,\n\tonChange() {},\n\tprecision: 10,\n\tdisabled: false,\n\thideTooltip: false,\n\tstyle: {},\n\tnumberInputStyle: {},\n\trangeInputStyle: {}\n};\n\nSliderInput.propTypes = {\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmaxLabel: PropTypes.string,\n\tmin: PropTypes.number,\n\tminLabel: PropTypes.string,\n\tonChange: PropTypes.func,\n\tprecision: PropTypes.number,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\thideTooltip: PropTypes.bool,\n\tstyle: PropTypes.object,\n\tnumberInputStyle: PropTypes.object,\n\trangeInputStyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default SliderInput;\n","// MODULES //\n\nimport SliderInput from './main.js';\n\n\n// EXPORTS //\n\nexport default SliderInput;\n"],"sourceRoot":""}