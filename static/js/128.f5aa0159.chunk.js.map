{"version":3,"sources":["../node_modules/@isle-project/components/data-explorer/menu/proptest.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/number/create_tooltip.js","../node_modules/@isle-project/components/input/number/index.js","../node_modules/@isle-project/components/input/number/main.js"],"names":["PropTestMenu","props","data","categorical","showDecision","t","useState","variable","setVariable","success","setSuccess","p0","setP0","direction","setDirection","alpha","setAlpha","categories","setCategories","style","fontSize","Header","as","title","content","Body","legend","defaultValue","options","onChange","values","newCategories","extractCategoriesFromValues","raw","min","max","step","variant","block","onClick","output","logAction","DATA_EXPLORER_TESTS_PROPTEST","onCreated","disabled","defaultProps","QuestionButton","popover","id","trigger","placement","rootClose","overlay","size","className","createTooltip","tooltip","PINF","NINF","CreateTooltip","NumberInput","debug","logger","uid","generateUID","context","event","valid","target","validity","value","setState","parseFloat","isnan","bind","global","lesson","contains","vals","split","onBlur","state","session","prevProps","this","globalVal","isNumber","inline","input","padding","htmlFor","type","numbersOnly","name","width","paddingLeft","marginLeft","inputStyle","handleChange","finishChange","onKeyPress","onKeyDown","onKeyUp","autoComplete","description","marginBottom","marginTop","isString","tooltipPlacement","nextProps","prevState","newState","isEmptyObject","Input","propTypes","PropTypes","string","number","bool","oneOfType","node","func","object","oneOf","contextType","SessionContext"],"mappings":"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","file":"static/js/128.f5aa0159.chunk.js","sourcesContent":["// MODULES //\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport NumberInput from '@isle-project/components/input/number';\nimport SelectInput from '@isle-project/components/input/select';\nimport TeX from '@isle-project/components/tex';\nimport PropTest from '@isle-project/components/tests/proptest';\nimport extractCategoriesFromValues from '@isle-project/utils/extract-categories-from-values';\nimport { DATA_EXPLORER_TESTS_PROPTEST } from '@isle-project/constants/actions.js';\nimport QuestionButton from './../question_button.js';\n\n\n// MAIN //\n\nconst PropTestMenu = ( props ) => {\n\tconst { data, categorical, showDecision, t } = props;\n\n\tconst [ variable, setVariable ] = useState( null );\n\tconst [ success, setSuccess ] = useState( null );\n\tconst [ p0, setP0 ] = useState( 0.5 );\n\tconst [ direction, setDirection ] = useState( 'two-sided' );\n\tconst [ alpha, setAlpha ] = useState( 0.05 );\n\tconst [ categories, setCategories ] = useState( null );\n\n\tconst calculatePropTest = () => {\n\t\tconst output = <PropTest data={data} variable={variable} success={success} p0={p0} direction={direction} alpha={alpha} showDecision={showDecision} />;\n\t\tprops.logAction( DATA_EXPLORER_TESTS_PROPTEST, {\n\t\t\tvariable, success, p0, direction, alpha, showDecision\n\t\t});\n\t\tprops.onCreated( output );\n\t};\n\treturn (\n\t\t<Card\n\t\t\tstyle={{ fontSize: '14px' }}\n\t\t>\n\t\t\t<Card.Header as=\"h4\">\n\t\t\t\t{t('One-Sample Proportion Test')}\n\t\t\t\t<QuestionButton title={t('One-Sample Proportion Test')} content={t('One-Sample Proportion Test-description')} />\n\t\t\t</Card.Header>\n\t\t\t<Card.Body>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('variable')}\n\t\t\t\t\tdefaultValue={variable}\n\t\t\t\t\toptions={categorical}\n\t\t\t\t\tonChange={( variable ) => {\n\t\t\t\t\t\tconst values = props.data[ variable ];\n\t\t\t\t\t\tconst newCategories = extractCategoriesFromValues( values, variable );\n\t\t\t\t\t\tsetCategories( newCategories );\n\t\t\t\t\t\tsetVariable( variable );\n\t\t\t\t\t\tsetSuccess( newCategories[ 0 ] );\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t{ categories ? <SelectInput\n\t\t\t\t\tlegend=\"Success:\"\n\t\t\t\t\tdefaultValue={success}\n\t\t\t\t\toptions={categories}\n\t\t\t\t\tonChange={setSuccess}\n\t\t\t\t/> : null }\n\t\t\t\t<NumberInput\n\t\t\t\t\tlegend={<TeX raw=\"p_0\" />}\n\t\t\t\t\tdefaultValue={p0}\n\t\t\t\t\tmin={0.001}\n\t\t\t\t\tmax={0.999}\n\t\t\t\t\tstep=\"any\"\n\t\t\t\t\tonChange={setP0}\n\t\t\t\t/>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('direction')}\n\t\t\t\t\tdefaultValue={direction}\n\t\t\t\t\toptions={[ 'less', 'greater', 'two-sided' ]}\n\t\t\t\t\tonChange={setDirection}\n\t\t\t\t/>\n\t\t\t\t<NumberInput\n\t\t\t\t\tlegend={<span>{t('significance-level')}<TeX raw=\"\\alpha\" /></span>}\n\t\t\t\t\tdefaultValue={alpha}\n\t\t\t\t\tmin={0.0}\n\t\t\t\t\tmax={1.0}\n\t\t\t\t\tstep=\"any\"\n\t\t\t\t\tonChange={setAlpha}\n\t\t\t\t/>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"primary\" block\n\t\t\t\t\tonClick={calculatePropTest}\n\t\t\t\t\tdisabled={!variable}\n\t\t\t\t>\n\t\t\t\t\t{t('calculate')}\n\t\t\t\t</Button>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\n\n// PROPERTIES //\n\nPropTestMenu.propTypes = {\n\tcategorical: PropTypes.array,\n\tdata: PropTypes.object.isRequired,\n\tlogAction: PropTypes.func,\n\tonCreated: PropTypes.func.isRequired,\n\tshowDecision: PropTypes.bool\n};\n\nPropTestMenu.defaultProps = {\n\tcategorical: null,\n\tlogAction() {},\n\tshowDecision: true\n};\n\n\n// EXPORTS //\n\nexport default PropTestMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={['hover', 'focus']} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport PINF from '@stdlib/constants/math/float64-pinf';\nimport NINF from '@stdlib/constants/math/float64-ninf';\n\n\n// MAIN //\n\nfunction createTooltip( props ) {\n\tlet tooltip = `Enter a${ props.step === 1 ? 'n integer' : ' number'} `;\n\tif ( props.max !== PINF && props.min !== NINF ) {\n\t\ttooltip += `between ${props.min} and ${props.max}`;\n\t} else if ( props.min !== NINF ) {\n\t\ttooltip += `larger or equal to ${props.min}`;\n\t} else if ( props.max !== PINF ) {\n\t\ttooltip += `smaller or equal to ${props.max}`;\n\t}\n\treturn tooltip;\n}\n\n\n// EXPORTS //\n\nexport default createTooltip;\n","// MODULES //\n\nimport NumberInput from './main';\nimport CreateTooltip from './create_tooltip.js';\n\n\n// EXPORTS //\n\nexport const createTooltip = CreateTooltip;\nexport default NumberInput;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport Input from '@isle-project/components/input/base';\nimport contains from '@stdlib/assert/contains';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport isEmptyObject from '@stdlib/assert/is-empty-object';\nimport PINF from '@stdlib/constants/math/float64-pinf';\nimport NINF from '@stdlib/constants/math/float64-ninf';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport createTooltip from './create_tooltip.js';\nimport './number.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:number-input' );\nconst uid = generateUID( 'number-input' );\n\n\n// MAIN //\n\n/**\n* A number input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the number to be assigned to\n* @property {number} value - number value (for controlled component)\n* @property {number} defaultValue - value indicating the default value of the input at startup\n* @property {boolean} disabled - boolean indicating whether the input is active or not\n* @property {number} min - number indicating the smallest possible value that may be inserted\n* @property {number} max - number indicating the maximum value that may be inserted\n* @property {(number|string)} step - number indicating the incremental changes when using the increment arrows\n* @property {boolean} inline - indicates whether the input is displayed inline\n* @property {string} legend - string indicating the text displayed next to the number input\n* @property {boolean} numbersOnly - controls whether only numbers are accepted\n* @property {string} tooltip - tooltip string (if not set, the tooltip is automatically generated)\n* @property {string} tooltipPlacement - direction of the tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} inputStyle - CSS inline styles for input element\n* @property {Function} onBlur - callback function to be invoked when using a blur method\n* @property {Function} onChange - callback function to be invoked when number input is changed\n* @property {Function} onKeyPress - callback function to be invoked when any key is entered\n* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down\n* @property {Function} onKeyUp - callback function to be invoked when key is released\n*/\nclass NumberInput extends Input {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tconst session = context;\n\t\tthis.id = props.id || uid( props );\n\t\tthis.state = {\n\t\t\tvalue: props.value || (props.bind && session.state ?\n\t\t\t\tsession.state[ props.bind ]:\n\t\t\t\tprops.defaultValue),\n\t\t\ttooltip: props.tooltip || createTooltip( props ),\n\t\t\tprevProps: props\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tlet newState = {};\n\t\tconst { prevProps } = prevState;\n\t\tif ( nextProps.defaultValue !== prevProps.defaultValue ) {\n\t\t\tnewState.value = nextProps.defaultValue;\n\t\t}\n\t\telse if ( nextProps.bind !== prevProps.bind ) {\n\t\t\tnewState.value = global.lesson.state[ nextProps.bind ];\n\t\t}\n\t\tif ( nextProps.min !== prevProps.min || nextProps.max !== prevProps.max ) {\n\t\t\tnewState.tooltip = nextProps.tooltip || createTooltip( nextProps );\n\t\t}\n\t\telse if ( nextProps.tooltip && nextProps.tooltip !== prevState.tooltip ) {\n\t\t\tnewState.tooltip = nextProps.tooltip;\n\t\t}\n\t\tif ( !isEmptyObject( newState ) ) {\n\t\t\tdebug( 'Created new state from props...' );\n\t\t\tnewState.prevProps = nextProps;\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tdebug( 'Component did update...' );\n\t\tif ( this.props.bind ) {\n\t\t\tconst globalVal = global.lesson.state[ this.props.bind ];\n\t\t\tif ( globalVal !== this.state.value && isNumber( this.state.value ) ) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvalue: globalVal\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\thandleChange = ( event ) => {\n\t\tdebug( 'Handle change of input field...' );\n\t\tlet valid = event.target.validity.valid;\n\t\tlet value = event.target.value;\n\t\tthis.setState({\n\t\t\tvalue\n\t\t}, () => {\n\t\t\tif ( this.props.value ||\n\t\t\t\t(valid && value !== '' &&\n\t\t\t\tvalue !== '-' && value !== '.' && value !== '-.' )\n\t\t\t) {\n\t\t\t\tvalue = parseFloat( value );\n\t\t\t\tif ( isnan( value ) ) {\n\t\t\t\t\tvalue = '';\n\t\t\t\t}\n\t\t\t\tthis.props.onChange( value );\n\t\t\t\tif ( this.props.bind ) {\n\t\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if ( this.props.bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tfinishChange = ( event ) => {\n\t\tconst { max, min, step } = this.props;\n\t\tdebug( 'Finished change...' );\n\t\tlet value = event.target.value;\n\t\tif ( contains( value, '/' ) ) {\n\t\t\tdebug( 'Encountered a fraction...' );\n\t\t\tlet vals = value.split( '/' );\n\t\t\tif ( vals[ 0 ] !== '' && vals[ 1 ] !== '' ) {\n\t\t\t\tvalue = parseFloat( vals[ 0 ]) / parseFloat( vals[ 1 ]);\n\t\t\t}\n\t\t}\n\t\tif ( isnan( value ) ) {\n\t\t\tvalue = '';\n\t\t}\n\t\telse if (\n\t\t\tvalue !== '' && value !== '-' &&\n\t\t\tvalue !== '.' && value !== '-.'\n\t\t) {\n\t\t\tvalue = parseFloat( value );\n\t\t}\n\t\tif ( value > max ) {\n\t\t\tvalue = max;\n\t\t}\n\t\telse if ( value < min ) {\n\t\t\tvalue = min;\n\t\t}\n\t\telse if (\n\t\t\tstep === 1.0 && value !== '' &&\n\t\t\tvalue !== '-' && value !== '.' && value !== '-.'\n\t\t) {\n\t\t\tvalue = value - value % this.props.step;\n\t\t}\n\t\tthis.props.onChange( value );\n\t\tthis.props.onBlur( value );\n\t\tif ( value !== this.state.value ) {\n\t\t\tthis.setState({\n\t\t\t\tvalue\n\t\t\t}, () => {\n\t\t\t\tif ( this.props.bind ) {\n\t\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t\t[ this.props.bind ]: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\trender() {\n\t\tlet { value } = this.state;\n\t\tif ( this.props.value !== null ) {\n\t\t\tvalue = this.props.value;\n\t\t}\n\t\tif ( this.props.inline === true ) {\n\t\t\tconst input =\n\t\t\t\t<span className=\"input\" style={{ padding: '5px', ...this.props.style }}>\n\t\t\t\t\t{ this.props.legend ? <label htmlFor={this.id} > {this.props.legend} =  </label> : null }\n\t\t\t\t\t<input\n\t\t\t\t\t\tid={this.id}\n\t\t\t\t\t\ttype={this.props.numbersOnly ? 'number' : 'text'}\n\t\t\t\t\t\tname=\"input\"\n\t\t\t\t\t\tclassName=\"number-number-input\"\n\t\t\t\t\t\tdisabled={this.props.disabled}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tstep={this.props.step}\n\t\t\t\t\t\tmin={this.props.min}\n\t\t\t\t\t\tmax={this.props.max}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\twidth: '80px',\n\t\t\t\t\t\t\tpaddingLeft: '6px',\n\t\t\t\t\t\t\tmarginLeft: '3px',\n\t\t\t\t\t\t\t...this.props.inputStyle\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tonBlur={this.finishChange}\n\t\t\t\t\t\tonKeyPress={this.props.onKeyPress}\n\t\t\t\t\t\tonKeyDown={this.props.onKeyDown}\n\t\t\t\t\t\tonKeyUp={this.props.onKeyUp}\n\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t/>\n\t\t\t\t\t{ this.props.description ?\n\t\t\t\t\t\t<span>({this.props.description})</span> :\n\t\t\t\t\t\t<span />\n\t\t\t\t\t}\n\t\t\t\t</span>;\n\t\t\treturn this.props.disabled ?\n\t\t\t\tinput:\n\t\t\t\t<Tooltip id=\"number-input-tooltip-inline\" placement=\"top\" tooltip={this.state.tooltip} >\n\t\t\t\t\t{input}\n\t\t\t\t</Tooltip>;\n\t\t}\n\t\tlet input = <input\n\t\t\tid={this.id}\n\t\t\ttype={this.props.numbersOnly ? 'number' : 'text'}\n\t\t\tname=\"input\"\n\t\t\tclassName=\"number-number-input\"\n\t\t\tdisabled={this.props.disabled}\n\t\t\tvalue={value}\n\t\t\tstep={this.props.step}\n\t\t\tmin={this.props.min}\n\t\t\tmax={this.props.max}\n\t\t\tstyle={{\n\t\t\t\twidth: '80px',\n\t\t\t\tmarginLeft: '24px',\n\t\t\t\t...this.props.inputStyle\n\t\t\t}}\n\t\t\tonChange={this.handleChange}\n\t\t\tonBlur={this.finishChange}\n\t\t\tonKeyPress={this.props.onKeyPress}\n\t\t\tonKeyDown={this.props.onKeyDown}\n\t\t\tonKeyUp={this.props.onKeyUp}\n\t\t\tautoComplete=\"off\"\n\t\t/>;\n\t\treturn ( <div className=\"input\" style={{\n\t\t\tmarginBottom: '4px',\n\t\t\tmarginTop: '4px',\n\t\t\t...this.props.style\n\t\t}}>\n\t\t\t{ this.props.legend ?\n\t\t\t\t<span>\n\t\t\t\t\t<label htmlFor={this.id} >\n\t\t\t\t\t\t{isString( this.props.legend ) ?\n\t\t\t\t\t\t\tthis.props.legend+':' :\n\t\t\t\t\t\t\tthis.props.legend\n\t\t\t\t\t\t}\n\t\t\t\t\t</label>\n\t\t\t\t\t{ this.props.description ?\n\t\t\t\t\t\t<span> {this.props.description}</span> :\n\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t</span> : null\n\t\t\t}\n\t\t\t<Tooltip\n\t\t\t\tid=\"number-input-tooltip\" placement={this.props.tooltipPlacement}\n\t\t\t\ttooltip={this.state.tooltip}\n\t\t\t><span className=\"number-input-span\" >{input}</span></Tooltip>\n\t\t</div> );\n\t}\n}\n\n\n// PROPERTIES //\n\nNumberInput.defaultProps = {\n\tbind: '',\n\tdisabled: false,\n\tlegend: null,\n\tmin: NINF,\n\tmax: PINF,\n\tstep: 1,\n\tdefaultValue: 0,\n\tonBlur() {},\n\tonChange() {},\n\tonKeyDown() {},\n\tonKeyPress() {},\n\tonKeyUp() {},\n\tinline: false,\n\tnumbersOnly: true,\n\tstyle: {},\n\tinputStyle: {},\n\tvalue: null,\n\ttooltip: null,\n\ttooltipPlacement: 'left'\n};\n\nNumberInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmin: PropTypes.number,\n\tnumbersOnly: PropTypes.bool,\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\tstyle: PropTypes.object,\n\tinputStyle: PropTypes.object,\n\tvalue: PropTypes.number,\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'top', 'right', 'bottom', 'left' ])\n};\n\nNumberInput.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default NumberInput;\n"],"sourceRoot":""}